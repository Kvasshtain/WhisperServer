{"version":3,"sources":["actions/chatSettingsActions.js","actions/helper.js","applicationSettings.js","actions/messageListActions.js","actions/webSocketActions.js","resources/BlueWaitingIcon.png","resources/Whisper.png","reducers/index.js","reducers/messageListData.js","reducers/chatSettings.js","middleware/webSocketMiddleware.js","components/ModalWindow/asModalWindow.js","components/InputField/InputField.js","components/AuthenticationAndRegistrationForm/AuthenticationAndRegistrationForm.js","containers/AuthenticationAndRegistrationWindow/AuthenticationAndRegistrationWindow.js","containers/SettingsPanel/SettingsPanel.js","components/UserFrame/UserFrame.js","components/AddToChatNewUserWindow/__SeekForm/AddToChatNewUserWindow-SeekForm.js","components/AddToChatNewUserWindow/AddToChatNewUserWindow.js","components/FileInput/FileInput.js","components/SpecialMessagesPreprocessorMenu/__AddFileForm/SpecialMessagesPreprocessorMenu-AddFileForm.js","components/SpecialMessagesPreprocessorMenu/SpecialMessagesPreprocessorMenu.js","containers/CurrentChatSettings/CurrentChatSettings.js","containers/AppPanel/__TopPanel/AppPanel-TopPanel.js","components/helper.js","components/MessageFrame/__MessageTimestamp/MessageFrame-MessageTimestamp.js","components/MessageFrame/__AuthorNameLabel/MessageFrame-AuthorNameLabel.js","components/MessageFrame/__MessageTextField/MessageFrame-MessageTextField.js","components/MessageFrame/MessageFrame.js","containers/MessageList/__ScrollDownButton/MessageList-ScrollDownButton.js","containers/MessageList/MessageList.js","components/SimpleDataForm/SimpleDataForm.js","containers/CurrentChatPanel/CurrentChatPanel.js","containers/ChatList/__ChatFrame/ChatList-ChatFrame.js","containers/ChatList/ChatList.js","containers/UserChatsPanel/UserChatsPanel.js","containers/AppPanel/__MainPanel/AppPanel-MainPanel.js","containers/AppPanel/AppPanel.js","containers/App.js","components/ErrorWindow/ErrorWindow.js","serviceWorker.js","index.js","store/configureStore.js"],"names":["CHANGE_CURRENT_USER","CHANGE_CURRENT_CHAT","REFRESH_CHATS_LIST","SET_AUTHENTICATION_RESULT","SET_LAST_ERROR","FILL_FOUND_USERS_LIST","CLEAR_LAST_ERROR","ADD_NEW_SPECIAL_MESSAGES_PREPROCESSOR_FUNCTION","changeCurrentUser","user","type","payload","changeCurrentChat","chat","refreshChatsList","chats","setAuthenticationResult","result","handleServerError","serverErrorData","dispatch","status","resetAuthenticationResult","setLastError","errorData","fillFoundUsersList","usersList","localStorage","removeItem","clearLastError","addNewSpecialMessagesPreprocessorFunction","forwardPreprocessorFunction","backwardPreprocessorFunction","checkIsUserAuthenticated","a","userJson","JSON","parse","fetchChatsList","_id","addNewSpecialMessagesPreprocessor","file","getState","readTextFile","preprocessorString","isStringNullOrEmpty","message","eval","createTextMutators","mutators","forward","backward","currentChat","setItem","tryGetPreprocessorAnd–°hangeCurrentChat","getItem","clearMessages","err","createNewChat","name","users","getUserToken","token","newChatData","fetch","serverLocation","submitNewChatPath","method","headers","createHttpHeadersWithToken","body","stringify","response","data","checkResponseAndCreateErrorIfBadStatus","json","currentUser","console","log","userId","chatsListGetPath","badStatusText","submitUserEmailAndPassword","email","password","validateEmail","userAuthenticationData","submitUserEmailAndPasswordPath","httpHeadersWithoutToken","submitNewUser","submitNewUserPath","findUsers","userSeekData","searchUsersPath","addNewUserToCurrentChat","addNewUserToChatPath","chatId","newUserId","Accept","Authorization","ok","statusText","test","Promise","resolve","reject","reader","FileReader","onload","onerror","readAsText","str","trim","convertMessages","messages","convertor","map","item","text","createGuid","replace","c","r","Math","random","toString","toUpperCase","wsServerLocation","messageSendPath","messageGetPath","newMessageGetPath","fetchMessagesCount","statusRenderingDelay","ADD_NEW_MESSAGE","MESSAGE_WAS_RECEIVED","REFRESH_MESSAGES_LIST","UNSHIFT_PREVIOUS_MESSAGES","PUSH_NEW_MESSAGES","CLEAR_MESSAGES","ADD_MSSAGE_TO_WAITING_LIST","REMOVE_MESSAGES_FROM_WAITING_LIST","messageWasReceived","bool","encryptAndSendNewMessage","processedText","sourceText","clientSideId","time","Date","getTime","authorEmail","authorName","addMessageToWaitingList","wasMessageReceived","sendNewMessage","fetchMessagesList","oldestMessageTime","fetchNewMessages","newestMessageTime","applyBackwardPreprocessorFunctionAndPushMessage","pushNewMessages","removeMessagesFromWaitingList","subscribeForNewMessages","wsConnect","unsubscribeForNewMessages","wsDisconnect","WS_CONNECT","WS_DISCONNECT","host","wsConnected","wsDisconnected","module","exports","combineReducers","state","action","previousMessages","newMessages","messagesWaitingList","filter","includes","chatsList","isUserAuthenticated","lastError","webSocketMiddleware","socket","store","next","close","WebSocket","onmessage","event","actionType","onMessage","onclose","onClose","onopen","target","url","onOpen","asModalWindow","Component","props","className","InputField","caption","placeholder","value","onChange","AuthenticationAndRegistrationForm","isRegistrationMode","onSubmit","eventArg","preventDefault","onAuthenticationSubmit","onRegistrationSubmit","setState","updateUserEmailValue","updateUserNameValue","updateUserPasswordValue","changeMode","checked","renderHeader","headerText","renderLabel","align","src","require","renderUserNameInputField","renderSubmitButton","buttonText","onClick","this","React","AuthenticationAndRegistrationWindow","componentDidUpdate","history","push","AuthenticationAndRegistrationWindowWithRouter","withRouter","connect","userEmail","userPassword","onSignOut","SettingsPanel","UserFrame","onUserClick","SeekForm","onSubmitUserSeekData","searchQueryString","updateSearchQueryString","AddToChatNewUserWindow","renderUsersList","length","key","onCancelClick","FileInput","filePath","updateFile","files","renderFileName","fileName","AddFileForm","onSubmitFile","updateMessagesPreprocessorFile","SpecialMessagesPreprocessorMenu","AddToChatNewUserModalWindow","SpecialMessagesPreprocessorModalWindow","CurrentChatSettings","onAddUserButtonClick","showAddedUserMenu","onAddSpecialMessagesPreprocessorButtonClick","showSpecialMessagesPreprocessorMenu","cancelUserAdding","preprocessorFunctionString","cancelSpecialMessagesPreprocessorAdding","renderAddedUserWindow","Fragment","TopPanel","addLeadZero","number","MessageTimestamp","date","hours","getHours","minutes","getMinutes","day","getDate","month","getMonth","year","getFullYear","AuthorNameLabel","MessageTextField","MessageFrame","componentDidMount","hasServerReceivedMessage","statusRenderingDelayId","setTimeout","enableStatusRendering","isStatusRenderingEnabled","renderAuthorName","currentUserEmail","clearInterval","waitingIcon","messageFrameClass","renderMessageStatus","ScrollDownButton","decodedString","DOMParser","parseFromString","textContent","onScrollDownClick","MessageList","fetchMessages","current","messageListRef","reloadMessagesList","messagesLength","previousMessagesLength","suspendMessagesFetching","scrollTop","scrollDownIfNeed","needScrollDown","fetchMessagesForced","lastMessageIndex","scrollDown","scrollHeight","onScroll","clientHeight","showScrollDownButton","renderMessageList","index","renderScrollDownButton","renderChatNameCaption","chatName","createRef","enableScrollDown","offsetWidth","clientWidth","waitingMessages","ref","SimpleDataForm","newData","onSubmitNewData","updateInputValue","buttonCaption","CurrentChatPanel","ChatFrame","onSelectChat","ChatList","renderChatList","UserChatsPanel","onSubmitNewChat","usersIds","MainPanel","AppPanel","AppPanelWithRouter","ErrorModalWindow","statusParagraph","badStatusTextParagraph","messageParagraph","onOk","App","exact","path","render","component","renderErrorWindow","renderMainContent","AppWithRouter","Boolean","window","location","hostname","match","createStore","rootReducer","applyMiddleware","thunk","wsMiddleware","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ae4a2517.chunk.js","sourcesContent":["import {\r\n  serverLocation,\r\n  submitNewChatPath,\r\n  chatsListGetPath,\r\n  submitUserEmailAndPasswordPath,\r\n  submitNewUserPath,\r\n  searchUsersPath,\r\n  addNewUserToChatPath,\r\n} from '../applicationSettings'\r\n\r\nimport { clearMessages } from './messageListActions'\r\n\r\nimport {\r\n  createHttpHeadersWithToken,\r\n  httpHeadersWithoutToken,\r\n  checkResponseAndCreateErrorIfBadStatus,\r\n  validateEmail,\r\n  readTextFile,\r\n  isStringNullOrEmpty,\r\n  getUserToken,\r\n} from './helper'\r\n\r\nexport const CHANGE_CURRENT_USER = 'CHANGE_CURRENT_USER'\r\nexport const CHANGE_CURRENT_CHAT = 'CHANGE_CURRENT_CHAT'\r\nexport const REFRESH_CHATS_LIST = 'REFRESH_CHATS_LIST'\r\nexport const SET_AUTHENTICATION_RESULT = 'SET_AUTHENTICATION_RESULT'\r\nexport const SET_LAST_ERROR = 'SET_LAST_ERROR'\r\nexport const FILL_FOUND_USERS_LIST = 'FILL_FOUND_USERS_LIST'\r\nexport const CLEAR_LAST_ERROR = 'CLEAR_LAST_ERROR'\r\nexport const ADD_NEW_SPECIAL_MESSAGES_PREPROCESSOR_FUNCTION =\r\n  'ADD_NEW_SPECIAL_MESSAGES_PREPROCESSOR_FUNCTION'\r\n\r\nexport function changeCurrentUser(user) {\r\n  return {\r\n    type: CHANGE_CURRENT_USER,\r\n    payload: user,\r\n  }\r\n}\r\n\r\nexport function changeCurrentChat(chat) {\r\n  return {\r\n    type: CHANGE_CURRENT_CHAT,\r\n    payload: chat,\r\n  }\r\n}\r\n\r\nexport function refreshChatsList(chats) {\r\n  return {\r\n    type: REFRESH_CHATS_LIST,\r\n    payload: chats,\r\n  }\r\n}\r\n\r\nexport function setAuthenticationResult(result) {\r\n  return {\r\n    type: SET_AUTHENTICATION_RESULT,\r\n    payload: result,\r\n  }\r\n}\r\n\r\nexport function handleServerError(serverErrorData) {\r\n  return dispatch => {\r\n    if (serverErrorData.status === 401) {\r\n      dispatch(resetAuthenticationResult())\r\n    }\r\n\r\n    dispatch(setLastError(serverErrorData))\r\n  }\r\n}\r\n\r\nexport function setLastError(errorData) {\r\n  return {\r\n    type: SET_LAST_ERROR,\r\n    payload: errorData,\r\n  }\r\n}\r\n\r\nexport function fillFoundUsersList(usersList) {\r\n  return {\r\n    type: FILL_FOUND_USERS_LIST,\r\n    payload: usersList,\r\n  }\r\n}\r\n\r\nexport function resetAuthenticationResult() {\r\n  return dispatch => {\r\n    localStorage.removeItem('userJson')\r\n    dispatch(setAuthenticationResult(false))\r\n  }\r\n}\r\n\r\nexport function clearLastError() {\r\n  return {\r\n    type: CLEAR_LAST_ERROR,\r\n  }\r\n}\r\n\r\nexport function addNewSpecialMessagesPreprocessorFunction(\r\n  forwardPreprocessorFunction,\r\n  backwardPreprocessorFunction\r\n) {\r\n  return {\r\n    type: ADD_NEW_SPECIAL_MESSAGES_PREPROCESSOR_FUNCTION,\r\n    payload: {\r\n      forwardPreprocessorFunction,\r\n      backwardPreprocessorFunction,\r\n    },\r\n  }\r\n}\r\n\r\nexport function checkIsUserAuthenticated() {\r\n  return async dispatch => {\r\n    const { userJson } = localStorage\r\n    let user\r\n    try {\r\n      if (!userJson) return\r\n      user = await JSON.parse(userJson)\r\n    } catch (error) {\r\n      localStorage.removeItem('userJson')\r\n      return\r\n    }\r\n\r\n    dispatch(changeCurrentUser(user))\r\n    dispatch(setAuthenticationResult(true))\r\n    dispatch(fetchChatsList(user._id))\r\n  }\r\n}\r\n\r\nexport function addNewSpecialMessagesPreprocessor(file) {\r\n  return async (dispatch, getState) => {\r\n    if (!file) return\r\n\r\n    let preprocessorString = await readTextFile(file)\r\n\r\n    if (isStringNullOrEmpty(preprocessorString)) {\r\n      dispatch(setLastError({ message: 'File is empty or has wrong format' }))\r\n      return\r\n    }\r\n\r\n    let createTextMutators\r\n\r\n    try {\r\n      eval(preprocessorString)\r\n    } catch (err) {\r\n      dispatch(setLastError({ message: 'File has wrong format' }))\r\n      return\r\n    }\r\n\r\n    if (typeof createTextMutators !== 'function') {\r\n      dispatch(setLastError({ message: 'File has wrong format' }))\r\n      return\r\n    }\r\n\r\n    const mutators = createTextMutators()\r\n\r\n    if (!mutators) {\r\n      dispatch(setLastError({ message: 'File has wrong format' }))\r\n      return\r\n    }\r\n\r\n    const { forward, backward } = mutators\r\n    if (typeof forward !== 'function' || typeof backward !== 'function') {\r\n      dispatch(setLastError({ message: 'File has wrong format' }))\r\n      return\r\n    }\r\n\r\n    const { currentChat } = getState()\r\n\r\n    localStorage.setItem(currentChat._id, preprocessorString)\r\n\r\n    dispatch(addNewSpecialMessagesPreprocessorFunction(forward, backward))\r\n  }\r\n}\r\n\r\nexport function tryGetPreprocessorAnd–°hangeCurrentChat(chat) {\r\n  return dispatch => {\r\n    const preprocessorString = localStorage.getItem(chat._id)\r\n\r\n    dispatch(changeCurrentChat(chat))\r\n    dispatch(clearMessages())\r\n\r\n    let createTextMutators\r\n\r\n    if (preprocessorString) {\r\n      try {\r\n        eval(preprocessorString)\r\n      } catch (err) {\r\n        return\r\n      }\r\n    }\r\n\r\n    if (typeof createTextMutators !== 'function') {\r\n      return\r\n    }\r\n\r\n    const mutators = createTextMutators()\r\n\r\n    if (!mutators) {\r\n      return\r\n    }\r\n\r\n    const { forward, backward } = mutators\r\n\r\n    if (typeof forward !== 'function' || typeof backward !== 'function') {\r\n      return\r\n    }\r\n\r\n    dispatch(addNewSpecialMessagesPreprocessorFunction(forward, backward))\r\n  }\r\n}\r\n\r\nexport function createNewChat(name, users) {\r\n  return async (dispatch, getState) => {\r\n    try {\r\n      const token = await getUserToken()\r\n\r\n      if (!token) return\r\n\r\n      const newChatData = {\r\n        chat: {\r\n          name,\r\n          users,\r\n        },\r\n      }\r\n\r\n      const response = await fetch(serverLocation + submitNewChatPath, {\r\n        method: 'POST',\r\n        headers: createHttpHeadersWithToken(token),\r\n        body: JSON.stringify(newChatData),\r\n      })\r\n\r\n      let data = checkResponseAndCreateErrorIfBadStatus(response)\r\n\r\n      if (!data) {\r\n        data = await response.json()\r\n      }\r\n\r\n      if (data.status) {\r\n        dispatch(handleServerError(data))\r\n      } else {\r\n        const { currentUser } = getState()\r\n\r\n        dispatch(tryGetPreprocessorAnd–°hangeCurrentChat(data.chat))\r\n        dispatch(fetchChatsList(currentUser._id))\r\n      }\r\n    } catch (error) {\r\n      console.log('error', error)\r\n    }\r\n  }\r\n}\r\n\r\nexport function fetchChatsList(userId) {\r\n  return async dispatch => {\r\n    try {\r\n      const token = await getUserToken()\r\n\r\n      if (!token) return\r\n\r\n      const response = await fetch(\r\n        `${serverLocation}${chatsListGetPath}?user_id=${userId}`,\r\n        {\r\n          method: 'GET',\r\n          headers: createHttpHeadersWithToken(token),\r\n        }\r\n      )\r\n\r\n      let data = checkResponseAndCreateErrorIfBadStatus(response)\r\n\r\n      if (!data) {\r\n        data = await response.json()\r\n      }\r\n\r\n      if (data.badStatusText) {\r\n        dispatch(handleServerError(data))\r\n        localStorage.removeItem('token')\r\n        localStorage.removeItem('userJson')\r\n      } else {\r\n        dispatch(refreshChatsList(data))\r\n      }\r\n    } catch (error) {\r\n      console.log('error', error)\r\n    }\r\n  }\r\n}\r\n\r\nexport function submitUserEmailAndPassword(email, password) {\r\n  return async dispatch => {\r\n    try {\r\n      if (!validateEmail(email)) {\r\n        dispatch(\r\n          setLastError({\r\n            message: `Bad email: ${email}`,\r\n          })\r\n        )\r\n        return\r\n      }\r\n\r\n      const userAuthenticationData = {\r\n        user: {\r\n          email,\r\n          name: '',\r\n          password,\r\n        },\r\n      }\r\n\r\n      const response = await fetch(\r\n        serverLocation + submitUserEmailAndPasswordPath,\r\n        {\r\n          method: 'POST',\r\n          headers: httpHeadersWithoutToken,\r\n          body: JSON.stringify(userAuthenticationData),\r\n        }\r\n      )\r\n\r\n      let data = checkResponseAndCreateErrorIfBadStatus(response)\r\n\r\n      if (!data) {\r\n        data = await response.json()\r\n      }\r\n\r\n      if (data.badStatusText) {\r\n        dispatch(handleServerError(data))\r\n        dispatch(setAuthenticationResult(false))\r\n      } else {\r\n        const { _id } = data.user\r\n\r\n        localStorage.setItem('userJson', JSON.stringify(data.user))\r\n\r\n        dispatch(changeCurrentUser(data.user))\r\n        dispatch(setAuthenticationResult(true))\r\n        dispatch(fetchChatsList(_id))\r\n      }\r\n    } catch (error) {\r\n      console.log('error', error)\r\n    }\r\n  }\r\n}\r\n\r\nexport function submitNewUser(user) {\r\n  return async dispatch => {\r\n    try {\r\n      if (!validateEmail(user.email)) {\r\n        dispatch(\r\n          setLastError({\r\n            message: `Bad email: ${user.email}`,\r\n          })\r\n        )\r\n\r\n        return\r\n      }\r\n\r\n      const response = await fetch(serverLocation + submitNewUserPath, {\r\n        method: 'POST',\r\n        headers: httpHeadersWithoutToken,\r\n        body: JSON.stringify({ user }),\r\n      })\r\n\r\n      let data = checkResponseAndCreateErrorIfBadStatus(response)\r\n\r\n      if (!data) {\r\n        data = await response.json()\r\n      }\r\n\r\n      if (data.badStatusText) {\r\n        dispatch(handleServerError(data))\r\n        dispatch(setAuthenticationResult(false))\r\n      } else {\r\n        const { _id } = data.user\r\n\r\n        localStorage.setItem('userJson', JSON.stringify(data.user))\r\n\r\n        dispatch(changeCurrentUser(data.user))\r\n        dispatch(changeCurrentChat({}))\r\n        dispatch(setAuthenticationResult(true))\r\n        dispatch(fetchChatsList(_id))\r\n      }\r\n    } catch (error) {\r\n      console.log('error', error)\r\n    }\r\n  }\r\n}\r\n\r\nexport function findUsers(userSeekData) {\r\n  return async dispatch => {\r\n    try {\r\n      const token = await getUserToken()\r\n\r\n      if (!token) return\r\n\r\n      const response = await fetch(\r\n        `${serverLocation}${searchUsersPath}?user_seek_data=${userSeekData}`,\r\n        {\r\n          method: 'GET',\r\n          headers: createHttpHeadersWithToken(token),\r\n        }\r\n      )\r\n\r\n      let data = checkResponseAndCreateErrorIfBadStatus(response)\r\n\r\n      if (!data) {\r\n        data = await response.json()\r\n      }\r\n\r\n      if (data.badStatusText) {\r\n        dispatch(handleServerError(data))\r\n\r\n        localStorage.removeItem('token')\r\n        localStorage.removeItem('userJson')\r\n      } else {\r\n        dispatch(fillFoundUsersList(data))\r\n      }\r\n    } catch (error) {\r\n      console.log('error', error)\r\n    }\r\n  }\r\n}\r\n\r\nexport function addNewUserToCurrentChat(user) {\r\n  return async (dispatch, getState) => {\r\n    try {\r\n      const token = await getUserToken()\r\n\r\n      if (!token) return\r\n\r\n      const { currentChat } = getState()\r\n\r\n      const response = await fetch(serverLocation + addNewUserToChatPath, {\r\n        method: 'POST',\r\n        headers: createHttpHeadersWithToken(token),\r\n        body: JSON.stringify({\r\n          chatId: currentChat._id,\r\n          newUserId: user._id,\r\n        }),\r\n      })\r\n\r\n      let data = checkResponseAndCreateErrorIfBadStatus(response)\r\n\r\n      if (!data) {\r\n        data = await response.json()\r\n      }\r\n\r\n      if (data.badStatusText) {\r\n        dispatch(handleServerError(data))\r\n      } else {\r\n        dispatch(tryGetPreprocessorAnd–°hangeCurrentChat(data.chat))\r\n      }\r\n    } catch (error) {\r\n      console.log('error', error)\r\n    }\r\n  }\r\n}\r\n","export const httpHeadersWithoutToken = {\r\n  Accept: 'application/json',\r\n  'Content-Type': 'application/json',\r\n}\r\n\r\nexport function createHttpHeadersWithToken(token) {\r\n  return {\r\n    Accept: 'application/json',\r\n    'Content-Type': 'application/json',\r\n    Authorization: `Bearer ${token}`,\r\n  }\r\n}\r\n\r\nexport function checkResponseAndCreateErrorIfBadStatus(response) {\r\n  if (response.ok) {\r\n    return\r\n  } else {\r\n    const { status, statusText, message } = response\r\n\r\n    return {\r\n      status,\r\n      badStatusText: statusText,\r\n      message,\r\n    }\r\n  }\r\n}\r\n\r\nexport function validateEmail(email) {\r\n  const reg = /^([A-Za-z0-9_\\-\\.])+\\@([A-Za-z0-9_\\-\\.])+\\.([A-Za-z]{2,4})$/\r\n\r\n  return reg.test(email)\r\n}\r\n\r\nexport function readTextFile(file) {\r\n  return new Promise((resolve, reject) => {\r\n    var reader = new FileReader()\r\n    reader.onload = () => {\r\n      resolve(reader.result)\r\n    }\r\n    reader.onerror = reject\r\n    reader.readAsText(file)\r\n  })\r\n}\r\n\r\nexport function isStringNullOrEmpty(str) {\r\n  if (!str) return true\r\n\r\n  if (str.trim() === '') return true\r\n\r\n  return false\r\n}\r\n\r\nexport function convertMessages(messages, convertor) {\r\n  if (convertor) {\r\n    messages = messages.map(item => {\r\n      const text = convertor(item.text)\r\n      return { ...item, text }\r\n    })\r\n  }\r\n\r\n  return messages\r\n}\r\n\r\nexport async function getUserToken() {\r\n  const { userJson } = localStorage\r\n\r\n  if (!userJson) return null\r\n\r\n  const user = await JSON.parse(userJson)\r\n\r\n  if (!user) return null\r\n\r\n  return user.token ? user.token : null\r\n}\r\n\r\nexport function createGuid() {\r\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\r\n    var r = Math.random()*16|0, v = c == 'x' ? r : (r&0x3|0x8);\r\n    return v.toString(16);\r\n  }).toUpperCase();\r\n}\r\n","//export const serverLocation = 'https://blooming-basin-70501.herokuapp.com/'\r\n//export const wsServerLocation = 'wss://blooming-basin-70501.herokuapp.com/'\r\n\r\nexport const serverLocation = 'http://localhost:4000/'\r\nexport const wsServerLocation = 'ws://localhost:4000/'\r\n\r\nexport const messageSendPath = 'messages/new/'\r\nexport const messageGetPath = 'messages/listRequest/'\r\nexport const newMessageGetPath = 'messages/lastMessages/'\r\nexport const submitNewChatPath = 'chats/new/'\r\nexport const chatsListGetPath = 'chats/listRequest/'\r\nexport const submitUserEmailAndPasswordPath = 'users/login/'\r\nexport const submitNewUserPath = 'users/new/'\r\nexport const searchUsersPath = 'users/search/'\r\nexport const addNewUserToChatPath = 'chats/addNewUser/'\r\n\r\nexport const fetchMessagesCount = 15\r\nexport const updateInterval = 10000\r\nexport const statusRenderingDelay = 1000\r\n","import {\r\n  serverLocation,\r\n  wsServerLocation,\r\n  messageSendPath,\r\n  messageGetPath,\r\n  newMessageGetPath,\r\n  fetchMessagesCount,\r\n} from '../applicationSettings'\r\n\r\nimport { handleServerError } from './chatSettingsActions'\r\nimport { wsConnect, wsDisconnect } from './webSocketActions'\r\n\r\nimport {\r\n  createHttpHeadersWithToken,\r\n  checkResponseAndCreateErrorIfBadStatus,\r\n  convertMessages,\r\n  getUserToken,\r\n  createGuid,\r\n} from './helper'\r\n\r\nexport const ADD_NEW_MESSAGE = 'ADD_NEW_MESSAGE'\r\nexport const MESSAGE_WAS_RECEIVED = 'MESSAGE_WAS_RECEIVED'\r\nexport const REFRESH_MESSAGES_LIST = 'REFRESH_MESSAGES_LIST'\r\nexport const UNSHIFT_PREVIOUS_MESSAGES = 'UNSHIFT_PREVIOUS_MESSAGES'\r\nexport const PUSH_NEW_MESSAGES = 'PUSH_NEW_MESSAGES'\r\nexport const CLEAR_MESSAGES = 'CLEAR_MESSAGES'\r\nexport const ADD_MSSAGE_TO_WAITING_LIST = 'ADD_MSSAGE_TO_WAITING_LIST'\r\nexport const REMOVE_MESSAGES_FROM_WAITING_LIST = 'REMOVE_MESSAGES_FROM_WAITING_LIST'\r\n\r\nexport function clearMessages() {\r\n  return {\r\n    type: CLEAR_MESSAGES,\r\n  }\r\n}\r\n\r\nexport function addNewMessage(message) {\r\n  return {\r\n    type: ADD_NEW_MESSAGE,\r\n    payload: message,\r\n  }\r\n}\r\n\r\nexport function messageWasReceived(bool) {\r\n  return {\r\n    type: MESSAGE_WAS_RECEIVED,\r\n    payload: bool,\r\n  }\r\n}\r\n\r\nexport function refreshMessagesList(messages) {\r\n  return {\r\n    type: REFRESH_MESSAGES_LIST,\r\n    payload: messages,\r\n  }\r\n}\r\n\r\nexport function unshiftPreviousMessages(messages) {\r\n  return {\r\n    type: UNSHIFT_PREVIOUS_MESSAGES,\r\n    payload: messages,\r\n  }\r\n}\r\n\r\nexport function pushNewMessages(messages) {\r\n  return {\r\n    type: PUSH_NEW_MESSAGES,\r\n    payload: messages,\r\n  }\r\n}\r\n\r\nexport function encryptAndSendNewMessage(text) {\r\n  return (dispatch, getState) => {    \r\n    const { forwardPreprocessorFunction } = getState().currentChat\r\n\r\n    let processedText = text\r\n\r\n    if (forwardPreprocessorFunction) {\r\n      processedText = forwardPreprocessorFunction(text)\r\n    }\r\n\r\n    dispatch(sendNewMessage(processedText, text))\r\n  }\r\n}\r\n\r\nexport function addMessageToWaitingList(message) {\r\n  return {\r\n    type: ADD_MSSAGE_TO_WAITING_LIST,\r\n    payload: message,\r\n  }\r\n}\r\n\r\nexport function removeMessagesFromWaitingList(messages) {\r\n  return {\r\n    type: REMOVE_MESSAGES_FROM_WAITING_LIST,\r\n    payload: messages.map(message => {return message.clientSideId}),\r\n  }\r\n}\r\n\r\nexport function sendNewMessage(processedText, sourceText) {\r\n  return async (dispatch, getState) => {\r\n    try {\r\n      const token = await getUserToken()\r\n\r\n      if (!token) return\r\n\r\n      dispatch(messageWasReceived(false))\r\n\r\n      const clientSideId = createGuid()\r\n      const time = new Date().getTime()\r\n      const authorEmail = getState().currentUser.email\r\n      const authorName = getState().currentUser.name\r\n      const chatId = getState().currentChat._id\r\n\r\n      const message = {\r\n        _id: null,\r\n        clientSideId,\r\n        chatId,\r\n        time,\r\n        authorEmail,\r\n        authorName,\r\n        text: processedText,\r\n      }\r\n\r\n      dispatch(addMessageToWaitingList({\r\n        ...message,\r\n        text: sourceText,\r\n      }))\r\n\r\n      const response = await fetch(serverLocation + messageSendPath, {\r\n        method: 'POST',\r\n        headers: createHttpHeadersWithToken(token),\r\n        body: JSON.stringify(message),\r\n      })\r\n\r\n      let data = checkResponseAndCreateErrorIfBadStatus(response)\r\n\r\n      if (!data) {\r\n        data = await response.json()\r\n      }\r\n\r\n      if (data.status) {\r\n        dispatch(handleServerError(data))\r\n        message.wasMessageReceived = false\r\n        localStorage.removeItem('token')\r\n      } else {\r\n        message.wasMessageReceived = true\r\n        dispatch(messageWasReceived(true))\r\n      }\r\n    } catch (error) {\r\n      console.log('error', error)\r\n    }\r\n  }\r\n}\r\n\r\nexport function fetchMessagesList(chatId, oldestMessageTime) {\r\n  return async (dispatch, getState) => {\r\n    try {\r\n      const token = await getUserToken()\r\n\r\n      if (!token) return\r\n\r\n      const response = await fetch(\r\n        `${serverLocation}${messageGetPath}?chat_id=${chatId}&oldest_message_time=${oldestMessageTime}&fetch_messages_count=${fetchMessagesCount}`,\r\n        {\r\n          method: 'GET',\r\n          headers: createHttpHeadersWithToken(token),\r\n        }\r\n      )\r\n\r\n      let data = checkResponseAndCreateErrorIfBadStatus(response)\r\n\r\n      if (!data) {\r\n        data = await response.json()\r\n      }\r\n\r\n      if (data.badStatusText) {\r\n        dispatch(handleServerError(data))\r\n        localStorage.removeItem('token')\r\n      } else {\r\n        const { backwardPreprocessorFunction } = getState().currentChat\r\n        data = convertMessages(data, backwardPreprocessorFunction)\r\n        dispatch(unshiftPreviousMessages(data))\r\n      }\r\n    } catch (error) {\r\n      console.log('error', error)\r\n    }\r\n  }\r\n}\r\n\r\nexport function fetchNewMessages(chatId, newestMessageTime) {\r\n  return async (dispatch) => {\r\n    try {\r\n      const token = await getUserToken()\r\n\r\n      if (!token) return\r\n\r\n      const response = await fetch(\r\n        `${serverLocation}${newMessageGetPath}?chat_id=${chatId}&newest_message_time=${newestMessageTime}`,\r\n        {\r\n          method: 'GET',\r\n          headers: createHttpHeadersWithToken(token),\r\n        }\r\n      )\r\n\r\n      let data = checkResponseAndCreateErrorIfBadStatus(response)\r\n\r\n      if (!data) {\r\n        data = await response.json()\r\n      }\r\n\r\n      if (data.badStatusText) {\r\n        dispatch(handleServerError(data))\r\n        localStorage.removeItem('token')\r\n      } else {\r\n        dispatch(applyBackwardPreprocessorFunctionAndPushMessage(data))\r\n      }\r\n    } catch (error) {\r\n      console.log('error', error)\r\n    }\r\n  }\r\n}\r\n\r\nexport function applyBackwardPreprocessorFunctionAndPushMessage(messages) {\r\n  return (dispatch, getState) => {\r\n    const { backwardPreprocessorFunction } = getState().currentChat\r\n\r\n    if (backwardPreprocessorFunction) {\r\n      messages = convertMessages(messages, backwardPreprocessorFunction)\r\n    }\r\n\r\n    dispatch(pushNewMessages(messages))\r\n    dispatch(removeMessagesFromWaitingList(messages))\r\n  }\r\n}\r\n\r\nexport function subscribeForNewMessages(chatId) {\r\n  return dispatch => {\r\n    dispatch(wsConnect(`${wsServerLocation}${chatId}`))\r\n  }\r\n}\r\n\r\nexport function unsubscribeForNewMessages() {\r\n  return dispatch => {\r\n    dispatch(wsDisconnect())\r\n  }\r\n}\r\n","export const WS_CONNECT = 'WS_CONNECT'\r\nexport const WS_CONNECTING = 'WS_CONNECTING'\r\nexport const WS_CONNECTED = 'WS_CONNECTED'\r\nexport const WS_DISCONNECT = 'WS_DISCONNECT'\r\nexport const WS_DISCONNECTED = 'WS_DISCONNECTED'\r\n\r\nexport function wsConnect(host) {\r\n  return {\r\n    type: WS_CONNECT,\r\n    payload: host,\r\n  }\r\n}\r\n\r\nexport function wsConnecting() {\r\n  return {\r\n    type: WS_CONNECTING,\r\n  }\r\n}\r\n\r\nexport function wsConnected() {\r\n  return {\r\n    type: WS_CONNECTED,\r\n  }\r\n}\r\n\r\nexport function wsDisconnect() {\r\n  return {\r\n    type: WS_DISCONNECT,\r\n  }\r\n}\r\n\r\nexport function wsDisconnected() {\r\n  return {\r\n    type: WS_DISCONNECTED,\r\n  }\r\n}\r\n","module.exports = __webpack_public_path__ + \"static/media/BlueWaitingIcon.599230fc.png\";","module.exports = __webpack_public_path__ + \"static/media/Whisper.83cc1573.png\";","import { combineReducers } from 'redux'\r\n\r\nimport {\r\n  messages,\r\n  messagesWaitingList,\r\n  wasMessageReceived\r\n} from './messageListData'\r\n\r\nimport {\r\n  currentUser,\r\n  currentChat,\r\n  chatsList,\r\n  isUserAuthenticated,\r\n  lastError,\r\n  usersList,\r\n} from './chatSettings'\r\n\r\nexport default combineReducers({\r\n  messages,\r\n  wasMessageReceived,\r\n  messagesWaitingList,\r\n  currentUser,\r\n  currentChat,\r\n  chatsList,\r\n  isUserAuthenticated,\r\n  lastError,\r\n  usersList,\r\n})\r\n","import {\r\n  ADD_NEW_MESSAGE,\r\n  MESSAGE_WAS_RECEIVED,\r\n  REFRESH_MESSAGES_LIST,\r\n  UNSHIFT_PREVIOUS_MESSAGES,\r\n  PUSH_NEW_MESSAGES,\r\n  CLEAR_MESSAGES,\r\n  ADD_MSSAGE_TO_WAITING_LIST,\r\n  REMOVE_MESSAGES_FROM_WAITING_LIST,\r\n} from '../actions/messageListActions'\r\n\r\nexport function messages(state = [], action) {\r\n  switch (action.type) {\r\n    case CLEAR_MESSAGES:\r\n      return []\r\n    case ADD_NEW_MESSAGE:\r\n      return [...state, action.payload]\r\n    case REFRESH_MESSAGES_LIST:\r\n      return action.payload\r\n    case UNSHIFT_PREVIOUS_MESSAGES:\r\n      const previousMessages = action.payload\r\n      return [...previousMessages, ...state]\r\n    case PUSH_NEW_MESSAGES:\r\n      const newMessages = action.payload\r\n      return [...state, ...newMessages]\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport function messagesWaitingList(state = [], action) {\r\n  switch (action.type) {\r\n    case ADD_MSSAGE_TO_WAITING_LIST:\r\n      return [...state, action.payload]\r\n    case REMOVE_MESSAGES_FROM_WAITING_LIST:\r\n      return state.filter(message => !action.payload.includes(message.clientSideId))\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport function wasMessageReceived(state = true, action) {\r\n  switch (action.type) {\r\n    case MESSAGE_WAS_RECEIVED:\r\n      return action.payload\r\n    default:\r\n      return state\r\n  }\r\n}\r\n","import {\r\n  CHANGE_CURRENT_USER,\r\n  CHANGE_CURRENT_CHAT,\r\n  REFRESH_CHATS_LIST,\r\n  SET_AUTHENTICATION_RESULT,\r\n  SET_LAST_ERROR,\r\n  FILL_FOUND_USERS_LIST,\r\n  CLEAR_LAST_ERROR,\r\n  ADD_NEW_SPECIAL_MESSAGES_PREPROCESSOR_FUNCTION,\r\n} from '../actions/chatSettingsActions'\r\n\r\nexport function currentUser(state = {}, action) {\r\n  switch (action.type) {\r\n    case CHANGE_CURRENT_USER:\r\n      return action.payload\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport function currentChat(state = {}, action) {\r\n  switch (action.type) {\r\n    case CHANGE_CURRENT_CHAT:\r\n      return action.payload\r\n    case ADD_NEW_SPECIAL_MESSAGES_PREPROCESSOR_FUNCTION:\r\n      return { ...state, ...action.payload }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport function chatsList(state = [], action) {\r\n  switch (action.type) {\r\n    case REFRESH_CHATS_LIST:\r\n      return action.payload\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport function isUserAuthenticated(state = false, action) {\r\n  switch (action.type) {\r\n    case SET_AUTHENTICATION_RESULT:\r\n      return action.payload\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport function lastError(state = null, action) {\r\n  switch (action.type) {\r\n    case SET_LAST_ERROR:\r\n      return action.payload\r\n    case CLEAR_LAST_ERROR:\r\n      return null\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport function usersList(state = [], action) {\r\n  switch (action.type) {\r\n    case FILL_FOUND_USERS_LIST:\r\n      return action.payload\r\n    default:\r\n      return state\r\n  }\r\n}\r\n","import { applyBackwardPreprocessorFunctionAndPushMessage } from '../actions/messageListActions'\r\n\r\nimport {\r\n  wsConnected,\r\n  wsDisconnected,\r\n  WS_CONNECT,\r\n  WS_DISCONNECT,\r\n} from '../actions/webSocketActions'\r\n\r\nconst webSocketMiddleware = () => {\r\n  let socket = null\r\n\r\n  const onOpen = store => event => {\r\n    store.dispatch(wsConnected(event.target.url))\r\n  }\r\n\r\n  const onClose = store => () => {\r\n    store.dispatch(wsDisconnected())\r\n  }\r\n\r\n  const onMessage = store => event => {\r\n    const data = JSON.parse(event.data)\r\n\r\n    switch (data.actionType) {\r\n      case 'save':\r\n        const messages = [data.message]\r\n        store.dispatch(\r\n          applyBackwardPreprocessorFunctionAndPushMessage(messages)\r\n        )\r\n        break\r\n      default:\r\n        break\r\n    }\r\n  }\r\n\r\n  return store => next => action => {\r\n    switch (action.type) {\r\n      case WS_CONNECT:\r\n        if (socket !== null) {\r\n          socket.close()\r\n        }\r\n\r\n        socket = new WebSocket(action.payload)\r\n        socket.onmessage = onMessage(store)\r\n        socket.onclose = onClose(store)\r\n        socket.onopen = onOpen(store)\r\n        break\r\n      case WS_DISCONNECT:\r\n        if (socket !== null) {\r\n          socket.close()\r\n        }\r\n\r\n        socket = null\r\n        break\r\n      default:\r\n        return next(action)\r\n    }\r\n  }\r\n}\r\n\r\nexport default webSocketMiddleware()\r\n","import React from 'react'\r\n\r\nimport './ModalWindow.sass'\r\n\r\nfunction asModalWindow(Component) {\r\n  return function(props) {\r\n    return (\r\n      <div className=\"modalWindow\">\r\n        <div>\r\n          <Component {...props} />\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport { asModalWindow }\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport './InputField.sass'\r\n\r\nfunction InputField(props) {\r\n  const { caption, name, placeholder, type, value, onChange } = props\r\n\r\n  return (\r\n    <div className=\"inputField\">\r\n      <label>{caption}</label>\r\n      <input\r\n        name={name}\r\n        placeholder={placeholder}\r\n        type={type}\r\n        value={value}\r\n        onChange={onChange}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nInputField.propTypes = {\r\n  caption: PropTypes.string,\r\n  name: PropTypes.string,\r\n  placeholder: PropTypes.string,\r\n  type: PropTypes.string,\r\n  value: PropTypes.string,\r\n  onChange: PropTypes.func,\r\n}\r\n\r\nexport { InputField }\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport { InputField } from '../InputField/InputField'\r\n\r\nimport './AuthenticationAndRegistrationForm.sass'\r\nimport '../SubmitButton/SubmitButton.sass'\r\nimport './__Label/AuthenticationAndRegistrationForm-Label.sass'\r\n\r\nclass AuthenticationAndRegistrationForm extends React.Component {\r\n  state = {\r\n    email: '',\r\n    name: '',\r\n    password: '',\r\n    isRegistrationMode: false,\r\n  }\r\n\r\n  onSubmit = eventArg => {\r\n    eventArg.preventDefault()\r\n\r\n    const { email, name, password, isRegistrationMode } = this.state\r\n    const { onAuthenticationSubmit, onRegistrationSubmit } = this.props\r\n\r\n    const user = {\r\n      email,\r\n      name,\r\n      password,\r\n    }\r\n\r\n    if (isRegistrationMode) {\r\n      onRegistrationSubmit(user)\r\n    } else {\r\n      onAuthenticationSubmit(email, password)\r\n    }\r\n\r\n    this.setState({\r\n      email: '',\r\n      name: '',\r\n      password: '',\r\n    })\r\n  }\r\n\r\n  updateUserEmailValue = eventArg => {\r\n    this.setState({\r\n      email: eventArg.target.value,\r\n    })\r\n  }\r\n\r\n  updateUserNameValue = eventArg => {\r\n    this.setState({\r\n      name: eventArg.target.value,\r\n    })\r\n  }\r\n\r\n  updateUserPasswordValue = eventArg => {\r\n    this.setState({\r\n      password: eventArg.target.value,\r\n    })\r\n  }\r\n\r\n  changeMode = ({ target: { checked } }) => {\r\n    this.setState({\r\n      isRegistrationMode: checked,\r\n    })\r\n  }\r\n\r\n  renderHeader = () => {\r\n    let headerText\r\n\r\n    if (this.state.isRegistrationMode) {\r\n      headerText = 'New user registration'\r\n    } else {\r\n      headerText = 'Login'\r\n    }\r\n\r\n    return (\r\n      <h3 className=\"authenticationAndRegistrationForm__Header\">\r\n        {headerText}\r\n      </h3>\r\n    )\r\n  }\r\n\r\n  renderLabel = () => {\r\n    return (\r\n      <div className=\"authenticationAndRegistrationForm-Label\" align=\"center\">\r\n        <img src={require(\"../../resources/Whisper.png\")}></img>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  renderUserNameInputField = () => {\r\n    if (this.state.isRegistrationMode) {\r\n      return (\r\n        <InputField\r\n          caption=\"User name\"\r\n          name=\"userName\"\r\n          placeholder=\"User name\"\r\n          type=\"text\"\r\n          value={this.state.name}\r\n          onChange={this.updateUserNameValue}\r\n        />\r\n      )\r\n    }\r\n  }\r\n\r\n  renderSubmitButton = () => {\r\n    let buttonText\r\n\r\n    if (this.state.isRegistrationMode) {\r\n      buttonText = 'Sign up'\r\n    } else {\r\n      buttonText = 'Sign in'\r\n    }\r\n\r\n    return (\r\n      <button className=\"submitButton\" type=\"submit\">\r\n        {buttonText}\r\n      </button>\r\n    )\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"authenticationAndRegistrationForm\">\r\n        <input type=\"checkbox\" name=\"changeMode\" onClick={this.changeMode} />\r\n        <span>Registration</span>\r\n        <form onSubmit={this.onSubmit}>\r\n          {this.renderLabel()}\r\n          <div align=\"center\">{this.renderHeader()}</div>\r\n          {this.renderUserNameInputField()}\r\n          <InputField\r\n            caption=\"User email\"\r\n            name=\"userEmail\"\r\n            placeholder=\"User email\"\r\n            type=\"text\"\r\n            value={this.state.email}\r\n            onChange={this.updateUserEmailValue}\r\n          />\r\n          <InputField\r\n            caption=\"User password\"\r\n            name=\"userPassword\"\r\n            placeholder=\"User password\"\r\n            type=\"text\"\r\n            value={this.state.password}\r\n            onChange={this.updateUserPasswordValue}\r\n          />\r\n          <div align=\"center\">{this.renderSubmitButton()}</div>\r\n        </form>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nAuthenticationAndRegistrationForm.propTypes = {\r\n  onAuthenticationSubmit: PropTypes.func.isRequired,\r\n  onRegistrationSubmit: PropTypes.func.isRequired,\r\n}\r\n\r\nexport { AuthenticationAndRegistrationForm }\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { withRouter } from 'react-router-dom'\r\n\r\nimport { AuthenticationAndRegistrationForm } from '../../components/AuthenticationAndRegistrationForm/AuthenticationAndRegistrationForm'\r\n\r\nimport { connect } from 'react-redux'\r\n\r\nimport {\r\n  submitUserEmailAndPassword,\r\n  submitNewUser,\r\n  resetAuthenticationResult,\r\n} from '../../actions/chatSettingsActions'\r\n\r\nimport './AuthenticationAndRegistrationWindow.sass'\r\n\r\nclass AuthenticationAndRegistrationWindow extends React.Component {\r\n  componentDidUpdate = () => {\r\n    const { isUserAuthenticated, history } = this.props\r\n\r\n    if (isUserAuthenticated) {\r\n      history.push('/chat')\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { submitUserEmailAndPassword, submitNewUser } = this.props\r\n\r\n    return (\r\n      <div className=\"authenticationAndRegistrationWindow\">\r\n        <AuthenticationAndRegistrationForm\r\n          onAuthenticationSubmit={submitUserEmailAndPassword}\r\n          onRegistrationSubmit={submitNewUser}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nAuthenticationAndRegistrationWindow.propTypes = {\r\n  onSignOut: PropTypes.func.isRequired,\r\n  submitUserEmailAndPassword: PropTypes.func,\r\n  submitNewUser: PropTypes.func,\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    isUserAuthenticated: state.isUserAuthenticated,\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    submitUserEmailAndPassword: (userEmail, userPassword) =>\r\n      dispatch(submitUserEmailAndPassword(userEmail, userPassword)),\r\n    submitNewUser: user => dispatch(submitNewUser(user)),\r\n    onSignOut: () => dispatch(resetAuthenticationResult()),\r\n  }\r\n}\r\n\r\nconst AuthenticationAndRegistrationWindowWithRouter = withRouter(\r\n  AuthenticationAndRegistrationWindow\r\n)\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(AuthenticationAndRegistrationWindowWithRouter)\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { connect } from 'react-redux'\r\n\r\nimport { resetAuthenticationResult } from '../../actions/chatSettingsActions'\r\n\r\nimport './SettingsPanel.sass'\r\n\r\nclass SettingsPanel extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"settingsPanel\">\r\n        <span>{this.props.currentUser.name}</span>\r\n        <button onClick={this.props.onSignOut}>Sign out</button>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nSettingsPanel.propTypes = {\r\n  onSignOut: PropTypes.func.isRequired,\r\n  currentUserName: PropTypes.exact({\r\n    _id: PropTypes.number.isRequired,\r\n    name: PropTypes.string.isRequired,\r\n    email: PropTypes.string.isRequired,\r\n  }),\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    currentUser: state.currentUser,\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onSignOut: () => dispatch(resetAuthenticationResult()),\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SettingsPanel)\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport './UserFrame.sass'\r\n\r\nclass UserFrame extends React.Component {\r\n  onUserClick = () => {\r\n    const { user } = this.props\r\n\r\n    this.props.onUserClick(user)\r\n  }\r\n\r\n  render() {\r\n    const { user } = this.props\r\n\r\n    return (\r\n      <div className=\"userFrame\" onClick={this.onUserClick}>\r\n        <span>{user.name}</span>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nUserFrame.propTypes = {\r\n  chat: PropTypes.exact({\r\n    _id: PropTypes.string.isRequired,\r\n    name: PropTypes.string.isRequired,\r\n    email: PropTypes.string.isRequired,\r\n  }),\r\n  onSelectUser: PropTypes.func,\r\n}\r\n\r\nexport { UserFrame }\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport { InputField } from '../../InputField/InputField'\r\n\r\nimport '../../SubmitButton/SubmitButton.sass'\r\n\r\nclass SeekForm extends React.Component {\r\n  state = {\r\n    userSeekData: '',\r\n  }\r\n\r\n  onSubmit = eventArg => {\r\n    eventArg.preventDefault()\r\n\r\n    this.props.onSubmitUserSeekData(this.state.userSeekData)\r\n\r\n    this.setState({\r\n      searchQueryString: '',\r\n    })\r\n  }\r\n\r\n  updateSearchQueryString = eventArg => {\r\n    this.setState({\r\n      userSeekData: eventArg.target.value,\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.onSubmit}>\r\n        <InputField\r\n          caption=\"User email\"\r\n          name=\"userEmail\"\r\n          placeholder=\"User email\"\r\n          type=\"text\"\r\n          value={this.state.userSeekData}\r\n          onChange={this.updateSearchQueryString}\r\n        />\r\n        <div align=\"center\">\r\n          <button className=\"submitButton\" type=\"submit\">\r\n            Find users\r\n          </button>\r\n        </div>\r\n      </form>\r\n    )\r\n  }\r\n}\r\n\r\nSeekForm.propTypes = {\r\n  onSubmitUserSeekData: PropTypes.func.isRequired,\r\n}\r\n\r\nexport { SeekForm }\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport { UserFrame } from '../UserFrame/UserFrame'\r\nimport { SeekForm } from './__SeekForm/AddToChatNewUserWindow-SeekForm'\r\n\r\nimport './AddToChatNewUserWindow.sass'\r\nimport '../CloseButton/CloseButton.sass'\r\nimport './__UsersList/AddToChatNewUserWindow-UsersList.sass'\r\n\r\nclass AddToChatNewUserWindow extends React.Component {\r\n  onSubmitUserSeekData = userSeekData => {\r\n    this.props.findUsers(userSeekData)\r\n  }\r\n\r\n  renderUsersList = () => {\r\n    const { usersList, onUserClick } = this.props\r\n\r\n    if (usersList && usersList.length) {\r\n      return usersList.map(function(item) {\r\n        return (\r\n          <UserFrame onUserClick={onUserClick} key={item._id} user={item} />\r\n        )\r\n      })\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"addToChatNewUserWindow\">\r\n        <h4>Search for a new member</h4>\r\n        <button className=\"closeButton\" onClick={this.props.onCancelClick}>\r\n          X\r\n        </button>\r\n        <SeekForm onSubmitUserSeekData={this.onSubmitUserSeekData} />\r\n        <div className=\"addToChatNewUserWindow-UsersList\">\r\n          {this.renderUsersList()}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nAddToChatNewUserWindow.propTypes = {\r\n  usersList: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      user: PropTypes.exact({\r\n        _id: PropTypes.number.isRequired,\r\n        name: PropTypes.string.isRequired,\r\n        email: PropTypes.string.isRequired,\r\n      }),\r\n    })\r\n  ),\r\n  findUsers: PropTypes.func.isRequired,\r\n  onUserClick: PropTypes.func.isRequired,\r\n}\r\n\r\nexport { AddToChatNewUserWindow }\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport './FileInput.sass'\r\n\r\nclass FileInput extends React.Component {\r\n  state = {\r\n    file: null,\r\n    filePath: '',\r\n  }\r\n\r\n  updateFile = eventArg => {\r\n    this.setState({\r\n      file: eventArg.target.files[0],\r\n      filePath: eventArg.target.value,\r\n    })\r\n\r\n    this.props.updateFile(eventArg)\r\n  }\r\n\r\n  renderFileName = () => {\r\n    const { file } = this.state\r\n    let fileName = ''\r\n\r\n    if (file) fileName = file.name\r\n\r\n    return <span>{fileName}</span>\r\n  }\r\n\r\n  render() {\r\n    const { name } = this.props\r\n\r\n    return (\r\n      <div className=\"fileInput\">\r\n        <div>\r\n          <span>{this.renderFileName()}</span>\r\n        </div>\r\n        <div>\r\n          <label>\r\n            <input\r\n              name={name}\r\n              type=\"file\"\r\n              value={this.state.filePath}\r\n              onChange={this.updateFile}\r\n            />\r\n            <span>Open file</span>\r\n          </label>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nFileInput.propTypes = {\r\n  name: PropTypes.string,\r\n  updateFile: PropTypes.func.isRequired,\r\n}\r\n\r\nexport { FileInput }\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport { FileInput } from '../../FileInput/FileInput'\r\n\r\nimport './SpecialMessagesPreprocessorMenu-AddFileForm.sass'\r\nimport '../../SubmitButton/SubmitButton.sass'\r\n\r\nclass AddFileForm extends React.Component {\r\n  state = {\r\n    file: null,\r\n  }\r\n\r\n  onSubmit = event => {\r\n    const { file } = this.state\r\n    const { onSubmitFile } = this.props\r\n\r\n    event.preventDefault()\r\n\r\n    if (file) {\r\n      onSubmitFile(file)\r\n    }\r\n  }\r\n\r\n  updateMessagesPreprocessorFile = eventArg => {\r\n    this.setState({\r\n      file: eventArg.target.files[0],\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <form className=\"addFileForm\" onSubmit={this.onSubmit}>\r\n        <FileInput\r\n          name=\"messagesPreprocessorFile\"\r\n          updateFile={this.updateMessagesPreprocessorFile}\r\n        />\r\n        <div>\r\n          <button className=\"submitButton\" type=\"submit\">\r\n            Add\r\n          </button>\r\n        </div>\r\n      </form>\r\n    )\r\n  }\r\n}\r\n\r\nAddFileForm.propTypes = {\r\n  onSubmitFile: PropTypes.func.isRequired,\r\n}\r\n\r\nexport { AddFileForm }\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport { AddFileForm } from './__AddFileForm/SpecialMessagesPreprocessorMenu-AddFileForm'\r\n\r\nimport './SpecialMessagesPreprocessorMenu.sass'\r\n\r\nclass SpecialMessagesPreprocessorMenu extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"specialMessagesPreprocessorMenu\">\r\n        <h4>Add special messages preprocessor</h4>\r\n        <button className=\"closeButton\" onClick={this.props.onCancelClick}>\r\n          X\r\n        </button>\r\n        <AddFileForm onSubmitFile={this.props.onSubmit} />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nSpecialMessagesPreprocessorMenu.propTypes = {\r\n  onSubmit: PropTypes.func.isRequired,\r\n  onCancelClick: PropTypes.func.isRequired,\r\n}\r\n\r\nexport { SpecialMessagesPreprocessorMenu }\r\n","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport { asModalWindow } from '../../components/ModalWindow/asModalWindow'\r\nimport { AddToChatNewUserWindow } from '../../components/AddToChatNewUserWindow/AddToChatNewUserWindow'\r\nimport { SpecialMessagesPreprocessorMenu } from '../../components/SpecialMessagesPreprocessorMenu/SpecialMessagesPreprocessorMenu'\r\nimport {\r\n  findUsers,\r\n  addNewUserToCurrentChat,\r\n  addNewSpecialMessagesPreprocessor,\r\n} from '../../actions/chatSettingsActions'\r\n\r\nimport './CurrentChatSettings.sass'\r\n\r\nconst AddToChatNewUserModalWindow = asModalWindow(AddToChatNewUserWindow)\r\nconst SpecialMessagesPreprocessorModalWindow = asModalWindow(\r\n  SpecialMessagesPreprocessorMenu\r\n)\r\n\r\nclass CurrentChatSettings extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.state = {\r\n      showAddedUserMenu: false,\r\n      showSpecialMessagesPreprocessorMenu: false,\r\n    }\r\n  }\r\n\r\n  onAddUserButtonClick = () => {\r\n    this.setState({\r\n      showAddedUserMenu: true,\r\n    })\r\n  }\r\n\r\n  onAddSpecialMessagesPreprocessorButtonClick = () => {\r\n    this.setState({\r\n      showSpecialMessagesPreprocessorMenu: true,\r\n    })\r\n  }\r\n\r\n  addNewUserToCurrentChat = user => {\r\n    this.cancelUserAdding()\r\n    this.props.addNewUserToCurrentChat(user)\r\n  }\r\n\r\n  cancelUserAdding = () => {\r\n    this.setState({\r\n      showAddedUserMenu: false,\r\n    })\r\n  }\r\n\r\n  addNewSpecialMessagesPreprocessor = preprocessorFunctionString => {\r\n    this.cancelSpecialMessagesPreprocessorAdding()\r\n    this.props.addNewSpecialMessagesPreprocessor(preprocessorFunctionString)\r\n  }\r\n\r\n  cancelSpecialMessagesPreprocessorAdding = () => {\r\n    this.setState({\r\n      showSpecialMessagesPreprocessorMenu: false,\r\n    })\r\n  }\r\n\r\n  renderAddedUserWindow = () => {\r\n    const {\r\n      showAddedUserMenu,\r\n      showSpecialMessagesPreprocessorMenu,\r\n    } = this.state\r\n    const { currentChat, findUsers, usersList } = this.props\r\n\r\n    if (showAddedUserMenu) {\r\n      return (\r\n        <AddToChatNewUserModalWindow\r\n          findUsers={findUsers}\r\n          usersList={usersList}\r\n          onUserClick={this.addNewUserToCurrentChat}\r\n          onCancelClick={this.cancelUserAdding}\r\n        />\r\n      )\r\n    }\r\n\r\n    if (showSpecialMessagesPreprocessorMenu) {\r\n      return (\r\n        <SpecialMessagesPreprocessorModalWindow\r\n          currentChat={currentChat}\r\n          onSubmit={this.addNewSpecialMessagesPreprocessor}\r\n          onCancelClick={this.cancelSpecialMessagesPreprocessorAdding}\r\n        />\r\n      )\r\n    }\r\n\r\n    if (currentChat._id) {\r\n      return (\r\n        <React.Fragment>\r\n          <button onClick={this.onAddUserButtonClick}>\r\n            Add new user to chat\r\n          </button>\r\n          <button onClick={this.onAddSpecialMessagesPreprocessorButtonClick}>\r\n            Add special messages preprocessor\r\n          </button>\r\n        </React.Fragment>\r\n      )\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"currentChatSettings\">{this.renderAddedUserWindow()}</div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    currentChat: state.currentChat,\r\n    usersList: state.usersList,\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    findUsers: userSeekData => dispatch(findUsers(userSeekData)),\r\n    addNewUserToCurrentChat: user => dispatch(addNewUserToCurrentChat(user)),\r\n    addNewSpecialMessagesPreprocessor: file =>\r\n      dispatch(addNewSpecialMessagesPreprocessor(file)),\r\n  }\r\n}\r\n\r\nCurrentChatSettings.propTypes = {\r\n  usersList: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      user: PropTypes.exact({\r\n        _id: PropTypes.number.isRequired,\r\n        name: PropTypes.string.isRequired,\r\n        email: PropTypes.string.isRequired,\r\n      }),\r\n    })\r\n  ),\r\n  currentChat: PropTypes.exact({\r\n    _id: PropTypes.string,\r\n    name: PropTypes.string,\r\n    users: PropTypes.arrayOf(\r\n      PropTypes.shape({\r\n        _id: PropTypes.string.isRequired,\r\n        name: PropTypes.string.isRequired,\r\n        email: PropTypes.string.isRequired,\r\n      })\r\n    ),\r\n    forwardPreprocessorFunction: PropTypes.func,\r\n    backwardPreprocessorFunction: PropTypes.func,\r\n  }),\r\n  findUsers: PropTypes.func.isRequired,\r\n  addNewUserToCurrentChat: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CurrentChatSettings)\r\n","import React from 'react'\r\n\r\nimport SettingsPanel from '../../SettingsPanel/SettingsPanel'\r\nimport CurrentChatSettings from '../../CurrentChatSettings/CurrentChatSettings'\r\n\r\nimport './AppPanel-TopPanel.sass'\r\n\r\nfunction TopPanel() {\r\n  return (\r\n    <div className=\"topPanel\">\r\n      <CurrentChatSettings />\r\n      <SettingsPanel />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport { TopPanel }\r\n","export function addLeadZero(number) {\r\n  if (number < 10) return '0' + number\r\n  return number\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { addLeadZero } from '../../helper'\r\n\r\nimport './MessageFrame-MessageTimestamp.sass'\r\n\r\nfunction MessageTimestamp(props) {\r\n  const date = new Date(+props.time)\r\n  let hours = addLeadZero(date.getHours())\r\n  let minutes = addLeadZero(date.getMinutes())\r\n  let day = addLeadZero(date.getDate())\r\n  let month = addLeadZero(date.getMonth() + 1)\r\n  let year = date.getFullYear()\r\n\r\n  return (\r\n    <div className=\"messageFrame-MessageTimestamp\">\r\n      <span>\r\n        {hours}:{minutes} {day}.{month}.{year}\r\n      </span>\r\n    </div>\r\n  )\r\n}\r\n\r\nMessageTimestamp.propTypes = {\r\n  time: PropTypes.oneOfType([\r\n    PropTypes.number,\r\n    PropTypes.string,\r\n    PropTypes.instanceOf(Date),\r\n  ]).isRequired,\r\n}\r\n\r\nexport { MessageTimestamp }\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport './MessageFrame-AuthorNameLabel.sass'\r\n\r\nfunction AuthorNameLabel(props) {\r\n  return (\r\n    <span className=\"messageFrame-AuthorNameLabel\">{props.authorName}</span>\r\n  )\r\n}\r\n\r\nAuthorNameLabel.propTypes = {\r\n  authorName: PropTypes.string,\r\n}\r\n\r\nexport { AuthorNameLabel }\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nfunction MessageTextField(props) {\r\n  return <span>{props.text}</span>\r\n}\r\n\r\nMessageTextField.propTypes = {\r\n  text: PropTypes.string,\r\n}\r\n\r\nexport { MessageTextField }\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { MessageTimestamp } from './__MessageTimestamp/MessageFrame-MessageTimestamp'\r\nimport { AuthorNameLabel } from './__AuthorNameLabel/MessageFrame-AuthorNameLabel'\r\nimport { MessageTextField } from './__MessageTextField/MessageFrame-MessageTextField'\r\nimport { statusRenderingDelay } from '../../applicationSettings'\r\n\r\nimport './MessageFrame.sass'\r\nimport './_user/MessageFrame_user_another.sass'\r\nimport './_user/MessageFrame_user_current.sass'\r\nimport '../RotatingImage/_RotatingImage.sass'\r\n\r\nimport waitingIcon from '../../resources/BlueWaitingIcon.png'\r\n\r\nclass MessageFrame extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.state = { isStatusRenderingEnabled: false }\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    const { hasServerReceivedMessage } = this.props\r\n\r\n    if (hasServerReceivedMessage){\r\n      return\r\n    }\r\n\r\n    this.statusRenderingDelayId = setTimeout(() => this.enableStatusRendering(), statusRenderingDelay)\r\n  }\r\n\r\n  enableStatusRendering = () => {\r\n    this.setState({ isStatusRenderingEnabled: true })\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.statusRenderingDelayId)\r\n  }\r\n\r\n  renderAuthorName = () => {\r\n    const { message, currentUserEmail } = this.props\r\n\r\n    if (currentUserEmail === message.authorEmail) {\r\n      return\r\n    } else {\r\n      return <AuthorNameLabel authorName={message.authorName} />\r\n    }\r\n  }\r\n\r\n  renderMessageStatus() {\r\n    const { hasServerReceivedMessage } = this.props\r\n\r\n    if (!hasServerReceivedMessage && this.state.isStatusRenderingEnabled) {\r\n      return (\r\n        <div className=\"messageStatus\">\r\n          <img className=\"RotatingImage\" src={waitingIcon}></img>\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { message, currentUserEmail } = this.props\r\n    let messageFrameClass = 'messageFrame'\r\n\r\n    if (currentUserEmail === message.authorEmail) {\r\n      messageFrameClass += ' messageFrame_user_current'\r\n    } else {\r\n      messageFrameClass += ' messageFrame_user_another'\r\n    }\r\n\r\n    return (\r\n      <div className={messageFrameClass}>\r\n        <div>\r\n          {this.renderMessageStatus()}\r\n        </div>\r\n        <div>\r\n          <div>{this.renderAuthorName()}</div>\r\n          <div>\r\n            <MessageTextField text={message.text} />\r\n          </div>\r\n          <div>\r\n            <MessageTimestamp time={message.time} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nMessageFrame.propTypes = {\r\n  message: PropTypes.exact({\r\n    _id: PropTypes.string,\r\n    clientSideId: PropTypes.string,\r\n    chatId: PropTypes.string.isRequired,\r\n    authorName: PropTypes.string.isRequired,\r\n    authorEmail: PropTypes.string.isRequired,\r\n    time: PropTypes.oneOfType([\r\n      PropTypes.number,\r\n      PropTypes.string,\r\n      PropTypes.instanceOf(Date),\r\n    ]).isRequired,\r\n    text: PropTypes.string.isRequired,\r\n    wasMessageReceived: PropTypes.bool,\r\n  }),\r\n  currentUserEmail: PropTypes.string,\r\n  hasServerReceivedMessage: PropTypes.bool,\r\n}\r\n\r\nexport { MessageFrame }\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport './MessageList-ScrollDownButton.sass'\r\n\r\nfunction ScrollDownButton(props) {\r\n  const strToDecode = '&#11015'\r\n  const parser = new DOMParser()\r\n  const decodedString = parser.parseFromString(\r\n    `<!doctype html><body>${strToDecode}`,\r\n    'text/html'\r\n  ).body.textContent\r\n\r\n  return (\r\n    <div className=\"scrollDownButton\" onClick={props.onScrollDownClick}>\r\n      {decodedString}\r\n    </div>\r\n  )\r\n}\r\n\r\nScrollDownButton.propTypes = {\r\n  text: PropTypes.string,\r\n}\r\n\r\nexport { ScrollDownButton }\r\n","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport PropTypes from 'prop-types'\r\nimport {\r\n  fetchMessagesList,\r\n  fetchNewMessages,\r\n  subscribeForNewMessages,\r\n  unsubscribeForNewMessages,\r\n} from '../../actions/messageListActions'\r\n\r\nimport { MessageFrame } from '../../components/MessageFrame/MessageFrame'\r\nimport { ScrollDownButton } from './__ScrollDownButton/MessageList-ScrollDownButton'\r\n\r\nimport './MessageList.sass'\r\nimport './__Item/MessageList-Item.sass'\r\nimport './__ChatNameCaption/MessageList-ChatNameCaption.sass'\r\n\r\nclass MessageList extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.messageListRef = React.createRef()\r\n\r\n    this.state = {\r\n      enableScrollDown: true,\r\n      previousMessagesLength: 0,\r\n      suspendMessagesFetching: false,\r\n      currentChat: null,\r\n      needScrollDown: true,\r\n      showScrollDownButton: false,\r\n    }\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    const { currentChat, subscribeForNewMessages } = this.props\r\n    if (this.state.currentChat !== currentChat) {\r\n      this.setState({ currentChat })\r\n      subscribeForNewMessages(this.props.currentChat._id)\r\n    }\r\n    this.fetchMessages()\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.props.unsubscribeForNewMessages()\r\n  }\r\n\r\n  componentDidUpdate = () => {\r\n    const { messages, currentChat, subscribeForNewMessages } = this.props\r\n    const scrollDownShift = 30\r\n    const { current } = this.messageListRef\r\n\r\n    if (this.state.currentChat !== currentChat) {\r\n      this.reloadMessagesList()\r\n      subscribeForNewMessages(this.props.currentChat._id)\r\n      return\r\n    }\r\n\r\n    if (!messages) return\r\n\r\n    const messagesLength = messages.length\r\n    const previousMessagesLength = this.state.previousMessagesLength\r\n\r\n    if (messagesLength <= previousMessagesLength) {\r\n      return\r\n    }\r\n\r\n    this.setState({\r\n      previousMessagesLength: messagesLength,\r\n      suspendMessagesFetching: false,\r\n    })\r\n\r\n    if (current) {\r\n      current.scrollTop += scrollDownShift\r\n    }\r\n\r\n    this.scrollDownIfNeed()\r\n  }\r\n\r\n  reloadMessagesList = () => {\r\n    this.setState({\r\n      currentChat: this.props.currentChat,\r\n      previousMessagesLength: 0,\r\n      suspendMessagesFetching: true,\r\n      needScrollDown: true,\r\n    })\r\n\r\n    this.fetchMessagesForced()\r\n  }\r\n\r\n  fetchMessages = () => {\r\n    if (this.state.suspendMessagesFetching) return\r\n\r\n    this.fetchMessagesForced()\r\n  }\r\n\r\n  fetchMessagesForced = () => {\r\n    const currentChat = this.props.currentChat\r\n    const messages = this.props.messages\r\n\r\n    if (!currentChat || !currentChat._id) return\r\n    if (!messages) return\r\n\r\n    const time = new Date().getTime()\r\n\r\n    const oldestMessageTime = messages.length ? messages[0].time : time\r\n\r\n    this.props.fetchMessagesList(currentChat._id, oldestMessageTime)\r\n  }\r\n\r\n  fetchNewMessages = () => {\r\n    const currentChat = this.props.currentChat\r\n    const messages = this.props.messages\r\n\r\n    if (!currentChat || !currentChat._id) return\r\n    if (!messages) return\r\n\r\n    const lastMessageIndex = messages.length - 1\r\n\r\n    if (lastMessageIndex < 0) {\r\n      this.fetchMessages()\r\n      return\r\n    }\r\n\r\n    this.props.fetchNewMessages(\r\n      currentChat._id,\r\n      messages[lastMessageIndex].time\r\n    )\r\n  }\r\n\r\n  scrollDownIfNeed = () => {\r\n    if (this.state.needScrollDown) {\r\n      this.setState({\r\n        needScrollDown: false,\r\n      })\r\n\r\n      this.scrollDown()\r\n    }\r\n  }\r\n\r\n  tryLoadMessagesUntilScrollAppears() {\r\n    const { current } = this.messageListRef\r\n\r\n    if (current.offsetWidth <= current.clientWidth) {\r\n      this.fetchMessages()\r\n    }\r\n  }\r\n\r\n  scrollDown = () => {\r\n    const { current } = this.messageListRef\r\n\r\n    this.setState({\r\n      needScrollDown: false,\r\n    })\r\n\r\n    if (current) {\r\n      current.scrollTop = current.scrollHeight\r\n    }\r\n  }\r\n\r\n  onScrollDownClick = () => {\r\n    this.scrollDown()\r\n  }\r\n\r\n  onScroll = () => {\r\n    const minScrollTop = 200\r\n    const scrollDownButtonThreshold = 200\r\n    const {\r\n      scrollHeight,\r\n      scrollTop,\r\n      clientHeight,\r\n    } = this.messageListRef.current\r\n\r\n    this.setState({\r\n      showScrollDownButton:\r\n        scrollHeight - scrollTop >= clientHeight + scrollDownButtonThreshold,\r\n      needScrollDown: scrollHeight - scrollTop === clientHeight,\r\n    })\r\n\r\n    if (this.state.suspendMessagesFetching) return\r\n\r\n    if (scrollTop < minScrollTop) {\r\n      this.setState({\r\n        suspendMessagesFetching: true,\r\n      })\r\n\r\n      this.fetchMessages()\r\n    }\r\n  }\r\n\r\n  renderMessageList = (messages, hasServerReceivedMessage) => {\r\n    const { currentUser } = this.props\r\n    const messagesLength = messages.length\r\n\r\n    if (messages && messagesLength) {\r\n      return messages.map(function(item, index) {\r\n        return (\r\n          <div className=\"item\" key={index}>\r\n            <MessageFrame hasServerReceivedMessage={hasServerReceivedMessage} message={item} currentUserEmail={currentUser.email} />\r\n          </div>\r\n        )\r\n      })\r\n    }\r\n  }\r\n\r\n  renderScrollDownButton = () => {\r\n    if (this.state.showScrollDownButton) {\r\n      return <ScrollDownButton onScrollDownClick={this.onScrollDownClick} />\r\n    }\r\n  }\r\n\r\n  renderChatNameCaption = () => {\r\n    const chatName = this.props.currentChat.name\r\n    if (chatName) {\r\n      return (\r\n        <div className=\"chatNameCaption\">\r\n          <div>\r\n            <span>{chatName}</span>\r\n          </div>\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const strToDecode = '&#11015'\r\n    const parser = new DOMParser()\r\n    const decodedString = parser.parseFromString(\r\n      `<!doctype html><body>${strToDecode}`,\r\n      'text/html'\r\n    ).body.textContent\r\n\r\n    const { messages, waitingMessages } = this.props\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <div\r\n          ref={this.messageListRef}\r\n          className=\"messageList\"\r\n          onScroll={this.onScroll}\r\n        >\r\n          {this.renderMessageList(messages, true)}\r\n          {this.renderMessageList(waitingMessages, false)}\r\n        </div>\r\n        {this.renderScrollDownButton()}\r\n        {this.renderChatNameCaption()}\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    messages: state.messages,\r\n    waitingMessages: state.messagesWaitingList,\r\n    currentChat: state.currentChat,\r\n    currentUser: state.currentUser,\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    fetchMessagesList: (chatId, oldestMessageTime) =>\r\n      dispatch(fetchMessagesList(chatId, oldestMessageTime)),\r\n    fetchNewMessages: (chatId, newestMessageTime) =>\r\n      dispatch(fetchNewMessages(chatId, newestMessageTime)),\r\n    subscribeForNewMessages: chatId =>\r\n      dispatch(subscribeForNewMessages(chatId)),\r\n    unsubscribeForNewMessages: () => dispatch(unsubscribeForNewMessages()),\r\n  }\r\n}\r\n\r\nMessageList.propTypes = {\r\n  messages: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      message: PropTypes.exact({\r\n        chatId: PropTypes.number.isRequired,\r\n        authorName: PropTypes.string.isRequired,\r\n        authorEmail: PropTypes.string.isRequired,\r\n        time: PropTypes.oneOfType([\r\n          PropTypes.number,\r\n          PropTypes.string,\r\n          PropTypes.instanceOf(Date),\r\n        ]).isRequired,\r\n        text: PropTypes.string.isRequired,\r\n        wasMessageReceived: PropTypes.bool,\r\n      }),\r\n    })\r\n  ),\r\n}\r\n\r\nexport { MessageList }\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MessageList)\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport './SimpleDataForm.sass'\r\n\r\nclass SimpleDataForm extends React.Component {\r\n  state = {\r\n    newData: '',\r\n  }\r\n\r\n  onSubmit = event => {\r\n    event.preventDefault()\r\n    \r\n    if(this.state.newData.trim() == ''){\r\n      return\r\n    }\r\n\r\n    this.props.onSubmitNewData(this.state.newData)\r\n\r\n    this.setState({\r\n      newData: '',\r\n    })\r\n  }\r\n\r\n  updateInputValue = eventArg => {\r\n    this.setState({\r\n      newData: eventArg.target.value,\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const { caption, name, placeholder, type, buttonCaption } = this.props\r\n\r\n    return (\r\n      <form className=\"simpleDataForm\" onSubmit={this.onSubmit}>\r\n        <h4>{caption}</h4>\r\n        <div>\r\n          <input\r\n            name={name}\r\n            placeholder={placeholder}\r\n            type={type}\r\n            value={this.state.newData}\r\n            onChange={this.updateInputValue}\r\n          />\r\n          <button type=\"submit\">{buttonCaption}</button>\r\n        </div>\r\n      </form>\r\n    )\r\n  }\r\n}\r\n\r\nSimpleDataForm.propTypes = {\r\n  onSubmitNewData: PropTypes.func.isRequired,\r\n  caption: PropTypes.string,\r\n  name: PropTypes.string.isRequired,\r\n  placeholder: PropTypes.string,\r\n  type: PropTypes.string.isRequired,\r\n  buttonCaption: PropTypes.string,\r\n}\r\n\r\nexport { SimpleDataForm }\r\n","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { encryptAndSendNewMessage } from '../../actions/messageListActions'\r\n\r\nimport MessageList from '../MessageList/MessageList'\r\nimport { SimpleDataForm } from '../../components/SimpleDataForm/SimpleDataForm'\r\n\r\nimport './CurrentChatPanel.sass'\r\n\r\nclass CurrentChatPanel extends React.Component {\r\n  renderMessageList() {\r\n    if (!this.props.currentUser._id) return\r\n    if (!this.props.currentChat._id) return\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <MessageList />\r\n        <SimpleDataForm\r\n          onSubmitNewData={this.props.sendNewMessage}\r\n          caption=\"+Message\"\r\n          name=\"userMessage\"\r\n          placeholder=\"message text\"\r\n          type=\"text\"\r\n          buttonCaption=\"Send\"\r\n        />\r\n      </React.Fragment>\r\n    )\r\n  }\r\n\r\n  render() {\r\n    return <div className=\"currentChatPanel\">{this.renderMessageList()}</div>\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    currentUser: state.currentUser,\r\n    currentChat: state.currentChat,\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    sendNewMessage: message => dispatch(encryptAndSendNewMessage(message)),\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CurrentChatPanel)\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport './ChatList-ChatFrame.sass'\r\n\r\nclass ChatFrame extends React.Component {\r\n  onSelectChat = () => {\r\n    const { chat } = this.props\r\n\r\n    this.props.onSelectChat(chat)\r\n  }\r\n\r\n  renderUsersList = users => {\r\n    if (users && users.length) {\r\n      return users.map((item, index) => {\r\n        return (\r\n          <div key={index}>\r\n            <p>{item.name}</p>\r\n          </div>\r\n        )\r\n      })\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { chat } = this.props\r\n\r\n    return (\r\n      <div className=\"chatList-ChatFrame\" onClick={this.onSelectChat}>\r\n        <div>\r\n          <h4>{chat.name}</h4>\r\n        </div>\r\n        <div>\r\n          <p>Chat members:</p>\r\n          <div>{this.renderUsersList(chat.users)}</div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nChatFrame.propTypes = {\r\n  chat: PropTypes.exact({\r\n    _id: PropTypes.string.isRequired,\r\n    name: PropTypes.string.isRequired,\r\n    users: PropTypes.arrayOf(\r\n      PropTypes.exact({\r\n        _id: PropTypes.string.isRequired,\r\n        name: PropTypes.string.isRequired,\r\n        email: PropTypes.string.isRequired,\r\n      })\r\n    ).isRequired,\r\n  }),\r\n  onSelectChat: PropTypes.func.isRequired,\r\n}\r\n\r\nexport { ChatFrame }\r\n","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport {\r\n  fetchChatsList,\r\n  tryGetPreprocessorAnd–°hangeCurrentChat,\r\n} from '../../actions/chatSettingsActions'\r\n\r\nimport { ChatFrame } from './__ChatFrame/ChatList-ChatFrame'\r\n\r\nimport './ChatList.sass'\r\n\r\nclass ChatList extends React.Component {\r\n  componentDidMount() {\r\n    let userId = this.props.currentUser._id\r\n\r\n    if (!userId) return\r\n\r\n    this.props.fetchChatsList(userId)\r\n  }\r\n\r\n  renderChatList = () => {\r\n    const { chatsList, changeCurrentChat } = this.props\r\n\r\n    if (chatsList && chatsList.length) {\r\n      return chatsList.map(function(item) {\r\n        return (\r\n          <ChatFrame\r\n            onSelectChat={changeCurrentChat}\r\n            key={item._id}\r\n            chat={item}\r\n          />\r\n        )\r\n      })\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return <div className=\"—ÅhatList\">{this.renderChatList()}</div>\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    chatsList: state.chatsList,\r\n    currentUser: state.currentUser,\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    fetchChatsList: userId => dispatch(fetchChatsList(userId)),\r\n    changeCurrentChat: chat =>\r\n      dispatch(tryGetPreprocessorAnd–°hangeCurrentChat(chat)),\r\n  }\r\n}\r\n\r\nChatList.propTypes = {\r\n  chatsList: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      chat: PropTypes.exact({\r\n        _id: PropTypes.string.isRequired,\r\n        name: PropTypes.string.isRequired,\r\n        users: PropTypes.arrayOf(\r\n          PropTypes.shape({\r\n            _id: PropTypes.string.isRequired,\r\n            name: PropTypes.string.isRequired,\r\n            email: PropTypes.string.isRequired,\r\n          })\r\n        ).isRequired,\r\n      }),\r\n    })\r\n  ),\r\n  changeCurrentChat: PropTypes.func.isRequired,\r\n}\r\n\r\nexport { ChatList }\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ChatList)\r\n","import React from 'react'\r\nimport { connect } from 'react-redux'\r\n\r\nimport ChatList from '../ChatList/ChatList'\r\nimport { SimpleDataForm } from '../../components/SimpleDataForm/SimpleDataForm'\r\n\r\nimport { createNewChat } from '../../actions/chatSettingsActions'\r\n\r\nimport './UserChatsPanel.sass'\r\n\r\nclass UserChatsPanel extends React.Component {\r\n  onSubmitNewChat = chatName => {\r\n    this.props.createNewChat(chatName, [this.props.currentUser._id])\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"userChatsPanel\">\r\n        <ChatList />\r\n        <SimpleDataForm\r\n          onSubmitNewData={this.onSubmitNewChat}\r\n          caption=\"+Chat\"\r\n          name=\"chatName\"\r\n          placeholder=\"chat name\"\r\n          type=\"text\"\r\n          buttonCaption=\"Create\"\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    currentUser: state.currentUser,\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    createNewChat: (chatName, usersIds) =>\r\n      dispatch(createNewChat(chatName, usersIds)),\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UserChatsPanel)\r\n","import React from 'react'\r\n\r\nimport CurrentChatPanel from '../../CurrentChatPanel/CurrentChatPanel'\r\nimport UserChatsPanel from '../../UserChatsPanel/UserChatsPanel'\r\n\r\nimport './AppPanel-MainPanel.sass'\r\n\r\nfunction MainPanel() {\r\n  return (\r\n    <div className=\"mainPanel\">\r\n      <UserChatsPanel />\r\n      <CurrentChatPanel />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport { MainPanel }\r\n","import React from 'react'\r\nimport { withRouter } from 'react-router-dom'\r\n\r\nimport { TopPanel } from './__TopPanel/AppPanel-TopPanel'\r\nimport { MainPanel } from './__MainPanel/AppPanel-MainPanel'\r\n\r\nimport { connect } from 'react-redux'\r\n\r\nimport './AppPanel.sass'\r\n\r\nclass AppPanel extends React.Component {\r\n  componentDidUpdate = () => {\r\n    const { isUserAuthenticated, history } = this.props\r\n\r\n    if (!isUserAuthenticated) {\r\n      history.push('/login')\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"appPanel\">\r\n        <div className=\"mainPanelPlace\">\r\n          <MainPanel />\r\n        </div>\r\n        <div className=\"topPanelPlace\">\r\n          <TopPanel />\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    isUserAuthenticated: state.isUserAuthenticated,\r\n  }\r\n}\r\n\r\nconst AppPanelWithRouter = withRouter(AppPanel)\r\nexport default connect(mapStateToProps)(AppPanelWithRouter)\r\n","import React from 'react'\r\nimport { Route, Switch, withRouter } from 'react-router-dom'\r\n\r\nimport { asModalWindow } from '../components/ModalWindow/asModalWindow'\r\nimport AuthenticationAndRegistrationWindow from './AuthenticationAndRegistrationWindow/AuthenticationAndRegistrationWindow'\r\nimport { ErrorWindow } from '../components/ErrorWindow/ErrorWindow'\r\nimport AppPanel from './AppPanel/AppPanel'\r\n\r\nimport { connect } from 'react-redux'\r\n\r\nimport {\r\n  checkIsUserAuthenticated,\r\n  submitUserEmailAndPassword,\r\n  submitNewUser,\r\n  clearLastError,\r\n  resetAuthenticationResult,\r\n} from '../actions/chatSettingsActions'\r\n\r\nconst ErrorModalWindow = asModalWindow(ErrorWindow)\r\n\r\nclass App extends React.Component {\r\n  componentDidMount() {\r\n    const { isUserAuthenticated, checkIsUserAuthenticated } = this.props\r\n\r\n    checkIsUserAuthenticated()\r\n\r\n    if (isUserAuthenticated) {\r\n      this.props.history.push('/chat')\r\n    } else {\r\n      this.props.history.push('/login')\r\n    }\r\n  }\r\n\r\n  renderErrorWindow() {\r\n    if (!this.props.lastError) return\r\n\r\n    return (\r\n      <ErrorModalWindow\r\n        onOk={this.props.clearLastError}\r\n        lastError={this.props.lastError}\r\n      />\r\n    )\r\n  }\r\n\r\n  renderMainContent() {\r\n    return (\r\n      <Switch>\r\n        <Route\r\n          exact\r\n          path=\"/login\"\r\n          render={() => <AuthenticationAndRegistrationWindow />}\r\n        />\r\n        <Route path=\"/chat\" component={AppPanel} />\r\n      </Switch>\r\n    )\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        {this.renderErrorWindow()}\r\n        {this.renderMainContent()}\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    isUserAuthenticated: state.isUserAuthenticated,\r\n    lastError: state.lastError,\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    checkIsUserAuthenticated: () => dispatch(checkIsUserAuthenticated()),\r\n    submitUserEmailAndPassword: (userEmail, userPassword) =>\r\n      dispatch(submitUserEmailAndPassword(userEmail, userPassword)),\r\n    submitNewUser: user => dispatch(submitNewUser(user)),\r\n    clearLastError: () => dispatch(clearLastError()),\r\n    onSignOut: () => dispatch(resetAuthenticationResult()),\r\n  }\r\n}\r\n\r\nconst AppWithRouter = withRouter(App)\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AppWithRouter)\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport './ErrorWindow.sass'\r\n\r\nfunction ErrorWindow(props) {\r\n  const { status, badStatusText, message } = props.lastError\r\n\r\n  let statusParagraph, badStatusTextParagraph, messageParagraph\r\n\r\n  if (status) {\r\n    statusParagraph = <p>Status: {status}</p>\r\n    badStatusTextParagraph = <p>Status text: {badStatusText}</p>\r\n    messageParagraph = <p>Message: {message}</p>\r\n  }\r\n\r\n  return (\r\n    <div className=\"errorWindow\">\r\n      <div>\r\n        <h4>Error</h4>\r\n      </div>\r\n      <div>\r\n        {statusParagraph}\r\n        {badStatusTextParagraph}\r\n        {messageParagraph}\r\n      </div>\r\n      <button onClick={props.onOk}>Ok</button>\r\n    </div>\r\n  )\r\n}\r\n\r\nErrorWindow.propTypes = {\r\n  lastError: PropTypes.exact({\r\n    status: PropTypes.number,\r\n    badStatusText: PropTypes.string,\r\n    message: PropTypes.string,\r\n  }),\r\n}\r\n\r\nexport { ErrorWindow }\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n)\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config)\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          )\r\n        })\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing\r\n        if (installingWorker == null) {\r\n          return\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              )\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration)\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.')\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration)\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error)\r\n    })\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type')\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload()\r\n          })\r\n        })\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      )\r\n    })\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister()\r\n    })\r\n  }\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport { Provider } from 'react-redux'\r\nimport { BrowserRouter } from 'react-router-dom'\r\nimport configureStore from './store/configureStore'\r\nimport './index.css'\r\nimport App from './containers/App'\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\nconst store = configureStore()\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </BrowserRouter>,\r\n  document.getElementById('root')\r\n)\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n","import { createStore, applyMiddleware } from 'redux'\r\nimport thunk from 'redux-thunk'\r\nimport rootReducer from '../reducers'\r\nimport wsMiddleware from '../middleware/webSocketMiddleware'\r\n\r\nexport default function configureStore(initialState) {\r\n  return createStore(rootReducer, applyMiddleware(thunk, wsMiddleware))\r\n}\r\n"],"sourceRoot":""}