{"version":3,"sources":["resources/BlueWaitingIcon.png","resources/Whisper.png","applicationSettings.js","actions/helper.js","actions/chatSettingsActions.js","actions/messageListActions.js","reducers/index.js","reducers/messageListData.js","reducers/chatSettings.js","middleware/webSocketMiddleware.js","actions/webSocketActions.js","components/ModalWindow/asModalWindow.js","components/InputField/InputField.js","components/AuthenticationAndRegistrationForm/AuthenticationAndRegistrationForm.js","containers/AuthenticationAndRegistrationWindow/AuthenticationAndRegistrationWindow.js","containers/SettingsPanel/SettingsPanel.js","components/UserFrame/UserFrame.js","components/AddToChatNewUserWindow/__SeekForm/AddToChatNewUserWindow-SeekForm.js","components/AddToChatNewUserWindow/AddToChatNewUserWindow.js","components/FileInput/FileInput.js","components/SpecialMessagesPreprocessorMenu/__AddFileForm/SpecialMessagesPreprocessorMenu-AddFileForm.js","components/SpecialMessagesPreprocessorMenu/SpecialMessagesPreprocessorMenu.js","containers/CurrentChatSettings/CurrentChatSettings.js","containers/AppPanel/__TopPanel/AppPanel-TopPanel.js","components/helper.js","components/MessageFrame/__MessageTimestamp/MessageFrame-MessageTimestamp.js","components/MessageFrame/__AuthorNameLabel/MessageFrame-AuthorNameLabel.js","components/MessageFrame/__MessageTextField/MessageFrame-MessageTextField.js","components/MessageFrame/MessageFrame.js","containers/MessageList/__ScrollDownButton/MessageList-ScrollDownButton.js","containers/MessageList/MessageList.js","components/SimpleDataForm/SimpleDataForm.js","containers/CurrentChatPanel/CurrentChatPanel.js","containers/ChatList/__ChatFrame/ChatList-ChatFrame.js","containers/ChatList/ChatList.js","containers/UserChatsPanel/UserChatsPanel.js","containers/AppPanel/__MainPanel/AppPanel-MainPanel.js","containers/AppPanel/AppPanel.js","containers/App.js","components/ErrorWindow/ErrorWindow.js","serviceWorker.js","index.js","store/configureStore.js"],"names":["module","exports","serverLocation","httpHeadersWithoutToken","Accept","createHttpHeadersWithToken","token","Authorization","checkResponseAndCreateErrorIfBadStatus","response","ok","status","badStatusText","statusText","message","validateEmail","email","test","readTextFile","file","Promise","resolve","reject","reader","FileReader","onload","result","onerror","readAsText","convertMessages","messages","convertor","map","item","text","getUserToken","a","localStorage","userJson","JSON","parse","user","changeCurrentUser","type","payload","changeCurrentChat","chat","setAuthenticationResult","handleServerError","serverErrorData","dispatch","resetAuthenticationResult","setLastError","errorData","removeItem","addNewSpecialMessagesPreprocessorFunction","forwardPreprocessorFunction","backwardPreprocessorFunction","tryGetPreprocessorAnd–°hangeCurrentChat","preprocessorString","getItem","_id","preprocessor","Function","forward","backward","fetchChatsList","userId","fetch","method","headers","data","json","console","log","submitUserEmailAndPassword","password","userAuthenticationData","name","body","stringify","setItem","submitNewUser","messageWasReceived","bool","encryptAndSendNewMessage","getState","currentChat","processedText","sourceText","clientSideId","replace","c","r","Math","random","toString","toUpperCase","time","Date","getTime","authorEmail","currentUser","authorName","chatId","addMessageToWaitingList","wasMessageReceived","sendNewMessage","applyBackwardPreprocessorFunctionAndPushMessage","pushNewMessages","removeMessagesFromWaitingList","combineReducers","state","action","previousMessages","newMessages","messagesWaitingList","filter","includes","chatsList","isUserAuthenticated","lastError","usersList","webSocketMiddleware","socket","store","next","close","WebSocket","onmessage","event","actionType","onMessage","onclose","onClose","onopen","target","url","onOpen","asModalWindow","Component","props","className","InputField","caption","placeholder","value","onChange","AuthenticationAndRegistrationForm","isRegistrationMode","onSubmit","eventArg","preventDefault","onAuthenticationSubmit","onRegistrationSubmit","setState","updateUserEmailValue","updateUserNameValue","updateUserPasswordValue","changeMode","checked","renderHeader","headerText","renderLabel","align","src","require","renderUserNameInputField","renderSubmitButton","buttonText","onClick","this","React","AuthenticationAndRegistrationWindow","componentDidUpdate","history","push","AuthenticationAndRegistrationWindowWithRouter","withRouter","connect","userEmail","userPassword","onSignOut","SettingsPanel","UserFrame","onUserClick","SeekForm","userSeekData","onSubmitUserSeekData","searchQueryString","updateSearchQueryString","AddToChatNewUserWindow","findUsers","renderUsersList","length","key","onCancelClick","FileInput","filePath","updateFile","files","renderFileName","fileName","AddFileForm","onSubmitFile","updateMessagesPreprocessorFile","SpecialMessagesPreprocessorMenu","AddToChatNewUserModalWindow","SpecialMessagesPreprocessorModalWindow","CurrentChatSettings","onAddUserButtonClick","showAddedUserMenu","onAddSpecialMessagesPreprocessorButtonClick","showSpecialMessagesPreprocessorMenu","addNewUserToCurrentChat","cancelUserAdding","addNewSpecialMessagesPreprocessor","preprocessorFunctionString","cancelSpecialMessagesPreprocessorAdding","renderAddedUserWindow","Fragment","newUserId","str","trim","TopPanel","addLeadZero","number","MessageTimestamp","date","hours","getHours","minutes","getMinutes","day","getDate","month","getMonth","year","getFullYear","AuthorNameLabel","MessageTextField","MessageFrame","componentDidMount","hasServerReceivedMessage","statusRenderingDelayId","setTimeout","enableStatusRendering","isStatusRenderingEnabled","renderAuthorName","currentUserEmail","clearInterval","waitingIcon","messageFrameClass","renderMessageStatus","ScrollDownButton","decodedString","DOMParser","parseFromString","textContent","onScrollDownClick","MessageList","subscribeForNewMessages","fetchMessages","current","messageListRef","reloadMessagesList","messagesLength","previousMessagesLength","suspendMessagesFetching","scrollTop","scrollDownIfNeed","needScrollDown","fetchMessagesForced","oldestMessageTime","fetchMessagesList","fetchNewMessages","lastMessageIndex","scrollDown","scrollHeight","onScroll","clientHeight","showScrollDownButton","renderMessageList","index","renderScrollDownButton","renderChatNameCaption","chatName","createRef","enableScrollDown","unsubscribeForNewMessages","offsetWidth","clientWidth","waitingMessages","ref","newestMessageTime","SimpleDataForm","newData","onSubmitNewData","updateInputValue","buttonCaption","CurrentChatPanel","ChatFrame","onSelectChat","users","ChatList","renderChatList","UserChatsPanel","onSubmitNewChat","createNewChat","usersIds","newChatData","MainPanel","AppPanel","AppPanelWithRouter","ErrorModalWindow","statusParagraph","badStatusTextParagraph","messageParagraph","onOk","App","checkIsUserAuthenticated","clearLastError","exact","path","render","component","renderErrorWindow","renderMainContent","AppWithRouter","Boolean","window","location","hostname","match","createStore","rootReducer","applyMiddleware","thunk","wsMiddleware","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.dc0fa2f9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/BlueWaitingIcon.599230fc.png\";","module.exports = __webpack_public_path__ + \"static/media/Whisper.83cc1573.png\";","export const serverLocation = 'http://localhost:4000/'\r\nexport const wsServerLocation = 'ws://localhost:4000/'\r\n\r\nexport const messageSendPath = 'messages/new/'\r\nexport const messageGetPath = 'messages/listRequest/'\r\nexport const newMessageGetPath = 'messages/lastMessages/'\r\nexport const submitNewChatPath = 'chats/new/'\r\nexport const chatsListGetPath = 'chats/listRequest/'\r\nexport const submitUserEmailAndPasswordPath = 'users/login/'\r\nexport const submitNewUserPath = 'users/new/'\r\nexport const searchUsersPath = 'users/search/'\r\nexport const addNewUserToChatPath = 'chats/addNewUser/'\r\n\r\nexport const fetchMessagesCount = 15\r\nexport const updateInterval = 10000\r\nexport const statusRenderingDelay = 1000\r\n","export const httpHeadersWithoutToken = {\r\n  Accept: 'application/json',\r\n  'Content-Type': 'application/json',\r\n}\r\n\r\nexport function createHttpHeadersWithToken(token) {\r\n  return {\r\n    Accept: 'application/json',\r\n    'Content-Type': 'application/json',\r\n    Authorization: `Bearer ${token}`,\r\n  }\r\n}\r\n\r\nexport function checkResponseAndCreateErrorIfBadStatus(response) {\r\n  if (response.ok) {\r\n    return\r\n  } else {\r\n    const { status, statusText, message } = response\r\n\r\n    return {\r\n      status,\r\n      badStatusText: statusText,\r\n      message,\r\n    }\r\n  }\r\n}\r\n\r\nexport function validateEmail(email) {\r\n  const reg = /^([A-Za-z0-9_\\-\\.])+\\@([A-Za-z0-9_\\-\\.])+\\.([A-Za-z]{2,4})$/\r\n\r\n  return reg.test(email)\r\n}\r\n\r\nexport function readTextFile(file) {\r\n  return new Promise((resolve, reject) => {\r\n    var reader = new FileReader()\r\n    reader.onload = () => {\r\n      resolve(reader.result)\r\n    }\r\n    reader.onerror = reject\r\n    reader.readAsText(file)\r\n  })\r\n}\r\n\r\nexport function isStringNullOrEmpty(str) {\r\n  if (!str) return true\r\n\r\n  if (str.trim() === '') return true\r\n\r\n  return false\r\n}\r\n\r\nexport function convertMessages(messages, convertor) {\r\n  if (convertor) {\r\n    messages = messages.map(item => {\r\n      const text = convertor(item.text)\r\n      return { ...item, text }\r\n    })\r\n  }\r\n\r\n  return messages\r\n}\r\n\r\nexport async function getUserToken() {\r\n  const { userJson } = localStorage\r\n\r\n  if (!userJson) return null\r\n\r\n  const user = await JSON.parse(userJson)\r\n\r\n  if (!user) return null\r\n\r\n  return user.token ? user.token : null\r\n}\r\n\r\nexport function createGuid() {\r\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\r\n    var r = Math.random()*16|0, v = c == 'x' ? r : (r&0x3|0x8);\r\n    return v.toString(16);\r\n  }).toUpperCase();\r\n}\r\n","import {\r\n  serverLocation,\r\n  submitNewChatPath,\r\n  chatsListGetPath,\r\n  submitUserEmailAndPasswordPath,\r\n  submitNewUserPath,\r\n  searchUsersPath,\r\n  addNewUserToChatPath,\r\n} from '../applicationSettings'\r\n\r\nimport { clearMessages } from './messageListActions'\r\n\r\nimport {\r\n  createHttpHeadersWithToken,\r\n  httpHeadersWithoutToken,\r\n  checkResponseAndCreateErrorIfBadStatus,\r\n  validateEmail,\r\n  readTextFile,\r\n  isStringNullOrEmpty,\r\n  getUserToken,\r\n} from './helper'\r\n\r\nexport const CHANGE_CURRENT_USER = 'CHANGE_CURRENT_USER'\r\nexport const CHANGE_CURRENT_CHAT = 'CHANGE_CURRENT_CHAT'\r\nexport const REFRESH_CHATS_LIST = 'REFRESH_CHATS_LIST'\r\nexport const SET_AUTHENTICATION_RESULT = 'SET_AUTHENTICATION_RESULT'\r\nexport const SET_LAST_ERROR = 'SET_LAST_ERROR'\r\nexport const FILL_FOUND_USERS_LIST = 'FILL_FOUND_USERS_LIST'\r\nexport const CLEAR_LAST_ERROR = 'CLEAR_LAST_ERROR'\r\nexport const ADD_NEW_SPECIAL_MESSAGES_PREPROCESSOR_FUNCTION =\r\n  'ADD_NEW_SPECIAL_MESSAGES_PREPROCESSOR_FUNCTION'\r\n\r\nexport function changeCurrentUser(user) {\r\n  return {\r\n    type: CHANGE_CURRENT_USER,\r\n    payload: user,\r\n  }\r\n}\r\n\r\nexport function changeCurrentChat(chat) {\r\n  return {\r\n    type: CHANGE_CURRENT_CHAT,\r\n    payload: chat,\r\n  }\r\n}\r\n\r\nexport function refreshChatsList(chats) {\r\n  return {\r\n    type: REFRESH_CHATS_LIST,\r\n    payload: chats,\r\n  }\r\n}\r\n\r\nexport function setAuthenticationResult(result) {\r\n  return {\r\n    type: SET_AUTHENTICATION_RESULT,\r\n    payload: result,\r\n  }\r\n}\r\n\r\nexport function handleServerError(serverErrorData) {\r\n  return dispatch => {\r\n    if (serverErrorData.status === 401) {\r\n      dispatch(resetAuthenticationResult())\r\n    }\r\n\r\n    dispatch(setLastError(serverErrorData))\r\n  }\r\n}\r\n\r\nexport function setLastError(errorData) {\r\n  return {\r\n    type: SET_LAST_ERROR,\r\n    payload: errorData,\r\n  }\r\n}\r\n\r\nexport function fillFoundUsersList(usersList) {\r\n  return {\r\n    type: FILL_FOUND_USERS_LIST,\r\n    payload: usersList,\r\n  }\r\n}\r\n\r\nexport function resetAuthenticationResult() {\r\n  return dispatch => {\r\n    localStorage.removeItem('userJson')\r\n    dispatch(setAuthenticationResult(false))\r\n  }\r\n}\r\n\r\nexport function clearLastError() {\r\n  return {\r\n    type: CLEAR_LAST_ERROR,\r\n  }\r\n}\r\n\r\nexport function addNewSpecialMessagesPreprocessorFunction(\r\n  forwardPreprocessorFunction,\r\n  backwardPreprocessorFunction\r\n) {\r\n  return {\r\n    type: ADD_NEW_SPECIAL_MESSAGES_PREPROCESSOR_FUNCTION,\r\n    payload: {\r\n      forwardPreprocessorFunction,\r\n      backwardPreprocessorFunction,\r\n    },\r\n  }\r\n}\r\n\r\nexport function checkIsUserAuthenticated() {\r\n  return async dispatch => {\r\n    const { userJson } = localStorage\r\n    let user\r\n    try {\r\n      if (!userJson) return\r\n      user = await JSON.parse(userJson)\r\n    } catch (error) {\r\n      localStorage.removeItem('userJson')\r\n      return\r\n    }\r\n\r\n    dispatch(changeCurrentUser(user))\r\n    dispatch(setAuthenticationResult(true))\r\n    dispatch(fetchChatsList(user._id))\r\n  }\r\n}\r\n\r\nexport function addNewSpecialMessagesPreprocessor(file) {\r\n  return async (dispatch, getState) => {\r\n    if (!file) return\r\n\r\n    let preprocessorString = await readTextFile(file)\r\n\r\n    if (isStringNullOrEmpty(preprocessorString)) {\r\n      dispatch(setLastError({ message: 'File is empty or has wrong format' }))\r\n      return\r\n    }\r\n\r\n    const preprocessor = JSON.parse(preprocessorString)\r\n\r\n    if (!preprocessor.forward || !preprocessor.backward) {\r\n      dispatch(setLastError({ message: 'File has wrong format' }))\r\n      return\r\n    }\r\n\r\n    const forwardPreprocessorFunction = new Function(\r\n      'text',\r\n      preprocessor.forward\r\n    )\r\n    const backwardPreprocessorFunction = new Function(\r\n      'text',\r\n      preprocessor.backward\r\n    )\r\n\r\n    const { currentChat } = getState()\r\n\r\n    localStorage.setItem(currentChat._id, preprocessorString)\r\n\r\n    dispatch(\r\n      addNewSpecialMessagesPreprocessorFunction(\r\n        forwardPreprocessorFunction,\r\n        backwardPreprocessorFunction\r\n      )\r\n    )\r\n  }\r\n}\r\n\r\nexport function tryGetPreprocessorAnd–°hangeCurrentChat(chat) {\r\n  return dispatch => {\r\n    const preprocessorString = localStorage.getItem(chat._id)\r\n\r\n    let forwardPreprocessorFunction, backwardPreprocessorFunction\r\n\r\n    if (preprocessorString) {\r\n      const preprocessor = JSON.parse(preprocessorString)\r\n\r\n      forwardPreprocessorFunction = new Function('text', preprocessor.forward)\r\n      backwardPreprocessorFunction = new Function('text', preprocessor.backward)\r\n    }\r\n\r\n    dispatch(changeCurrentChat(chat))\r\n    dispatch(clearMessages())\r\n\r\n    if (forwardPreprocessorFunction && backwardPreprocessorFunction) {\r\n      dispatch(\r\n        addNewSpecialMessagesPreprocessorFunction(\r\n          forwardPreprocessorFunction,\r\n          backwardPreprocessorFunction\r\n        )\r\n      )\r\n    }\r\n  }\r\n}\r\n\r\nexport function createNewChat(name, users) {\r\n  return async (dispatch, getState) => {\r\n    try {\r\n      const token = await getUserToken()\r\n\r\n      if (!token) return\r\n\r\n      const newChatData = {\r\n        chat: {\r\n          name,\r\n          users,\r\n        },\r\n      }\r\n\r\n      const response = await fetch(serverLocation + submitNewChatPath, {\r\n        method: 'POST',\r\n        headers: createHttpHeadersWithToken(token),\r\n        body: JSON.stringify(newChatData),\r\n      })\r\n\r\n      let data = checkResponseAndCreateErrorIfBadStatus(response)\r\n\r\n      if (!data) {\r\n        data = await response.json()\r\n      }\r\n\r\n      if (data.status) {\r\n        dispatch(handleServerError(data))\r\n      } else {\r\n        const { currentUser } = getState()\r\n\r\n        dispatch(tryGetPreprocessorAnd–°hangeCurrentChat(data.chat))\r\n        dispatch(fetchChatsList(currentUser._id))\r\n      }\r\n    } catch (error) {\r\n      console.log('error', error)\r\n    }\r\n  }\r\n}\r\n\r\nexport function fetchChatsList(userId) {\r\n  return async dispatch => {\r\n    try {\r\n      const token = await getUserToken()\r\n\r\n      if (!token) return\r\n\r\n      const response = await fetch(\r\n        `${serverLocation}${chatsListGetPath}?user_id=${userId}`,\r\n        {\r\n          method: 'GET',\r\n          headers: createHttpHeadersWithToken(token),\r\n        }\r\n      )\r\n\r\n      let data = checkResponseAndCreateErrorIfBadStatus(response)\r\n\r\n      if (!data) {\r\n        data = await response.json()\r\n      }\r\n\r\n      if (data.badStatusText) {\r\n        dispatch(handleServerError(data))\r\n        localStorage.removeItem('token')\r\n        localStorage.removeItem('userJson')\r\n      } else {\r\n        dispatch(refreshChatsList(data))\r\n      }\r\n    } catch (error) {\r\n      console.log('error', error)\r\n    }\r\n  }\r\n}\r\n\r\nexport function submitUserEmailAndPassword(email, password) {\r\n  return async dispatch => {\r\n    try {\r\n      if (!validateEmail(email)) {\r\n        dispatch(\r\n          setLastError({\r\n            message: `Bad email: ${email}`,\r\n          })\r\n        )\r\n        return\r\n      }\r\n\r\n      const userAuthenticationData = {\r\n        user: {\r\n          email,\r\n          name: '',\r\n          password,\r\n        },\r\n      }\r\n\r\n      const response = await fetch(\r\n        serverLocation + submitUserEmailAndPasswordPath,\r\n        {\r\n          method: 'POST',\r\n          headers: httpHeadersWithoutToken,\r\n          body: JSON.stringify(userAuthenticationData),\r\n        }\r\n      )\r\n\r\n      let data = checkResponseAndCreateErrorIfBadStatus(response)\r\n\r\n      if (!data) {\r\n        data = await response.json()\r\n      }\r\n\r\n      if (data.badStatusText) {\r\n        dispatch(handleServerError(data))\r\n        dispatch(setAuthenticationResult(false))\r\n      } else {\r\n        const { _id } = data.user\r\n\r\n        localStorage.setItem('userJson', JSON.stringify(data.user))\r\n\r\n        dispatch(changeCurrentUser(data.user))\r\n        dispatch(setAuthenticationResult(true))\r\n        dispatch(fetchChatsList(_id))\r\n      }\r\n    } catch (error) {\r\n      console.log('error', error)\r\n    }\r\n  }\r\n}\r\n\r\nexport function submitNewUser(user) {\r\n  return async dispatch => {\r\n    try {\r\n      if (!validateEmail(user.email)) {\r\n        dispatch(\r\n          setLastError({\r\n            message: `Bad email: ${user.email}`,\r\n          })\r\n        )\r\n\r\n        return\r\n      }\r\n\r\n      const response = await fetch(serverLocation + submitNewUserPath, {\r\n        method: 'POST',\r\n        headers: httpHeadersWithoutToken,\r\n        body: JSON.stringify({ user }),\r\n      })\r\n\r\n      let data = checkResponseAndCreateErrorIfBadStatus(response)\r\n\r\n      if (!data) {\r\n        data = await response.json()\r\n      }\r\n\r\n      if (data.badStatusText) {\r\n        dispatch(handleServerError(data))\r\n        dispatch(setAuthenticationResult(false))\r\n      } else {\r\n        const { _id } = data.user\r\n\r\n        localStorage.setItem('userJson', JSON.stringify(data.user))\r\n\r\n        dispatch(changeCurrentUser(data.user))\r\n        dispatch(changeCurrentChat({}))\r\n        dispatch(setAuthenticationResult(true))\r\n        dispatch(fetchChatsList(_id))\r\n      }\r\n    } catch (error) {\r\n      console.log('error', error)\r\n    }\r\n  }\r\n}\r\n\r\nexport function findUsers(userSeekData) {\r\n  return async dispatch => {\r\n    try {\r\n      const token = await getUserToken()\r\n\r\n      if (!token) return\r\n\r\n      const response = await fetch(\r\n        `${serverLocation}${searchUsersPath}?user_seek_data=${userSeekData}`,\r\n        {\r\n          method: 'GET',\r\n          headers: createHttpHeadersWithToken(token),\r\n        }\r\n      )\r\n\r\n      let data = checkResponseAndCreateErrorIfBadStatus(response)\r\n\r\n      if (!data) {\r\n        data = await response.json()\r\n      }\r\n\r\n      if (data.badStatusText) {\r\n        dispatch(handleServerError(data))\r\n\r\n        localStorage.removeItem('token')\r\n        localStorage.removeItem('userJson')\r\n      } else {\r\n        dispatch(fillFoundUsersList(data))\r\n      }\r\n    } catch (error) {\r\n      console.log('error', error)\r\n    }\r\n  }\r\n}\r\n\r\nexport function addNewUserToCurrentChat(user) {\r\n  return async (dispatch, getState) => {\r\n    try {\r\n      const token = await getUserToken()\r\n\r\n      if (!token) return\r\n\r\n      const { currentChat } = getState()\r\n\r\n      const response = await fetch(serverLocation + addNewUserToChatPath, {\r\n        method: 'POST',\r\n        headers: createHttpHeadersWithToken(token),\r\n        body: JSON.stringify({\r\n          chatId: currentChat._id,\r\n          newUserId: user._id,\r\n        }),\r\n      })\r\n\r\n      let data = checkResponseAndCreateErrorIfBadStatus(response)\r\n\r\n      if (!data) {\r\n        data = await response.json()\r\n      }\r\n\r\n      if (data.badStatusText) {\r\n        dispatch(handleServerError(data))\r\n      } else {\r\n        dispatch(tryGetPreprocessorAnd–°hangeCurrentChat(data.chat))\r\n      }\r\n    } catch (error) {\r\n      console.log('error', error)\r\n    }\r\n  }\r\n}\r\n","import {\r\n  serverLocation,\r\n  wsServerLocation,\r\n  messageSendPath,\r\n  messageGetPath,\r\n  newMessageGetPath,\r\n  fetchMessagesCount,\r\n} from '../applicationSettings'\r\n\r\nimport { handleServerError } from './chatSettingsActions'\r\nimport { wsConnect, wsDisconnect } from './webSocketActions'\r\n\r\nimport {\r\n  createHttpHeadersWithToken,\r\n  checkResponseAndCreateErrorIfBadStatus,\r\n  convertMessages,\r\n  getUserToken,\r\n  createGuid,\r\n} from './helper'\r\n\r\nexport const ADD_NEW_MESSAGE = 'ADD_NEW_MESSAGE'\r\nexport const MESSAGE_WAS_RECEIVED = 'MESSAGE_WAS_RECEIVED'\r\nexport const REFRESH_MESSAGES_LIST = 'REFRESH_MESSAGES_LIST'\r\nexport const UNSHIFT_PREVIOUS_MESSAGES = 'UNSHIFT_PREVIOUS_MESSAGES'\r\nexport const PUSH_NEW_MESSAGES = 'PUSH_NEW_MESSAGES'\r\nexport const CLEAR_MESSAGES = 'CLEAR_MESSAGES'\r\nexport const ADD_MSSAGE_TO_WAITING_LIST = 'ADD_MSSAGE_TO_WAITING_LIST'\r\nexport const REMOVE_MESSAGES_FROM_WAITING_LIST = 'REMOVE_MESSAGES_FROM_WAITING_LIST'\r\n\r\nexport function clearMessages() {\r\n  return {\r\n    type: CLEAR_MESSAGES,\r\n  }\r\n}\r\n\r\nexport function addNewMessage(message) {\r\n  return {\r\n    type: ADD_NEW_MESSAGE,\r\n    payload: message,\r\n  }\r\n}\r\n\r\nexport function messageWasReceived(bool) {\r\n  return {\r\n    type: MESSAGE_WAS_RECEIVED,\r\n    payload: bool,\r\n  }\r\n}\r\n\r\nexport function refreshMessagesList(messages) {\r\n  return {\r\n    type: REFRESH_MESSAGES_LIST,\r\n    payload: messages,\r\n  }\r\n}\r\n\r\nexport function unshiftPreviousMessages(messages) {\r\n  return {\r\n    type: UNSHIFT_PREVIOUS_MESSAGES,\r\n    payload: messages,\r\n  }\r\n}\r\n\r\nexport function pushNewMessages(messages) {\r\n  return {\r\n    type: PUSH_NEW_MESSAGES,\r\n    payload: messages,\r\n  }\r\n}\r\n\r\nexport function encryptAndSendNewMessage(text) {\r\n  return (dispatch, getState) => {    \r\n    const { forwardPreprocessorFunction } = getState().currentChat\r\n\r\n    let processedText = text\r\n\r\n    if (forwardPreprocessorFunction) {\r\n      processedText = forwardPreprocessorFunction(text)\r\n    }\r\n\r\n    dispatch(sendNewMessage(processedText, text))\r\n  }\r\n}\r\n\r\nexport function addMessageToWaitingList(message) {\r\n  return {\r\n    type: ADD_MSSAGE_TO_WAITING_LIST,\r\n    payload: message,\r\n  }\r\n}\r\n\r\nexport function removeMessagesFromWaitingList(messages) {\r\n  return {\r\n    type: REMOVE_MESSAGES_FROM_WAITING_LIST,\r\n    payload: messages.map(message => {return message.clientSideId}),\r\n  }\r\n}\r\n\r\nexport function sendNewMessage(processedText, sourceText) {\r\n  return async (dispatch, getState) => {\r\n    try {\r\n      const token = await getUserToken()\r\n\r\n      if (!token) return\r\n\r\n      dispatch(messageWasReceived(false))\r\n\r\n      const clientSideId = createGuid()\r\n      const time = new Date().getTime()\r\n      const authorEmail = getState().currentUser.email\r\n      const authorName = getState().currentUser.name\r\n      const chatId = getState().currentChat._id\r\n\r\n      const message = {\r\n        _id: null,\r\n        clientSideId,\r\n        chatId,\r\n        time,\r\n        authorEmail,\r\n        authorName,\r\n        text: processedText,\r\n      }\r\n\r\n      dispatch(addMessageToWaitingList({\r\n        ...message,\r\n        text: sourceText,\r\n      }))\r\n\r\n      const response = await fetch(serverLocation + messageSendPath, {\r\n        method: 'POST',\r\n        headers: createHttpHeadersWithToken(token),\r\n        body: JSON.stringify(message),\r\n      })\r\n\r\n      let data = checkResponseAndCreateErrorIfBadStatus(response)\r\n\r\n      if (!data) {\r\n        data = await response.json()\r\n      }\r\n\r\n      if (data.status) {\r\n        dispatch(handleServerError(data))\r\n        message.wasMessageReceived = false\r\n        localStorage.removeItem('token')\r\n      } else {\r\n        message.wasMessageReceived = true\r\n        dispatch(messageWasReceived(true))\r\n      }\r\n    } catch (error) {\r\n      console.log('error', error)\r\n    }\r\n  }\r\n}\r\n\r\nexport function fetchMessagesList(chatId, oldestMessageTime) {\r\n  return async (dispatch, getState) => {\r\n    try {\r\n      const token = await getUserToken()\r\n\r\n      if (!token) return\r\n\r\n      const response = await fetch(\r\n        `${serverLocation}${messageGetPath}?chat_id=${chatId}&oldest_message_time=${oldestMessageTime}&fetch_messages_count=${fetchMessagesCount}`,\r\n        {\r\n          method: 'GET',\r\n          headers: createHttpHeadersWithToken(token),\r\n        }\r\n      )\r\n\r\n      let data = checkResponseAndCreateErrorIfBadStatus(response)\r\n\r\n      if (!data) {\r\n        data = await response.json()\r\n      }\r\n\r\n      if (data.badStatusText) {\r\n        dispatch(handleServerError(data))\r\n        localStorage.removeItem('token')\r\n      } else {\r\n        const { backwardPreprocessorFunction } = getState().currentChat\r\n        data = convertMessages(data, backwardPreprocessorFunction)\r\n        dispatch(unshiftPreviousMessages(data))\r\n      }\r\n    } catch (error) {\r\n      console.log('error', error)\r\n    }\r\n  }\r\n}\r\n\r\nexport function fetchNewMessages(chatId, newestMessageTime) {\r\n  return async (dispatch) => {\r\n    try {\r\n      const token = await getUserToken()\r\n\r\n      if (!token) return\r\n\r\n      const response = await fetch(\r\n        `${serverLocation}${newMessageGetPath}?chat_id=${chatId}&newest_message_time=${newestMessageTime}`,\r\n        {\r\n          method: 'GET',\r\n          headers: createHttpHeadersWithToken(token),\r\n        }\r\n      )\r\n\r\n      let data = checkResponseAndCreateErrorIfBadStatus(response)\r\n\r\n      if (!data) {\r\n        data = await response.json()\r\n      }\r\n\r\n      if (data.badStatusText) {\r\n        dispatch(handleServerError(data))\r\n        localStorage.removeItem('token')\r\n      } else {\r\n        dispatch(applyBackwardPreprocessorFunctionAndPushMessage(data))\r\n      }\r\n    } catch (error) {\r\n      console.log('error', error)\r\n    }\r\n  }\r\n}\r\n\r\nexport function applyBackwardPreprocessorFunctionAndPushMessage(messages) {\r\n  return (dispatch, getState) => {\r\n    const { backwardPreprocessorFunction } = getState().currentChat\r\n\r\n    if (backwardPreprocessorFunction) {\r\n      messages = convertMessages(messages, backwardPreprocessorFunction)\r\n    }\r\n\r\n    dispatch(pushNewMessages(messages))\r\n    dispatch(removeMessagesFromWaitingList(messages))\r\n  }\r\n}\r\n\r\nexport function subscribeForNewMessages(chatId) {\r\n  return dispatch => {\r\n    dispatch(wsConnect(`${wsServerLocation}${chatId}`))\r\n  }\r\n}\r\n\r\nexport function unsubscribeForNewMessages() {\r\n  return dispatch => {\r\n    dispatch(wsDisconnect())\r\n  }\r\n}\r\n","import { combineReducers } from 'redux'\r\n\r\nimport {\r\n  messages,\r\n  messagesWaitingList,\r\n  wasMessageReceived\r\n} from './messageListData'\r\n\r\nimport {\r\n  currentUser,\r\n  currentChat,\r\n  chatsList,\r\n  isUserAuthenticated,\r\n  lastError,\r\n  usersList,\r\n} from './chatSettings'\r\n\r\nexport default combineReducers({\r\n  messages,\r\n  wasMessageReceived,\r\n  messagesWaitingList,\r\n  currentUser,\r\n  currentChat,\r\n  chatsList,\r\n  isUserAuthenticated,\r\n  lastError,\r\n  usersList,\r\n})\r\n","import {\r\n  ADD_NEW_MESSAGE,\r\n  MESSAGE_WAS_RECEIVED,\r\n  REFRESH_MESSAGES_LIST,\r\n  UNSHIFT_PREVIOUS_MESSAGES,\r\n  PUSH_NEW_MESSAGES,\r\n  CLEAR_MESSAGES,\r\n  ADD_MSSAGE_TO_WAITING_LIST,\r\n  REMOVE_MESSAGES_FROM_WAITING_LIST,\r\n} from '../actions/messageListActions'\r\n\r\nexport function messages(state = [], action) {\r\n  switch (action.type) {\r\n    case CLEAR_MESSAGES:\r\n      return []\r\n    case ADD_NEW_MESSAGE:\r\n      return [...state, action.payload]\r\n    case REFRESH_MESSAGES_LIST:\r\n      return action.payload\r\n    case UNSHIFT_PREVIOUS_MESSAGES:\r\n      const previousMessages = action.payload\r\n      return [...previousMessages, ...state]\r\n    case PUSH_NEW_MESSAGES:\r\n      const newMessages = action.payload\r\n      return [...state, ...newMessages]\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport function messagesWaitingList(state = [], action) {\r\n  switch (action.type) {\r\n    case ADD_MSSAGE_TO_WAITING_LIST:\r\n      return [...state, action.payload]\r\n    case REMOVE_MESSAGES_FROM_WAITING_LIST:\r\n      return state.filter(message => !action.payload.includes(message.clientSideId))\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport function wasMessageReceived(state = true, action) {\r\n  switch (action.type) {\r\n    case MESSAGE_WAS_RECEIVED:\r\n      return action.payload\r\n    default:\r\n      return state\r\n  }\r\n}\r\n","import {\r\n  CHANGE_CURRENT_USER,\r\n  CHANGE_CURRENT_CHAT,\r\n  REFRESH_CHATS_LIST,\r\n  SET_AUTHENTICATION_RESULT,\r\n  SET_LAST_ERROR,\r\n  FILL_FOUND_USERS_LIST,\r\n  CLEAR_LAST_ERROR,\r\n  ADD_NEW_SPECIAL_MESSAGES_PREPROCESSOR_FUNCTION,\r\n} from '../actions/chatSettingsActions'\r\n\r\nexport function currentUser(state = {}, action) {\r\n  switch (action.type) {\r\n    case CHANGE_CURRENT_USER:\r\n      return action.payload\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport function currentChat(state = {}, action) {\r\n  switch (action.type) {\r\n    case CHANGE_CURRENT_CHAT:\r\n      return action.payload\r\n    case ADD_NEW_SPECIAL_MESSAGES_PREPROCESSOR_FUNCTION:\r\n      return { ...state, ...action.payload }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport function chatsList(state = [], action) {\r\n  switch (action.type) {\r\n    case REFRESH_CHATS_LIST:\r\n      return action.payload\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport function isUserAuthenticated(state = false, action) {\r\n  switch (action.type) {\r\n    case SET_AUTHENTICATION_RESULT:\r\n      return action.payload\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport function lastError(state = null, action) {\r\n  switch (action.type) {\r\n    case SET_LAST_ERROR:\r\n      return action.payload\r\n    case CLEAR_LAST_ERROR:\r\n      return null\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport function usersList(state = [], action) {\r\n  switch (action.type) {\r\n    case FILL_FOUND_USERS_LIST:\r\n      return action.payload\r\n    default:\r\n      return state\r\n  }\r\n}\r\n","import { applyBackwardPreprocessorFunctionAndPushMessage } from '../actions/messageListActions'\r\n\r\nimport {\r\n  wsConnected,\r\n  wsDisconnected,\r\n  WS_CONNECT,\r\n  WS_DISCONNECT,\r\n} from '../actions/webSocketActions'\r\n\r\nconst webSocketMiddleware = () => {\r\n  let socket = null\r\n\r\n  const onOpen = store => event => {\r\n    store.dispatch(wsConnected(event.target.url))\r\n  }\r\n\r\n  const onClose = store => () => {\r\n    store.dispatch(wsDisconnected())\r\n  }\r\n\r\n  const onMessage = store => event => {\r\n    const data = JSON.parse(event.data)\r\n\r\n    switch (data.actionType) {\r\n      case 'save':\r\n        const messages = [data.message]\r\n        store.dispatch(\r\n          applyBackwardPreprocessorFunctionAndPushMessage(messages)\r\n        )\r\n        break\r\n      default:\r\n        break\r\n    }\r\n  }\r\n\r\n  return store => next => action => {\r\n    switch (action.type) {\r\n      case WS_CONNECT:\r\n        if (socket !== null) {\r\n          socket.close()\r\n        }\r\n\r\n        socket = new WebSocket(action.payload)\r\n        socket.onmessage = onMessage(store)\r\n        socket.onclose = onClose(store)\r\n        socket.onopen = onOpen(store)\r\n        break\r\n      case WS_DISCONNECT:\r\n        if (socket !== null) {\r\n          socket.close()\r\n        }\r\n\r\n        socket = null\r\n        break\r\n      default:\r\n        return next(action)\r\n    }\r\n  }\r\n}\r\n\r\nexport default webSocketMiddleware()\r\n","export const WS_CONNECT = 'WS_CONNECT'\r\nexport const WS_CONNECTING = 'WS_CONNECTING'\r\nexport const WS_CONNECTED = 'WS_CONNECTED'\r\nexport const WS_DISCONNECT = 'WS_DISCONNECT'\r\nexport const WS_DISCONNECTED = 'WS_DISCONNECTED'\r\n\r\nexport function wsConnect(host) {\r\n  return {\r\n    type: WS_CONNECT,\r\n    payload: host,\r\n  }\r\n}\r\n\r\nexport function wsConnecting() {\r\n  return {\r\n    type: WS_CONNECTING,\r\n  }\r\n}\r\n\r\nexport function wsConnected() {\r\n  return {\r\n    type: WS_CONNECTED,\r\n  }\r\n}\r\n\r\nexport function wsDisconnect() {\r\n  return {\r\n    type: WS_DISCONNECT,\r\n  }\r\n}\r\n\r\nexport function wsDisconnected() {\r\n  return {\r\n    type: WS_DISCONNECTED,\r\n  }\r\n}\r\n","import React from 'react'\r\n\r\nimport './ModalWindow.sass'\r\n\r\nfunction asModalWindow(Component) {\r\n  return function(props) {\r\n    return (\r\n      <div className=\"modalWindow\">\r\n        <div>\r\n          <Component {...props} />\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport { asModalWindow }\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport './InputField.sass'\r\n\r\nfunction InputField(props) {\r\n  const { caption, name, placeholder, type, value, onChange } = props\r\n\r\n  return (\r\n    <div className=\"inputField\">\r\n      <label>{caption}</label>\r\n      <input\r\n        name={name}\r\n        placeholder={placeholder}\r\n        type={type}\r\n        value={value}\r\n        onChange={onChange}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nInputField.propTypes = {\r\n  caption: PropTypes.string,\r\n  name: PropTypes.string,\r\n  placeholder: PropTypes.string,\r\n  type: PropTypes.string,\r\n  value: PropTypes.string,\r\n  onChange: PropTypes.func,\r\n}\r\n\r\nexport { InputField }\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport { InputField } from '../InputField/InputField'\r\n\r\nimport './AuthenticationAndRegistrationForm.sass'\r\nimport '../SubmitButton/SubmitButton.sass'\r\nimport './__Label/AuthenticationAndRegistrationForm-Label.sass'\r\n\r\nclass AuthenticationAndRegistrationForm extends React.Component {\r\n  state = {\r\n    email: '',\r\n    name: '',\r\n    password: '',\r\n    isRegistrationMode: false,\r\n  }\r\n\r\n  onSubmit = eventArg => {\r\n    eventArg.preventDefault()\r\n\r\n    const { email, name, password, isRegistrationMode } = this.state\r\n    const { onAuthenticationSubmit, onRegistrationSubmit } = this.props\r\n\r\n    const user = {\r\n      email,\r\n      name,\r\n      password,\r\n    }\r\n\r\n    if (isRegistrationMode) {\r\n      onRegistrationSubmit(user)\r\n    } else {\r\n      onAuthenticationSubmit(email, password)\r\n    }\r\n\r\n    this.setState({\r\n      email: '',\r\n      name: '',\r\n      password: '',\r\n    })\r\n  }\r\n\r\n  updateUserEmailValue = eventArg => {\r\n    this.setState({\r\n      email: eventArg.target.value,\r\n    })\r\n  }\r\n\r\n  updateUserNameValue = eventArg => {\r\n    this.setState({\r\n      name: eventArg.target.value,\r\n    })\r\n  }\r\n\r\n  updateUserPasswordValue = eventArg => {\r\n    this.setState({\r\n      password: eventArg.target.value,\r\n    })\r\n  }\r\n\r\n  changeMode = ({ target: { checked } }) => {\r\n    this.setState({\r\n      isRegistrationMode: checked,\r\n    })\r\n  }\r\n\r\n  renderHeader = () => {\r\n    let headerText\r\n\r\n    if (this.state.isRegistrationMode) {\r\n      headerText = 'New user registration'\r\n    } else {\r\n      headerText = 'Login'\r\n    }\r\n\r\n    return (\r\n      <h3 className=\"authenticationAndRegistrationForm__Header\">\r\n        {headerText}\r\n      </h3>\r\n    )\r\n  }\r\n\r\n  renderLabel = () => {\r\n    return (\r\n      <div className=\"authenticationAndRegistrationForm-Label\" align=\"center\">\r\n        <img src={require(\"../../resources/Whisper.png\")}></img>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  renderUserNameInputField = () => {\r\n    if (this.state.isRegistrationMode) {\r\n      return (\r\n        <InputField\r\n          caption=\"User name\"\r\n          name=\"userName\"\r\n          placeholder=\"User name\"\r\n          type=\"text\"\r\n          value={this.state.name}\r\n          onChange={this.updateUserNameValue}\r\n        />\r\n      )\r\n    }\r\n  }\r\n\r\n  renderSubmitButton = () => {\r\n    let buttonText\r\n\r\n    if (this.state.isRegistrationMode) {\r\n      buttonText = 'Sign up'\r\n    } else {\r\n      buttonText = 'Sign in'\r\n    }\r\n\r\n    return (\r\n      <button className=\"submitButton\" type=\"submit\">\r\n        {buttonText}\r\n      </button>\r\n    )\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"authenticationAndRegistrationForm\">\r\n        <input type=\"checkbox\" name=\"changeMode\" onClick={this.changeMode} />\r\n        <span>Registration</span>\r\n        <form onSubmit={this.onSubmit}>\r\n          {this.renderLabel()}\r\n          <div align=\"center\">{this.renderHeader()}</div>\r\n          {this.renderUserNameInputField()}\r\n          <InputField\r\n            caption=\"User email\"\r\n            name=\"userEmail\"\r\n            placeholder=\"User email\"\r\n            type=\"text\"\r\n            value={this.state.email}\r\n            onChange={this.updateUserEmailValue}\r\n          />\r\n          <InputField\r\n            caption=\"User password\"\r\n            name=\"userPassword\"\r\n            placeholder=\"User password\"\r\n            type=\"text\"\r\n            value={this.state.password}\r\n            onChange={this.updateUserPasswordValue}\r\n          />\r\n          <div align=\"center\">{this.renderSubmitButton()}</div>\r\n        </form>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nAuthenticationAndRegistrationForm.propTypes = {\r\n  onAuthenticationSubmit: PropTypes.func.isRequired,\r\n  onRegistrationSubmit: PropTypes.func.isRequired,\r\n}\r\n\r\nexport { AuthenticationAndRegistrationForm }\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { withRouter } from 'react-router-dom'\r\n\r\nimport { AuthenticationAndRegistrationForm } from '../../components/AuthenticationAndRegistrationForm/AuthenticationAndRegistrationForm'\r\n\r\nimport { connect } from 'react-redux'\r\n\r\nimport {\r\n  submitUserEmailAndPassword,\r\n  submitNewUser,\r\n  resetAuthenticationResult,\r\n} from '../../actions/chatSettingsActions'\r\n\r\nimport './AuthenticationAndRegistrationWindow.sass'\r\n\r\nclass AuthenticationAndRegistrationWindow extends React.Component {\r\n  componentDidUpdate = () => {\r\n    const { isUserAuthenticated, history } = this.props\r\n\r\n    if (isUserAuthenticated) {\r\n      history.push('/chat')\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { submitUserEmailAndPassword, submitNewUser } = this.props\r\n\r\n    return (\r\n      <div className=\"authenticationAndRegistrationWindow\">\r\n        <AuthenticationAndRegistrationForm\r\n          onAuthenticationSubmit={submitUserEmailAndPassword}\r\n          onRegistrationSubmit={submitNewUser}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nAuthenticationAndRegistrationWindow.propTypes = {\r\n  onSignOut: PropTypes.func.isRequired,\r\n  submitUserEmailAndPassword: PropTypes.func,\r\n  submitNewUser: PropTypes.func,\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    isUserAuthenticated: state.isUserAuthenticated,\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    submitUserEmailAndPassword: (userEmail, userPassword) =>\r\n      dispatch(submitUserEmailAndPassword(userEmail, userPassword)),\r\n    submitNewUser: user => dispatch(submitNewUser(user)),\r\n    onSignOut: () => dispatch(resetAuthenticationResult()),\r\n  }\r\n}\r\n\r\nconst AuthenticationAndRegistrationWindowWithRouter = withRouter(\r\n  AuthenticationAndRegistrationWindow\r\n)\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(AuthenticationAndRegistrationWindowWithRouter)\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { connect } from 'react-redux'\r\n\r\nimport { resetAuthenticationResult } from '../../actions/chatSettingsActions'\r\n\r\nimport './SettingsPanel.sass'\r\n\r\nclass SettingsPanel extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"settingsPanel\">\r\n        <span>{this.props.currentUser.name}</span>\r\n        <button onClick={this.props.onSignOut}>Sign out</button>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nSettingsPanel.propTypes = {\r\n  onSignOut: PropTypes.func.isRequired,\r\n  currentUserName: PropTypes.exact({\r\n    _id: PropTypes.number.isRequired,\r\n    name: PropTypes.string.isRequired,\r\n    email: PropTypes.string.isRequired,\r\n  }),\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    currentUser: state.currentUser,\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onSignOut: () => dispatch(resetAuthenticationResult()),\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SettingsPanel)\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport './UserFrame.sass'\r\n\r\nclass UserFrame extends React.Component {\r\n  onUserClick = () => {\r\n    const { user } = this.props\r\n\r\n    this.props.onUserClick(user)\r\n  }\r\n\r\n  render() {\r\n    const { user } = this.props\r\n\r\n    return (\r\n      <div className=\"userFrame\" onClick={this.onUserClick}>\r\n        <span>{user.name}</span>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nUserFrame.propTypes = {\r\n  chat: PropTypes.exact({\r\n    _id: PropTypes.string.isRequired,\r\n    name: PropTypes.string.isRequired,\r\n    email: PropTypes.string.isRequired,\r\n  }),\r\n  onSelectUser: PropTypes.func,\r\n}\r\n\r\nexport { UserFrame }\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport { InputField } from '../../InputField/InputField'\r\n\r\nimport '../../SubmitButton/SubmitButton.sass'\r\n\r\nclass SeekForm extends React.Component {\r\n  state = {\r\n    userSeekData: '',\r\n  }\r\n\r\n  onSubmit = eventArg => {\r\n    eventArg.preventDefault()\r\n\r\n    this.props.onSubmitUserSeekData(this.state.userSeekData)\r\n\r\n    this.setState({\r\n      searchQueryString: '',\r\n    })\r\n  }\r\n\r\n  updateSearchQueryString = eventArg => {\r\n    this.setState({\r\n      userSeekData: eventArg.target.value,\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.onSubmit}>\r\n        <InputField\r\n          caption=\"User email\"\r\n          name=\"userEmail\"\r\n          placeholder=\"User email\"\r\n          type=\"text\"\r\n          value={this.state.userSeekData}\r\n          onChange={this.updateSearchQueryString}\r\n        />\r\n        <div align=\"center\">\r\n          <button className=\"submitButton\" type=\"submit\">\r\n            Find users\r\n          </button>\r\n        </div>\r\n      </form>\r\n    )\r\n  }\r\n}\r\n\r\nSeekForm.propTypes = {\r\n  onSubmitUserSeekData: PropTypes.func.isRequired,\r\n}\r\n\r\nexport { SeekForm }\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport { UserFrame } from '../UserFrame/UserFrame'\r\nimport { SeekForm } from './__SeekForm/AddToChatNewUserWindow-SeekForm'\r\n\r\nimport './AddToChatNewUserWindow.sass'\r\nimport '../CloseButton/CloseButton.sass'\r\nimport './__UsersList/AddToChatNewUserWindow-UsersList.sass'\r\n\r\nclass AddToChatNewUserWindow extends React.Component {\r\n  onSubmitUserSeekData = userSeekData => {\r\n    this.props.findUsers(userSeekData)\r\n  }\r\n\r\n  renderUsersList = () => {\r\n    const { usersList, onUserClick } = this.props\r\n\r\n    if (usersList && usersList.length) {\r\n      return usersList.map(function(item) {\r\n        return (\r\n          <UserFrame onUserClick={onUserClick} key={item._id} user={item} />\r\n        )\r\n      })\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"addToChatNewUserWindow\">\r\n        <h4>Search for a new member</h4>\r\n        <button className=\"closeButton\" onClick={this.props.onCancelClick}>\r\n          X\r\n        </button>\r\n        <SeekForm onSubmitUserSeekData={this.onSubmitUserSeekData} />\r\n        <div className=\"addToChatNewUserWindow-UsersList\">\r\n          {this.renderUsersList()}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nAddToChatNewUserWindow.propTypes = {\r\n  usersList: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      user: PropTypes.exact({\r\n        _id: PropTypes.number.isRequired,\r\n        name: PropTypes.string.isRequired,\r\n        email: PropTypes.string.isRequired,\r\n      }),\r\n    })\r\n  ),\r\n  findUsers: PropTypes.func.isRequired,\r\n  onUserClick: PropTypes.func.isRequired,\r\n}\r\n\r\nexport { AddToChatNewUserWindow }\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport './FileInput.sass'\r\n\r\nclass FileInput extends React.Component {\r\n  state = {\r\n    file: null,\r\n    filePath: '',\r\n  }\r\n\r\n  updateFile = eventArg => {\r\n    this.setState({\r\n      file: eventArg.target.files[0],\r\n      filePath: eventArg.target.value,\r\n    })\r\n\r\n    this.props.updateFile(eventArg)\r\n  }\r\n\r\n  renderFileName = () => {\r\n    const { file } = this.state\r\n    let fileName = ''\r\n\r\n    if (file) fileName = file.name\r\n\r\n    return <span>{fileName}</span>\r\n  }\r\n\r\n  render() {\r\n    const { name } = this.props\r\n\r\n    return (\r\n      <div className=\"fileInput\">\r\n        <div>\r\n          <span>{this.renderFileName()}</span>\r\n        </div>\r\n        <div>\r\n          <label>\r\n            <input\r\n              name={name}\r\n              type=\"file\"\r\n              value={this.state.filePath}\r\n              onChange={this.updateFile}\r\n            />\r\n            <span>Open file</span>\r\n          </label>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nFileInput.propTypes = {\r\n  name: PropTypes.string,\r\n  updateFile: PropTypes.func.isRequired,\r\n}\r\n\r\nexport { FileInput }\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport { FileInput } from '../../FileInput/FileInput'\r\n\r\nimport './SpecialMessagesPreprocessorMenu-AddFileForm.sass'\r\nimport '../../SubmitButton/SubmitButton.sass'\r\n\r\nclass AddFileForm extends React.Component {\r\n  state = {\r\n    file: null,\r\n  }\r\n\r\n  onSubmit = event => {\r\n    const { file } = this.state\r\n    const { onSubmitFile } = this.props\r\n\r\n    event.preventDefault()\r\n\r\n    if (file) {\r\n      onSubmitFile(file)\r\n    }\r\n  }\r\n\r\n  updateMessagesPreprocessorFile = eventArg => {\r\n    this.setState({\r\n      file: eventArg.target.files[0],\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <form className=\"addFileForm\" onSubmit={this.onSubmit}>\r\n        <FileInput\r\n          name=\"messagesPreprocessorFile\"\r\n          updateFile={this.updateMessagesPreprocessorFile}\r\n        />\r\n        <div>\r\n          <button className=\"submitButton\" type=\"submit\">\r\n            Add\r\n          </button>\r\n        </div>\r\n      </form>\r\n    )\r\n  }\r\n}\r\n\r\nAddFileForm.propTypes = {\r\n  onSubmitFile: PropTypes.func.isRequired,\r\n}\r\n\r\nexport { AddFileForm }\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport { AddFileForm } from './__AddFileForm/SpecialMessagesPreprocessorMenu-AddFileForm'\r\n\r\nimport './SpecialMessagesPreprocessorMenu.sass'\r\n\r\nclass SpecialMessagesPreprocessorMenu extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"specialMessagesPreprocessorMenu\">\r\n        <h4>Add special messages preprocessor</h4>\r\n        <button className=\"closeButton\" onClick={this.props.onCancelClick}>\r\n          X\r\n        </button>\r\n        <AddFileForm onSubmitFile={this.props.onSubmit} />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nSpecialMessagesPreprocessorMenu.propTypes = {\r\n  onSubmit: PropTypes.func.isRequired,\r\n  onCancelClick: PropTypes.func.isRequired,\r\n}\r\n\r\nexport { SpecialMessagesPreprocessorMenu }\r\n","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport { asModalWindow } from '../../components/ModalWindow/asModalWindow'\r\nimport { AddToChatNewUserWindow } from '../../components/AddToChatNewUserWindow/AddToChatNewUserWindow'\r\nimport { SpecialMessagesPreprocessorMenu } from '../../components/SpecialMessagesPreprocessorMenu/SpecialMessagesPreprocessorMenu'\r\nimport {\r\n  findUsers,\r\n  addNewUserToCurrentChat,\r\n  addNewSpecialMessagesPreprocessor,\r\n} from '../../actions/chatSettingsActions'\r\n\r\nimport './CurrentChatSettings.sass'\r\n\r\nconst AddToChatNewUserModalWindow = asModalWindow(AddToChatNewUserWindow)\r\nconst SpecialMessagesPreprocessorModalWindow = asModalWindow(\r\n  SpecialMessagesPreprocessorMenu\r\n)\r\n\r\nclass CurrentChatSettings extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.state = {\r\n      showAddedUserMenu: false,\r\n      showSpecialMessagesPreprocessorMenu: false,\r\n    }\r\n  }\r\n\r\n  onAddUserButtonClick = () => {\r\n    this.setState({\r\n      showAddedUserMenu: true,\r\n    })\r\n  }\r\n\r\n  onAddSpecialMessagesPreprocessorButtonClick = () => {\r\n    this.setState({\r\n      showSpecialMessagesPreprocessorMenu: true,\r\n    })\r\n  }\r\n\r\n  addNewUserToCurrentChat = user => {\r\n    this.cancelUserAdding()\r\n    this.props.addNewUserToCurrentChat(user)\r\n  }\r\n\r\n  cancelUserAdding = () => {\r\n    this.setState({\r\n      showAddedUserMenu: false,\r\n    })\r\n  }\r\n\r\n  addNewSpecialMessagesPreprocessor = preprocessorFunctionString => {\r\n    this.cancelSpecialMessagesPreprocessorAdding()\r\n    this.props.addNewSpecialMessagesPreprocessor(preprocessorFunctionString)\r\n  }\r\n\r\n  cancelSpecialMessagesPreprocessorAdding = () => {\r\n    this.setState({\r\n      showSpecialMessagesPreprocessorMenu: false,\r\n    })\r\n  }\r\n\r\n  renderAddedUserWindow = () => {\r\n    const {\r\n      showAddedUserMenu,\r\n      showSpecialMessagesPreprocessorMenu,\r\n    } = this.state\r\n    const { currentChat, findUsers, usersList } = this.props\r\n\r\n    if (showAddedUserMenu) {\r\n      return (\r\n        <AddToChatNewUserModalWindow\r\n          findUsers={findUsers}\r\n          usersList={usersList}\r\n          onUserClick={this.addNewUserToCurrentChat}\r\n          onCancelClick={this.cancelUserAdding}\r\n        />\r\n      )\r\n    }\r\n\r\n    if (showSpecialMessagesPreprocessorMenu) {\r\n      return (\r\n        <SpecialMessagesPreprocessorModalWindow\r\n          currentChat={currentChat}\r\n          onSubmit={this.addNewSpecialMessagesPreprocessor}\r\n          onCancelClick={this.cancelSpecialMessagesPreprocessorAdding}\r\n        />\r\n      )\r\n    }\r\n\r\n    if (currentChat._id) {\r\n      return (\r\n        <React.Fragment>\r\n          <button onClick={this.onAddUserButtonClick}>\r\n            Add new user to chat\r\n          </button>\r\n          <button onClick={this.onAddSpecialMessagesPreprocessorButtonClick}>\r\n            Add special messages preprocessor\r\n          </button>\r\n        </React.Fragment>\r\n      )\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"currentChatSettings\">{this.renderAddedUserWindow()}</div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    currentChat: state.currentChat,\r\n    usersList: state.usersList,\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    findUsers: userSeekData => dispatch(findUsers(userSeekData)),\r\n    addNewUserToCurrentChat: user => dispatch(addNewUserToCurrentChat(user)),\r\n    addNewSpecialMessagesPreprocessor: file =>\r\n      dispatch(addNewSpecialMessagesPreprocessor(file)),\r\n  }\r\n}\r\n\r\nCurrentChatSettings.propTypes = {\r\n  usersList: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      user: PropTypes.exact({\r\n        _id: PropTypes.number.isRequired,\r\n        name: PropTypes.string.isRequired,\r\n        email: PropTypes.string.isRequired,\r\n      }),\r\n    })\r\n  ),\r\n  currentChat: PropTypes.exact({\r\n    _id: PropTypes.string,\r\n    name: PropTypes.string,\r\n    users: PropTypes.arrayOf(\r\n      PropTypes.shape({\r\n        _id: PropTypes.string.isRequired,\r\n        name: PropTypes.string.isRequired,\r\n        email: PropTypes.string.isRequired,\r\n      })\r\n    ),\r\n    forwardPreprocessorFunction: PropTypes.func,\r\n    backwardPreprocessorFunction: PropTypes.func,\r\n  }),\r\n  findUsers: PropTypes.func.isRequired,\r\n  addNewUserToCurrentChat: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CurrentChatSettings)\r\n","import React from 'react'\r\n\r\nimport SettingsPanel from '../../SettingsPanel/SettingsPanel'\r\nimport CurrentChatSettings from '../../CurrentChatSettings/CurrentChatSettings'\r\n\r\nimport './AppPanel-TopPanel.sass'\r\n\r\nfunction TopPanel() {\r\n  return (\r\n    <div className=\"topPanel\">\r\n      <CurrentChatSettings />\r\n      <SettingsPanel />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport { TopPanel }\r\n","export function addLeadZero(number) {\r\n  if (number < 10) return '0' + number\r\n  return number\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { addLeadZero } from '../../helper'\r\n\r\nimport './MessageFrame-MessageTimestamp.sass'\r\n\r\nfunction MessageTimestamp(props) {\r\n  const date = new Date(props.time)\r\n  let hours = addLeadZero(date.getHours())\r\n  let minutes = addLeadZero(date.getMinutes())\r\n  let day = addLeadZero(date.getDate())\r\n  let month = addLeadZero(date.getMonth() + 1)\r\n  let year = date.getFullYear()\r\n\r\n  return (\r\n    <div className=\"messageFrame-MessageTimestamp\">\r\n      <span>\r\n        {hours}:{minutes} {day}.{month}.{year}\r\n      </span>\r\n    </div>\r\n  )\r\n}\r\n\r\nMessageTimestamp.propTypes = {\r\n  time: PropTypes.oneOfType([\r\n    PropTypes.number,\r\n    PropTypes.string,\r\n    PropTypes.instanceOf(Date),\r\n  ]).isRequired,\r\n}\r\n\r\nexport { MessageTimestamp }\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport './MessageFrame-AuthorNameLabel.sass'\r\n\r\nfunction AuthorNameLabel(props) {\r\n  return (\r\n    <span className=\"messageFrame-AuthorNameLabel\">{props.authorName}</span>\r\n  )\r\n}\r\n\r\nAuthorNameLabel.propTypes = {\r\n  authorName: PropTypes.string,\r\n}\r\n\r\nexport { AuthorNameLabel }\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nfunction MessageTextField(props) {\r\n  return <span>{props.text}</span>\r\n}\r\n\r\nMessageTextField.propTypes = {\r\n  text: PropTypes.string,\r\n}\r\n\r\nexport { MessageTextField }\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { MessageTimestamp } from './__MessageTimestamp/MessageFrame-MessageTimestamp'\r\nimport { AuthorNameLabel } from './__AuthorNameLabel/MessageFrame-AuthorNameLabel'\r\nimport { MessageTextField } from './__MessageTextField/MessageFrame-MessageTextField'\r\nimport { statusRenderingDelay } from '../../applicationSettings'\r\n\r\nimport './MessageFrame.sass'\r\nimport './_user/MessageFrame_user_another.sass'\r\nimport './_user/MessageFrame_user_current.sass'\r\nimport '../RotatingImage/_RotatingImage.sass'\r\n\r\nimport waitingIcon from '../../resources/BlueWaitingIcon.png'\r\n\r\nclass MessageFrame extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.state = { isStatusRenderingEnabled: false }\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    const { hasServerReceivedMessage } = this.props\r\n\r\n    if (hasServerReceivedMessage){\r\n      return\r\n    }\r\n\r\n    this.statusRenderingDelayId = setTimeout(() => this.enableStatusRendering(), statusRenderingDelay)\r\n  }\r\n\r\n  enableStatusRendering = () => {\r\n    this.setState({ isStatusRenderingEnabled: true })\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.statusRenderingDelayId)\r\n  }\r\n\r\n  renderAuthorName = () => {\r\n    const { message, currentUserEmail } = this.props\r\n\r\n    if (currentUserEmail === message.authorEmail) {\r\n      return\r\n    } else {\r\n      return <AuthorNameLabel authorName={message.authorName} />\r\n    }\r\n  }\r\n\r\n  renderMessageStatus() {\r\n    const { hasServerReceivedMessage } = this.props\r\n\r\n    if (!hasServerReceivedMessage && this.state.isStatusRenderingEnabled) {\r\n      return (\r\n        <div className=\"messageStatus\">\r\n          <img className=\"RotatingImage\" src={waitingIcon}></img>\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { message, currentUserEmail } = this.props\r\n    let messageFrameClass = 'messageFrame'\r\n\r\n    if (currentUserEmail === message.authorEmail) {\r\n      messageFrameClass += ' messageFrame_user_current'\r\n    } else {\r\n      messageFrameClass += ' messageFrame_user_another'\r\n    }\r\n\r\n    return (\r\n      <div className={messageFrameClass}>\r\n        <div>\r\n          {this.renderMessageStatus()}\r\n        </div>\r\n        <div>\r\n          <div>{this.renderAuthorName()}</div>\r\n          <div>\r\n            <MessageTextField text={message.text} />\r\n          </div>\r\n          <div>\r\n            <MessageTimestamp time={message.time} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nMessageFrame.propTypes = {\r\n  message: PropTypes.exact({\r\n    _id: PropTypes.string,\r\n    clientSideId: PropTypes.string,\r\n    chatId: PropTypes.string.isRequired,\r\n    authorName: PropTypes.string.isRequired,\r\n    authorEmail: PropTypes.string.isRequired,\r\n    time: PropTypes.oneOfType([\r\n      PropTypes.number,\r\n      PropTypes.string,\r\n      PropTypes.instanceOf(Date),\r\n    ]).isRequired,\r\n    text: PropTypes.string.isRequired,\r\n    wasMessageReceived: PropTypes.bool,\r\n  }),\r\n  currentUserEmail: PropTypes.string,\r\n  hasServerReceivedMessage: PropTypes.bool,\r\n}\r\n\r\nexport { MessageFrame }\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport './MessageList-ScrollDownButton.sass'\r\n\r\nfunction ScrollDownButton(props) {\r\n  const strToDecode = '&#11015'\r\n  const parser = new DOMParser()\r\n  const decodedString = parser.parseFromString(\r\n    `<!doctype html><body>${strToDecode}`,\r\n    'text/html'\r\n  ).body.textContent\r\n\r\n  return (\r\n    <div className=\"scrollDownButton\" onClick={props.onScrollDownClick}>\r\n      {decodedString}\r\n    </div>\r\n  )\r\n}\r\n\r\nScrollDownButton.propTypes = {\r\n  text: PropTypes.string,\r\n}\r\n\r\nexport { ScrollDownButton }\r\n","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport PropTypes from 'prop-types'\r\nimport {\r\n  fetchMessagesList,\r\n  fetchNewMessages,\r\n  subscribeForNewMessages,\r\n  unsubscribeForNewMessages,\r\n} from '../../actions/messageListActions'\r\n\r\nimport { MessageFrame } from '../../components/MessageFrame/MessageFrame'\r\nimport { ScrollDownButton } from './__ScrollDownButton/MessageList-ScrollDownButton'\r\n\r\nimport './MessageList.sass'\r\nimport './__Item/MessageList-Item.sass'\r\nimport './__ChatNameCaption/MessageList-ChatNameCaption.sass'\r\n\r\nclass MessageList extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.messageListRef = React.createRef()\r\n\r\n    this.state = {\r\n      enableScrollDown: true,\r\n      previousMessagesLength: 0,\r\n      suspendMessagesFetching: false,\r\n      currentChat: null,\r\n      needScrollDown: true,\r\n      showScrollDownButton: false,\r\n    }\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    const { currentChat, subscribeForNewMessages } = this.props\r\n    if (this.state.currentChat !== currentChat) {\r\n      this.setState({ currentChat })\r\n      subscribeForNewMessages(this.props.currentChat._id)\r\n    }\r\n    this.fetchMessages()\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.props.unsubscribeForNewMessages()\r\n  }\r\n\r\n  componentDidUpdate = () => {\r\n    const { messages, currentChat, subscribeForNewMessages } = this.props\r\n    const scrollDownShift = 30\r\n    const { current } = this.messageListRef\r\n\r\n    if (this.state.currentChat !== currentChat) {\r\n      this.reloadMessagesList()\r\n      subscribeForNewMessages(this.props.currentChat._id)\r\n      return\r\n    }\r\n\r\n    if (!messages) return\r\n\r\n    const messagesLength = messages.length\r\n    const previousMessagesLength = this.state.previousMessagesLength\r\n\r\n    if (messagesLength <= previousMessagesLength) {\r\n      return\r\n    }\r\n\r\n    this.setState({\r\n      previousMessagesLength: messagesLength,\r\n      suspendMessagesFetching: false,\r\n    })\r\n\r\n    if (current) {\r\n      current.scrollTop += scrollDownShift\r\n    }\r\n\r\n    this.scrollDownIfNeed()\r\n  }\r\n\r\n  reloadMessagesList = () => {\r\n    this.setState({\r\n      currentChat: this.props.currentChat,\r\n      previousMessagesLength: 0,\r\n      suspendMessagesFetching: true,\r\n      needScrollDown: true,\r\n    })\r\n\r\n    this.fetchMessagesForced()\r\n  }\r\n\r\n  fetchMessages = () => {\r\n    if (this.state.suspendMessagesFetching) return\r\n\r\n    this.fetchMessagesForced()\r\n  }\r\n\r\n  fetchMessagesForced = () => {\r\n    const currentChat = this.props.currentChat\r\n    const messages = this.props.messages\r\n\r\n    if (!currentChat || !currentChat._id) return\r\n    if (!messages) return\r\n\r\n    const time = new Date().getTime()\r\n\r\n    const oldestMessageTime = messages.length ? messages[0].time : time\r\n\r\n    this.props.fetchMessagesList(currentChat._id, oldestMessageTime)\r\n  }\r\n\r\n  fetchNewMessages = () => {\r\n    const currentChat = this.props.currentChat\r\n    const messages = this.props.messages\r\n\r\n    if (!currentChat || !currentChat._id) return\r\n    if (!messages) return\r\n\r\n    const lastMessageIndex = messages.length - 1\r\n\r\n    if (lastMessageIndex < 0) {\r\n      this.fetchMessages()\r\n      return\r\n    }\r\n\r\n    this.props.fetchNewMessages(\r\n      currentChat._id,\r\n      messages[lastMessageIndex].time\r\n    )\r\n  }\r\n\r\n  scrollDownIfNeed = () => {\r\n    if (this.state.needScrollDown) {\r\n      this.setState({\r\n        needScrollDown: false,\r\n      })\r\n\r\n      this.scrollDown()\r\n    }\r\n  }\r\n\r\n  tryLoadMessagesUntilScrollAppears() {\r\n    const { current } = this.messageListRef\r\n\r\n    if (current.offsetWidth <= current.clientWidth) {\r\n      this.fetchMessages()\r\n    }\r\n  }\r\n\r\n  scrollDown = () => {\r\n    const { current } = this.messageListRef\r\n\r\n    this.setState({\r\n      needScrollDown: false,\r\n    })\r\n\r\n    if (current) {\r\n      current.scrollTop = current.scrollHeight\r\n    }\r\n  }\r\n\r\n  onScrollDownClick = () => {\r\n    this.scrollDown()\r\n  }\r\n\r\n  onScroll = () => {\r\n    const minScrollTop = 200\r\n    const scrollDownButtonThreshold = 200\r\n    const {\r\n      scrollHeight,\r\n      scrollTop,\r\n      clientHeight,\r\n    } = this.messageListRef.current\r\n\r\n    this.setState({\r\n      showScrollDownButton:\r\n        scrollHeight - scrollTop >= clientHeight + scrollDownButtonThreshold,\r\n      needScrollDown: scrollHeight - scrollTop == clientHeight,\r\n    })\r\n\r\n    if (this.state.suspendMessagesFetching) return\r\n\r\n    if (scrollTop < minScrollTop) {\r\n      this.setState({\r\n        suspendMessagesFetching: true,\r\n      })\r\n\r\n      this.fetchMessages()\r\n    }\r\n  }\r\n\r\n  renderMessageList = (messages, hasServerReceivedMessage) => {\r\n    const { currentUser } = this.props\r\n    const messagesLength = messages.length\r\n\r\n    if (messages && messagesLength) {\r\n      return messages.map(function(item, index) {\r\n        return (\r\n          <div className=\"item\" key={index}>\r\n            <MessageFrame hasServerReceivedMessage={hasServerReceivedMessage} message={item} currentUserEmail={currentUser.email} />\r\n          </div>\r\n        )\r\n      })\r\n    }\r\n  }\r\n\r\n  renderScrollDownButton = () => {\r\n    if (this.state.showScrollDownButton) {\r\n      return <ScrollDownButton onScrollDownClick={this.onScrollDownClick} />\r\n    }\r\n  }\r\n\r\n  renderChatNameCaption = () => {\r\n    const chatName = this.props.currentChat.name\r\n    if (chatName) {\r\n      return (\r\n        <div className=\"chatNameCaption\">\r\n          <div>\r\n            <span>{chatName}</span>\r\n          </div>\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const strToDecode = '&#11015'\r\n    const parser = new DOMParser()\r\n    const decodedString = parser.parseFromString(\r\n      `<!doctype html><body>${strToDecode}`,\r\n      'text/html'\r\n    ).body.textContent\r\n\r\n    const { messages, waitingMessages } = this.props\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <div\r\n          ref={this.messageListRef}\r\n          className=\"messageList\"\r\n          onScroll={this.onScroll}\r\n        >\r\n          {this.renderMessageList(messages, true)}\r\n          {this.renderMessageList(waitingMessages, false)}\r\n        </div>\r\n        {this.renderScrollDownButton()}\r\n        {this.renderChatNameCaption()}\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    messages: state.messages,\r\n    waitingMessages: state.messagesWaitingList,\r\n    currentChat: state.currentChat,\r\n    currentUser: state.currentUser,\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    fetchMessagesList: (chatId, oldestMessageTime) =>\r\n      dispatch(fetchMessagesList(chatId, oldestMessageTime)),\r\n    fetchNewMessages: (chatId, newestMessageTime) =>\r\n      dispatch(fetchNewMessages(chatId, newestMessageTime)),\r\n    subscribeForNewMessages: chatId =>\r\n      dispatch(subscribeForNewMessages(chatId)),\r\n    unsubscribeForNewMessages: () => dispatch(unsubscribeForNewMessages()),\r\n  }\r\n}\r\n\r\nMessageList.propTypes = {\r\n  messages: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      message: PropTypes.exact({\r\n        chatId: PropTypes.number.isRequired,\r\n        authorName: PropTypes.string.isRequired,\r\n        authorEmail: PropTypes.string.isRequired,\r\n        time: PropTypes.oneOfType([\r\n          PropTypes.number,\r\n          PropTypes.string,\r\n          PropTypes.instanceOf(Date),\r\n        ]).isRequired,\r\n        text: PropTypes.string.isRequired,\r\n        wasMessageReceived: PropTypes.bool,\r\n      }),\r\n    })\r\n  ),\r\n}\r\n\r\nexport { MessageList }\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MessageList)\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport './SimpleDataForm.sass'\r\n\r\nclass SimpleDataForm extends React.Component {\r\n  state = {\r\n    newData: '',\r\n  }\r\n\r\n  onSubmit = event => {\r\n    event.preventDefault()\r\n    \r\n    if(this.state.newData.trim() == ''){\r\n      return\r\n    }\r\n\r\n    this.props.onSubmitNewData(this.state.newData)\r\n\r\n    this.setState({\r\n      newData: '',\r\n    })\r\n  }\r\n\r\n  updateInputValue = eventArg => {\r\n    this.setState({\r\n      newData: eventArg.target.value,\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const { caption, name, placeholder, type, buttonCaption } = this.props\r\n\r\n    return (\r\n      <form className=\"simpleDataForm\" onSubmit={this.onSubmit}>\r\n        <h4>{caption}</h4>\r\n        <div>\r\n          <input\r\n            name={name}\r\n            placeholder={placeholder}\r\n            type={type}\r\n            value={this.state.newData}\r\n            onChange={this.updateInputValue}\r\n          />\r\n          <button type=\"submit\">{buttonCaption}</button>\r\n        </div>\r\n      </form>\r\n    )\r\n  }\r\n}\r\n\r\nSimpleDataForm.propTypes = {\r\n  onSubmitNewData: PropTypes.func.isRequired,\r\n  caption: PropTypes.string,\r\n  name: PropTypes.string.isRequired,\r\n  placeholder: PropTypes.string,\r\n  type: PropTypes.string.isRequired,\r\n  buttonCaption: PropTypes.string,\r\n}\r\n\r\nexport { SimpleDataForm }\r\n","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { encryptAndSendNewMessage } from '../../actions/messageListActions'\r\n\r\nimport MessageList from '../MessageList/MessageList'\r\nimport { SimpleDataForm } from '../../components/SimpleDataForm/SimpleDataForm'\r\n\r\nimport './CurrentChatPanel.sass'\r\n\r\nclass CurrentChatPanel extends React.Component {\r\n  renderMessageList() {\r\n    if (!this.props.currentUser._id) return\r\n    if (!this.props.currentChat._id) return\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <MessageList />\r\n        <SimpleDataForm\r\n          onSubmitNewData={this.props.sendNewMessage}\r\n          caption=\"+Message\"\r\n          name=\"userMessage\"\r\n          placeholder=\"message text\"\r\n          type=\"text\"\r\n          buttonCaption=\"Send\"\r\n        />\r\n      </React.Fragment>\r\n    )\r\n  }\r\n\r\n  render() {\r\n    return <div className=\"currentChatPanel\">{this.renderMessageList()}</div>\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    currentUser: state.currentUser,\r\n    currentChat: state.currentChat,\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    sendNewMessage: message => dispatch(encryptAndSendNewMessage(message)),\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CurrentChatPanel)\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport './ChatList-ChatFrame.sass'\r\n\r\nclass ChatFrame extends React.Component {\r\n  onSelectChat = () => {\r\n    const { chat } = this.props\r\n\r\n    this.props.onSelectChat(chat)\r\n  }\r\n\r\n  renderUsersList = users => {\r\n    if (users && users.length) {\r\n      return users.map((item, index) => {\r\n        return (\r\n          <div key={index}>\r\n            <p>{item.name}</p>\r\n          </div>\r\n        )\r\n      })\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { chat } = this.props\r\n\r\n    return (\r\n      <div className=\"chatList-ChatFrame\" onClick={this.onSelectChat}>\r\n        <div>\r\n          <h4>{chat.name}</h4>\r\n        </div>\r\n        <div>\r\n          <p>Chat members:</p>\r\n          <div>{this.renderUsersList(chat.users)}</div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nChatFrame.propTypes = {\r\n  chat: PropTypes.exact({\r\n    _id: PropTypes.string.isRequired,\r\n    name: PropTypes.string.isRequired,\r\n    users: PropTypes.arrayOf(\r\n      PropTypes.exact({\r\n        _id: PropTypes.string.isRequired,\r\n        name: PropTypes.string.isRequired,\r\n        email: PropTypes.string.isRequired,\r\n      })\r\n    ).isRequired,\r\n  }),\r\n  onSelectChat: PropTypes.func.isRequired,\r\n}\r\n\r\nexport { ChatFrame }\r\n","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport {\r\n  fetchChatsList,\r\n  tryGetPreprocessorAnd–°hangeCurrentChat,\r\n} from '../../actions/chatSettingsActions'\r\n\r\nimport { ChatFrame } from './__ChatFrame/ChatList-ChatFrame'\r\n\r\nimport './ChatList.sass'\r\n\r\nclass ChatList extends React.Component {\r\n  componentDidMount() {\r\n    let userId = this.props.currentUser._id\r\n\r\n    if (!userId) return\r\n\r\n    this.props.fetchChatsList(userId)\r\n  }\r\n\r\n  renderChatList = () => {\r\n    const { chatsList, changeCurrentChat } = this.props\r\n\r\n    if (chatsList && chatsList.length) {\r\n      return chatsList.map(function(item) {\r\n        return (\r\n          <ChatFrame\r\n            onSelectChat={changeCurrentChat}\r\n            key={item._id}\r\n            chat={item}\r\n          />\r\n        )\r\n      })\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return <div className=\"—ÅhatList\">{this.renderChatList()}</div>\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    chatsList: state.chatsList,\r\n    currentUser: state.currentUser,\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    fetchChatsList: userId => dispatch(fetchChatsList(userId)),\r\n    changeCurrentChat: chat =>\r\n      dispatch(tryGetPreprocessorAnd–°hangeCurrentChat(chat)),\r\n  }\r\n}\r\n\r\nChatList.propTypes = {\r\n  chatsList: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      chat: PropTypes.exact({\r\n        _id: PropTypes.string.isRequired,\r\n        name: PropTypes.string.isRequired,\r\n        users: PropTypes.arrayOf(\r\n          PropTypes.shape({\r\n            _id: PropTypes.string.isRequired,\r\n            name: PropTypes.string.isRequired,\r\n            email: PropTypes.string.isRequired,\r\n          })\r\n        ).isRequired,\r\n      }),\r\n    })\r\n  ),\r\n  changeCurrentChat: PropTypes.func.isRequired,\r\n}\r\n\r\nexport { ChatList }\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ChatList)\r\n","import React from 'react'\r\nimport { connect } from 'react-redux'\r\n\r\nimport ChatList from '../ChatList/ChatList'\r\nimport { SimpleDataForm } from '../../components/SimpleDataForm/SimpleDataForm'\r\n\r\nimport { createNewChat } from '../../actions/chatSettingsActions'\r\n\r\nimport './UserChatsPanel.sass'\r\n\r\nclass UserChatsPanel extends React.Component {\r\n  onSubmitNewChat = chatName => {\r\n    this.props.createNewChat(chatName, [this.props.currentUser._id])\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"userChatsPanel\">\r\n        <ChatList />\r\n        <SimpleDataForm\r\n          onSubmitNewData={this.onSubmitNewChat}\r\n          caption=\"+Chat\"\r\n          name=\"chatName\"\r\n          placeholder=\"chat name\"\r\n          type=\"text\"\r\n          buttonCaption=\"Create\"\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    currentUser: state.currentUser,\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    createNewChat: (chatName, usersIds) =>\r\n      dispatch(createNewChat(chatName, usersIds)),\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UserChatsPanel)\r\n","import React from 'react'\r\n\r\nimport CurrentChatPanel from '../../CurrentChatPanel/CurrentChatPanel'\r\nimport UserChatsPanel from '../../UserChatsPanel/UserChatsPanel'\r\n\r\nimport './AppPanel-MainPanel.sass'\r\n\r\nfunction MainPanel() {\r\n  return (\r\n    <div className=\"mainPanel\">\r\n      <UserChatsPanel />\r\n      <CurrentChatPanel />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport { MainPanel }\r\n","import React from 'react'\r\nimport { withRouter } from 'react-router-dom'\r\n\r\nimport { TopPanel } from './__TopPanel/AppPanel-TopPanel'\r\nimport { MainPanel } from './__MainPanel/AppPanel-MainPanel'\r\n\r\nimport { connect } from 'react-redux'\r\n\r\nimport './AppPanel.sass'\r\n\r\nclass AppPanel extends React.Component {\r\n  componentDidUpdate = () => {\r\n    const { isUserAuthenticated, history } = this.props\r\n\r\n    if (!isUserAuthenticated) {\r\n      history.push('/login')\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"appPanel\">\r\n        <div className=\"mainPanelPlace\">\r\n          <MainPanel />\r\n        </div>\r\n        <div className=\"topPanelPlace\">\r\n          <TopPanel />\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    isUserAuthenticated: state.isUserAuthenticated,\r\n  }\r\n}\r\n\r\nconst AppPanelWithRouter = withRouter(AppPanel)\r\nexport default connect(mapStateToProps)(AppPanelWithRouter)\r\n","import React from 'react'\r\nimport { Route, Switch, withRouter } from 'react-router-dom'\r\n\r\nimport { asModalWindow } from '../components/ModalWindow/asModalWindow'\r\nimport AuthenticationAndRegistrationWindow from './AuthenticationAndRegistrationWindow/AuthenticationAndRegistrationWindow'\r\nimport { ErrorWindow } from '../components/ErrorWindow/ErrorWindow'\r\nimport AppPanel from './AppPanel/AppPanel'\r\n\r\nimport { connect } from 'react-redux'\r\n\r\nimport {\r\n  checkIsUserAuthenticated,\r\n  submitUserEmailAndPassword,\r\n  submitNewUser,\r\n  clearLastError,\r\n  resetAuthenticationResult,\r\n} from '../actions/chatSettingsActions'\r\n\r\nconst ErrorModalWindow = asModalWindow(ErrorWindow)\r\n\r\nclass App extends React.Component {\r\n  componentDidMount() {\r\n    const { isUserAuthenticated, checkIsUserAuthenticated } = this.props\r\n\r\n    checkIsUserAuthenticated()\r\n\r\n    if (isUserAuthenticated) {\r\n      this.props.history.push('/chat')\r\n    } else {\r\n      this.props.history.push('/login')\r\n    }\r\n  }\r\n\r\n  renderErrorWindow() {\r\n    if (!this.props.lastError) return\r\n\r\n    return (\r\n      <ErrorModalWindow\r\n        onOk={this.props.clearLastError}\r\n        lastError={this.props.lastError}\r\n      />\r\n    )\r\n  }\r\n\r\n  renderMainContent() {\r\n    return (\r\n      <Switch>\r\n        <Route\r\n          exact\r\n          path=\"/login\"\r\n          render={() => <AuthenticationAndRegistrationWindow />}\r\n        />\r\n        <Route path=\"/chat\" component={AppPanel} />\r\n      </Switch>\r\n    )\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        {this.renderErrorWindow()}\r\n        {this.renderMainContent()}\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    isUserAuthenticated: state.isUserAuthenticated,\r\n    lastError: state.lastError,\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    checkIsUserAuthenticated: () => dispatch(checkIsUserAuthenticated()),\r\n    submitUserEmailAndPassword: (userEmail, userPassword) =>\r\n      dispatch(submitUserEmailAndPassword(userEmail, userPassword)),\r\n    submitNewUser: user => dispatch(submitNewUser(user)),\r\n    clearLastError: () => dispatch(clearLastError()),\r\n    onSignOut: () => dispatch(resetAuthenticationResult()),\r\n  }\r\n}\r\n\r\nconst AppWithRouter = withRouter(App)\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AppWithRouter)\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport './ErrorWindow.sass'\r\n\r\nfunction ErrorWindow(props) {\r\n  const { status, badStatusText, message } = props.lastError\r\n\r\n  let statusParagraph, badStatusTextParagraph, messageParagraph\r\n\r\n  if (status) {\r\n    statusParagraph = <p>Status: {status}</p>\r\n    badStatusTextParagraph = <p>Status text: {badStatusText}</p>\r\n    messageParagraph = <p>Message: {message}</p>\r\n  }\r\n\r\n  return (\r\n    <div className=\"errorWindow\">\r\n      <div>\r\n        <h4>Error</h4>\r\n      </div>\r\n      <div>\r\n        {statusParagraph}\r\n        {badStatusTextParagraph}\r\n        {messageParagraph}\r\n      </div>\r\n      <button onClick={props.onOk}>Ok</button>\r\n    </div>\r\n  )\r\n}\r\n\r\nErrorWindow.propTypes = {\r\n  lastError: PropTypes.exact({\r\n    status: PropTypes.number,\r\n    badStatusText: PropTypes.string,\r\n    message: PropTypes.string,\r\n  }),\r\n}\r\n\r\nexport { ErrorWindow }\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n)\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config)\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          )\r\n        })\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing\r\n        if (installingWorker == null) {\r\n          return\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              )\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration)\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.')\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration)\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error)\r\n    })\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type')\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload()\r\n          })\r\n        })\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      )\r\n    })\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister()\r\n    })\r\n  }\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport { Provider } from 'react-redux'\r\nimport { BrowserRouter } from 'react-router-dom'\r\nimport configureStore from './store/configureStore'\r\nimport './index.css'\r\nimport App from './containers/App'\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\nconst store = configureStore()\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </BrowserRouter>,\r\n  document.getElementById('root')\r\n)\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n","import { createStore, applyMiddleware } from 'redux'\r\nimport thunk from 'redux-thunk'\r\nimport rootReducer from '../reducers'\r\nimport wsMiddleware from '../middleware/webSocketMiddleware'\r\n\r\nexport default function configureStore(initialState) {\r\n  return createStore(rootReducer, applyMiddleware(thunk, wsMiddleware))\r\n}\r\n"],"sourceRoot":""}