{"version":3,"sources":["applicationSettings.js","actions/helper.js","actions/chatSettingsActions.js","actions/messageListActions.js","reducers/index.js","reducers/messageListData.js","reducers/chatSettings.js","middleware/webSocketMiddleware.js","actions/webSocketActions.js","components/NewChatForm/NewChatForm.js","components/helper.js","components/MessageFrame/__MessageTimestamp/MessageFrame-MessageTimestamp.js","components/MessageFrame/__AuthorNameLabel/MessageFrame-AuthorNameLabel.js","components/MessageFrame/__MessageTextField/MessageFrame-MessageTextField.js","components/MessageFrame/MessageFrame.js","containers/MessageList/__ScrollDownButton/MessageList-ScrollDownButton.js","components/NewMessageForm/NewMessageForm.js","containers/MessageList/MessageList.js","containers/ChatList/__ChatFrame/ChatList-ChatFrame.js","containers/ChatList/ChatList.js","components/ModalWindow/asModalWindow.js","components/UserFrame/UserFrame.js","components/InputField/InputField.js","components/AddToChatNewUserWindow/__SeekForm/AddToChatNewUserWindow-SeekForm.js","components/AddToChatNewUserWindow/AddToChatNewUserWindow.js","components/SpecialMessagesPreprocessorMenu/SpecialMessagesPreprocessorMenu.js","containers/CurrentChatSettings.js","components/AuthenticationAndRegistrationForm/AuthenticationAndRegistrationForm.js","components/AuthenticationAndRegistrationWindow/AuthenticationAndRegistrationWindow.js","components/SettingsPanel/SettingsPanel.js","containers/App.js","components/ErrorWindow/ErrorWindow.js","serviceWorker.js","index.js","store/configureStore.js"],"names":["serverLocation","httpHeadersWithoutToken","Accept","createHttpHeadersWithToken","token","Authorization","checkResponseAndCreateErrorIfBadStatus","response","ok","status","badStatusText","statusText","message","validateEmail","email","test","readTextFile","file","Promise","resolve","reject","reader","FileReader","onload","result","onerror","readAsText","convertMessages","messages","convertor","map","item","text","getUserToken","a","localStorage","userJson","JSON","parse","user","changeCurrentUser","type","payload","changeCurrentChat","chat","setAuthenticationResult","handleServerError","serverErrorData","dispatch","resetAuthenticationResult","setLastError","errorData","removeItem","addNewSpecialMessagesPreprocessorFunction","forwardPreprocessorFunction","backwardPreprocessorFunction","tryGetPreprocessorAnd–°hangeCurrentChat","preprocessorString","getItem","_id","preprocessor","Function","forward","backward","fetchChatsList","userId","fetch","method","headers","data","json","console","log","addNewMessage","messageWasReceived","bool","encryptAndSendNewMessage","getState","currentChat","time","Date","getTime","authorEmail","currentUser","authorName","name","chatId","body","stringify","wasMessageReceived","sendNewMessage","applyBackwardPreprocessorFunctionAndPushMessage","pushNewMessages","combineReducers","state","action","previousMessages","newMessages","chatsList","isUserAuthenticated","lastError","usersList","webSocketMiddleware","socket","store","next","close","WebSocket","onmessage","event","actionType","onMessage","onclose","onClose","onopen","target","url","onOpen","NewChatForm","users","onSubmit","preventDefault","props","onSubmitNewChat","currentUserId","setState","updateChatNameValue","eventArg","value","this","placeholder","onChange","React","Component","addLeadZero","number","MessageTimestamp","date","hours","getHours","minutes","getMinutes","day","getDate","month","getMonth","year","getFullYear","className","AuthorNameLabel","MessageTextField","MessageFrame","renderAuthorName","currentUserEmail","messageFrameClass","ScrollDownButton","decodedString","DOMParser","parseFromString","textContent","onClick","onScrollDownClick","NewMessageForm","newMessage","onSubmitNewMessage","updateInputValue","MessageList","componentDidMount","subscribeForNewMessages","fetchMessages","componentDidUpdate","current","messageListRef","reloadMessagesList","messagesLength","length","previousMessagesLength","suspendMessagesFetching","scrollTop","scrollDownIfNeed","needScrollDown","fetchMessagesForced","oldestMessageTime","fetchMessagesList","fetchNewMessages","lastMessageIndex","scrollDown","scrollHeight","onScroll","clientHeight","showScrollDownButton","renderMessageList","index","key","renderScrollDownButton","createRef","enableScrollDown","unsubscribeForNewMessages","offsetWidth","clientWidth","ref","connect","newestMessageTime","ChatFrame","onSelectChat","renderUsersList","ChatList","renderChatList","asModalWindow","UserFrame","onUserClick","InputField","caption","SeekForm","userSeekData","onSubmitUserSeekData","searchQueryString","updateSearchQueryString","align","AddToChatNewUserWindow","findUsers","onCancelClick","SpecialMessagesPreprocessorMenu","filePath","updateMessagesPreprocessorFile","files","AddToChatNewUserModalWindow","SpecialMessagesPreprocessorModalWindow","CurrentChatSettings","onAddUserButtonClick","showAddedUserMenu","onAddSpecialMessagesPreprocessorButtonClick","showSpecialMessagesPreprocessorMenu","addNewUserToCurrentChat","cancelUserAdding","addNewSpecialMessagesPreprocessor","preprocessorFunctionString","cancelSpecialMessagesPreprocessorAdding","renderAddedUserWindow","Fragment","newUserId","str","trim","setItem","AuthenticationAndRegistrationForm","password","isRegistrationMode","onAuthenticationSubmit","onRegistrationSubmit","updateUserEmailValue","updateUserNameValue","updateUserPasswordValue","changeMode","checked","renderHeader","headerText","renderUserNameInputField","renderSubmitButton","buttonText","AuthenticationAndRegistrationWindow","SettingsPanel","onSignOut","currentUserName","ErrorModalWindow","statusParagraph","badStatusTextParagraph","messageParagraph","onOk","App","checkIsUserAuthenticated","createNewChat","clearLastError","renderChatListNewChatForm","submitUserEmailAndPassword","submitNewUser","renderErrorWindow","renderMainContent","chatName","usersIds","newChatData","userEmail","userPassword","userAuthenticationData","Boolean","window","location","hostname","match","createStore","rootReducer","applyMiddleware","thunk","wsMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0oBAAaA,EAAiB,yB,QCAjBC,EAA0B,CACrCC,OAAQ,mBACR,eAAgB,oBAGX,SAASC,EAA2BC,GACzC,MAAO,CACLF,OAAQ,mBACR,eAAgB,mBAChBG,cAAc,UAAD,OAAYD,IAItB,SAASE,EAAuCC,GACrD,IAAIA,EAASC,GAKX,MAAO,CACLC,OAHsCF,EAAhCE,OAINC,cAJsCH,EAAxBI,WAKdC,QALsCL,EAAZK,SAUzB,SAASC,EAAcC,GAG5B,MAFY,8DAEDC,KAAKD,GAGX,SAASE,EAAaC,GAC3B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAIC,EAAS,IAAIC,WACjBD,EAAOE,OAAS,WACdJ,EAAQE,EAAOG,SAEjBH,EAAOI,QAAUL,EACjBC,EAAOK,WAAWT,MAYf,SAASU,EAAgBC,EAAUC,GAQxC,OAPIA,IACFD,EAAWA,EAASE,KAAI,SAAAC,GACtB,IAAMC,EAAOH,EAAUE,EAAKC,MAC5B,OAAO,eAAKD,EAAZ,CAAkBC,aAIfJ,EAGF,SAAeK,IAAtB,+B,4CAAO,gCAAAC,EAAA,2DACgBC,aAAbC,EADH,EACGA,SADH,yCAGiB,MAHjB,uBAKcC,KAAKC,MAAMF,GALzB,UAKCG,EALD,gDAOa,MAPb,gCASEA,EAAKnC,MAAQmC,EAAKnC,MAAQ,MAT5B,4C,sBC/BA,SAASoC,EAAkBD,GAChC,MAAO,CACLE,KAZ+B,sBAa/BC,QAASH,GAIN,SAASI,EAAkBC,GAChC,MAAO,CACLH,KAlB+B,sBAmB/BC,QAASE,GAWN,SAASC,EAAwBrB,GACtC,MAAO,CACLiB,KA9BqC,4BA+BrCC,QAASlB,GAIN,SAASsB,EAAkBC,GAChC,OAAO,SAAAC,GAC0B,MAA3BD,EAAgBtC,QAClBuC,EAASC,KAGXD,EAASE,EAAaH,KAInB,SAASG,EAAaC,GAC3B,MAAO,CACLV,KA9C0B,iBA+C1BC,QAASS,GAWN,SAASF,IACd,OAAO,SAAAD,GACLb,aAAaiB,WAAW,YACxBJ,EAASH,GAAwB,KAU9B,SAASQ,EACdC,EACAC,GAEA,MAAO,CACLd,KAxEF,iDAyEEC,QAAS,CACPY,8BACAC,iCA+DC,SAASC,EAAuCZ,GACrD,OAAO,SAAAI,GACL,IAEIM,EAA6BC,EAF3BE,EAAqBtB,aAAauB,QAAQd,EAAKe,KAIrD,GAAIF,EAAoB,CACtB,IAAMG,EAAevB,KAAKC,MAAMmB,GAEhCH,EAA8B,IAAIO,SAAS,OAAQD,EAAaE,SAChEP,EAA+B,IAAIM,SAAS,OAAQD,EAAaG,UAGnEf,EAASL,EAAkBC,IAC3BI,EC3JK,CACLP,KAJ0B,mBDgKtBa,GAA+BC,GACjCP,EACEK,EACEC,EACAC,KA+CH,SAASS,EAAeC,GAC7B,8CAAO,WAAMjB,GAAN,mBAAAd,EAAA,+EAEiBD,IAFjB,UAEG7B,EAFH,wEAMoB8D,MAAM,GAAD,OACvBlE,GADuB,OF3OF,qBE2OE,oBACsBiE,GAChD,CACEE,OAAQ,MACRC,QAASjE,EAA2BC,KAVrC,UAMGG,EANH,OAcC8D,EAAO/D,EAAuCC,GAd/C,kCAiBYA,EAAS+D,OAjBrB,QAiBDD,EAjBC,eAoBCA,EAAK3D,eACPsC,EAASF,EAAkBuB,IAC3BlC,aAAaiB,WAAW,SACxBjB,aAAaiB,WAAW,aAExBJ,EAtNC,CACLP,KAxB8B,qBAyB9BC,QAoN8B2B,IAzBzB,kDA4BHE,QAAQC,IAAI,QAAZ,MA5BG,0DAAP,sDC5MK,SAASC,EAAc7D,GAC5B,MAAO,CACL6B,KAf2B,kBAgB3BC,QAAS9B,GAIN,SAAS8D,EAAmBC,GACjC,MAAO,CACLlC,KArBgC,uBAsBhCC,QAASiC,GAyBN,SAASC,EAAyB5C,GACvC,OAAO,SAACgB,EAAU6B,GAAc,IACtBvB,EAAgCuB,IAAWC,YAA3CxB,4BAEJA,IACFtB,EAAOsB,EAA4BtB,IAGrCgB,EAIG,SAAwBhB,GAC7B,8CAAO,WAAOgB,EAAU6B,GAAjB,6BAAA3C,EAAA,+EAEiBD,IAFjB,UAEG7B,EAFH,+DAMH4C,EAAS0B,GAAmB,IAEtBK,GAAO,IAAIC,MAAOC,UAClBC,EAAcL,IAAWM,YAAYrE,MACrCsE,EAAaP,IAAWM,YAAYE,KACpCC,EAAST,IAAWC,YAAYnB,IAEhC/C,EAAU,CACd0E,SACAP,OACAG,cACAE,aACApD,QAlBC,UAqBoBkC,MAAMlE,EHlGJ,gBGkGsC,CAC7DmE,OAAQ,OACRC,QAASjE,EAA2BC,GACpCmF,KAAMlD,KAAKmD,UAAU5E,KAxBpB,WAqBGL,EArBH,OA2BC8D,EAAO/D,EAAuCC,GA3B/C,kCA8BYA,EAAS+D,OA9BrB,QA8BDD,EA9BC,eAiCCA,EAAK5D,QACPuC,EAASF,EAAkBuB,IAC3BzD,EAAQ6E,oBAAqB,EAC7BzC,EAASyB,EAAc7D,IACvBuB,aAAaiB,WAAW,WAExBxC,EAAQ6E,oBAAqB,EAE7BzC,EAAS0B,GAAmB,KAzC3B,kDA4CHH,QAAQC,IAAI,QAAZ,MA5CG,0DAAP,wDALWkB,CAAe1D,KA0HrB,SAAS2D,EAAgD/D,GAC9D,OAAO,SAACoB,EAAU6B,GAAc,IACtBtB,EAAiCsB,IAAWC,YAA5CvB,6BAEJA,IACF3B,EAAWD,EAAgBC,EAAU2B,IAGvCP,EAjJG,SAAyBpB,GAC9B,MAAO,CACLa,KAvC6B,oBAwC7BC,QAASd,GA8IAgE,CAAgBhE,KClMdiE,kBAAgB,CAC7BjE,SCHK,WAAuC,IAArBkE,EAAoB,uDAAZ,GAAIC,EAAQ,uCAC3C,OAAQA,EAAOtD,MACb,IFa0B,iBEZxB,MAAO,GACT,IFM2B,kBELzB,MAAM,GAAN,mBAAWqD,GAAX,CAAkBC,EAAOrD,UAC3B,IFMiC,wBEL/B,OAAOqD,EAAOrD,QAChB,IFKqC,4BEJnC,IAAMsD,EAAmBD,EAAOrD,QAChC,MAAM,GAAN,mBAAWsD,GAAX,YAAgCF,IAClC,IFG6B,oBEF3B,IAAMG,EAAcF,EAAOrD,QAC3B,MAAM,GAAN,mBAAWoD,GAAX,YAAqBG,IACvB,QACE,OAAOH,IDXXL,mBCeK,WAAmD,IAAvBK,IAAsB,yDAARC,EAAQ,uCACvD,OAAQA,EAAOtD,MACb,IFVgC,uBEW9B,OAAOsD,EAAOrD,QAChB,QACE,OAAOoD,IDnBXX,YEHK,WAA0C,IAArBW,EAAoB,uDAAZ,GAAIC,EAAQ,uCAC9C,OAAQA,EAAOtD,MACb,IJS+B,sBIR7B,OAAOsD,EAAOrD,QAChB,QACE,OAAOoD,IFDXhB,YEKK,WAA0C,IAArBgB,EAAoB,uDAAZ,GAAIC,EAAQ,uCAC9C,OAAQA,EAAOtD,MACb,IJC+B,sBIA7B,OAAOsD,EAAOrD,QAChB,IJMF,iDILI,OAAO,eAAKoD,EAAZ,GAAsBC,EAAOrD,SAC/B,QACE,OAAOoD,IFXXI,UEeK,WAAwC,IAArBJ,EAAoB,uDAAZ,GAAIC,EAAQ,uCAC5C,OAAQA,EAAOtD,MACb,IJT8B,qBIU5B,OAAOsD,EAAOrD,QAChB,QACE,OAAOoD,IFnBXK,oBEuBK,WAAqD,IAAxBL,EAAuB,wDAARC,EAAQ,uCACzD,OAAQA,EAAOtD,MACb,IJjBqC,4BIkBnC,OAAOsD,EAAOrD,QAChB,QACE,OAAOoD,IF3BXM,UE+BK,WAA0C,IAAvBN,EAAsB,uDAAd,KAAMC,EAAQ,uCAC9C,OAAQA,EAAOtD,MACb,IJzB0B,iBI0BxB,OAAOsD,EAAOrD,QAChB,IJzB4B,mBI0B1B,OAAO,KACT,QACE,OAAOoD,IFrCXO,UEyCK,WAAwC,IAArBP,EAAoB,uDAAZ,GAAIC,EAAQ,uCAC5C,OAAQA,EAAOtD,MACb,IJnCiC,wBIoC/B,OAAOsD,EAAOrD,QAChB,QACE,OAAOoD,MCLEQ,EAnDa,WAC1B,IAAIC,EAAS,KAyBb,OAAO,SAAAC,GAAK,OAAI,SAAAC,GAAI,OAAI,SAAAV,GACtB,OAAQA,EAAOtD,MACb,ICrCoB,aDsCH,OAAX8D,GACFA,EAAOG,SAGTH,EAAS,IAAII,UAAUZ,EAAOrD,UACvBkE,UAvBK,SAAAJ,GAAK,OAAI,SAAAK,GACzB,IAAMxC,EAAOhC,KAAKC,MAAMuE,EAAMxC,MAE9B,OAAQA,EAAKyC,YACX,IAAK,OACH,IAAMlF,EAAW,CAACyC,EAAKzD,SACvB4F,EAAMxD,SACJ2C,EAAgD/D,MAgB/BmF,CAAUP,GAC7BD,EAAOS,QA5BG,SAAAR,GAAK,OAAI,WACvBA,EAAMxD,SCeD,CACLP,KA7B2B,qBDwCNwE,CAAQT,GACzBD,EAAOW,OAjCE,SAAAV,GAAK,OAAI,SAAAK,GACtBL,EAAMxD,UAAqB6D,EAAMM,OAAOC,ICOnC,CACL3E,KAnBwB,mBD2CJ4E,CAAOb,GACvB,MACF,IC5CuB,gBD6CN,OAAXD,GACFA,EAAOG,QAGTH,EAAS,KACT,MACF,QACE,OAAOE,EAAKV,OAKLO,G,sCEzDTgB,E,4MACJxB,MAAQ,CACNT,KAAM,GACNkC,MAAO,I,EAGTC,SAAW,SAAAX,GACTA,EAAMY,iBAEN,EAAKC,MAAMC,gBAAgB,EAAK7B,MAAMT,KAAM,CAAC,EAAKqC,MAAME,gBAExD,EAAKC,SAAS,CACZxC,KAAM,GACNkC,MAAO,M,EAIXO,oBAAsB,SAAAC,GACpB,EAAKF,SAAS,CACZxC,KAAM0C,EAASZ,OAAOa,S,uDAKxB,OACE,0BAAMR,SAAUS,KAAKT,UACnB,qCACA,2BACEnC,KAAK,WACL6C,YAAY,YACZzF,KAAK,OACLuF,MAAOC,KAAKnC,MAAMT,KAClB8C,SAAUF,KAAKH,sBAEjB,4BAAQrF,KAAK,UAAb,wB,GAlCkB2F,IAAMC,WCHzB,SAASC,EAAYC,GAC1B,OAAIA,EAAS,GAAW,IAAMA,EACvBA,E,MCIT,SAASC,EAAiBd,GACxB,IAAMe,EAAO,IAAIzD,KAAK0C,EAAM3C,MACxB2D,EAAQJ,EAAYG,EAAKE,YACzBC,EAAUN,EAAYG,EAAKI,cAC3BC,EAAMR,EAAYG,EAAKM,WACvBC,EAAQV,EAAYG,EAAKQ,WAAa,GACtCC,EAAOT,EAAKU,cAEhB,OACE,yBAAKC,UAAU,iCACb,8BACGV,EADH,IACWE,EADX,IACqBE,EADrB,IAC2BE,EAD3B,IACmCE,I,MCZzC,SAASG,EAAgB3B,GACvB,OACE,0BAAM0B,UAAU,gCAAgC1B,EAAMtC,YCJ1D,SAASkE,EAAiB5B,GACxB,OAAO,8BAAOA,EAAM1F,M,sBCMhBuH,E,4MACJC,iBAAmB,WAAO,IAAD,EACe,EAAK9B,MAAnC9G,EADe,EACfA,QAER,OAHuB,EACN6I,mBAEQ7I,EAAQsE,iBAC/B,EAEO,kBAACmE,EAAD,CAAiBjE,WAAYxE,EAAQwE,c,uDAItC,IAAD,EAC+B6C,KAAKP,MAAnC9G,EADD,EACCA,QACJ8I,EAAoB,eAQxB,OAVO,EACUD,mBAGQ7I,EAAQsE,YAC/BwE,GAAqB,6BAErBA,GAAqB,6BAIrB,yBAAKN,UAAWM,GACd,6BAAMzB,KAAKuB,oBACX,6BACE,kBAACF,EAAD,CAAkBtH,KAAMpB,EAAQoB,QAElC,6BACE,kBAACwG,EAAD,CAAkBzD,KAAMnE,EAAQmE,a,GA5BfqD,IAAMC,W,MCLjC,SAASsB,EAAiBjC,GACxB,IAEMkC,GADS,IAAIC,WACUC,gBAAP,+BAFF,WAIlB,aACAvE,KAAKwE,YAEP,OACE,yBAAKX,UAAU,mBAAmBY,QAAStC,EAAMuC,mBAC9CL,G,ICZDM,E,4MACJpE,MAAQ,CACNqE,WAAY,I,EAGd3C,SAAW,SAAAX,GACTA,EAAMY,iBAEN,EAAKC,MAAM0C,mBAAmB,EAAKtE,MAAMqE,YAEzC,EAAKtC,SAAS,CACZsC,WAAY,M,EAIhBE,iBAAmB,SAAAtC,GACjB,EAAKF,SAAS,CACZsC,WAAYpC,EAASZ,OAAOa,S,uDAK9B,OACE,0BAAMoB,UAAU,oBAAoB5B,SAAUS,KAAKT,UACjD,wCACA,2BACEnC,KAAK,cACL6C,YAAY,eACZzF,KAAK,OACLuF,MAAOC,KAAKnC,MAAMqE,WAClBhC,SAAUF,KAAKoC,mBAEjB,4BAAQ5H,KAAK,UAAb,qB,GAhCqB2F,IAAMC,WCa7BiC,G,wDACJ,WAAY5C,GAAQ,IAAD,8BACjB,cAAMA,IAcR6C,kBAAoB,WAAO,IAAD,EACyB,EAAK7C,MAA9C5C,EADgB,EAChBA,YAAa0F,EADG,EACHA,wBACjB,EAAK1E,MAAMhB,cAAgBA,IAC7B,EAAK+C,SAAS,CAAE/C,gBAChB0F,EAAwB,EAAK9C,MAAM5C,YAAYnB,MAEjD,EAAK8G,iBArBY,EAqCnBC,mBAAqB,WAAO,IAAD,EACkC,EAAKhD,MAAxD9F,EADiB,EACjBA,SAAUkD,EADO,EACPA,YAAa0F,EADN,EACMA,wBAEvBG,EAAY,EAAKC,eAAjBD,QAER,GAAI,EAAK7E,MAAMhB,cAAgBA,EAG7B,OAFA,EAAK+F,0BACLL,EAAwB,EAAK9C,MAAM5C,YAAYnB,KAIjD,GAAK/B,EAAL,CAEA,IAAMkJ,EAAiBlJ,EAASmJ,OAG5BD,GAF2B,EAAKhF,MAAMkF,yBAM1C,EAAKnD,SAAS,CACZmD,uBAAwBF,EACxBG,yBAAyB,IAGvBN,IACFA,EAAQO,WAxBc,IA2BxB,EAAKC,sBAlEY,EAqEnBN,mBAAqB,WACnB,EAAKhD,SAAS,CACZ/C,YAAa,EAAK4C,MAAM5C,YACxBkG,uBAAwB,EACxBC,yBAAyB,EACzBG,gBAAgB,IAGlB,EAAKC,uBA7EY,EAgFnBZ,cAAgB,WACV,EAAK3E,MAAMmF,yBAEf,EAAKI,uBAnFY,EAsFnBA,oBAAsB,WACpB,IAAMvG,EAAc,EAAK4C,MAAM5C,YACzBlD,EAAW,EAAK8F,MAAM9F,SAE5B,GAAKkD,GAAgBA,EAAYnB,KAC5B/B,EAAL,CAEA,IAAMmD,GAAO,IAAIC,MAAOC,UAElBqG,EAAoB1J,EAASmJ,OAASnJ,EAAS,GAAGmD,KAAOA,EAE/D,EAAK2C,MAAM6D,kBAAkBzG,EAAYnB,IAAK2H,KAjG7B,EAoGnBE,iBAAmB,WACjB,IAAM1G,EAAc,EAAK4C,MAAM5C,YACzBlD,EAAW,EAAK8F,MAAM9F,SAE5B,GAAKkD,GAAgBA,EAAYnB,KAC5B/B,EAAL,CAEA,IAAM6J,EAAmB7J,EAASmJ,OAAS,EAEvCU,EAAmB,EACrB,EAAKhB,gBAIP,EAAK/C,MAAM8D,iBACT1G,EAAYnB,IACZ/B,EAAS6J,GAAkB1G,QApHZ,EAwHnBoG,iBAAmB,WACb,EAAKrF,MAAMsF,iBACb,EAAKvD,SAAS,CACZuD,gBAAgB,IAGlB,EAAKM,eA9HU,EA0InBA,WAAa,WAAO,IACVf,EAAY,EAAKC,eAAjBD,QAER,EAAK9C,SAAS,CACZuD,gBAAgB,IAGdT,IACFA,EAAQO,UAAYP,EAAQgB,eAlJb,EAsJnB1B,kBAAoB,WAClB,EAAKyB,cAvJY,EA0JnBE,SAAW,WACT,IADe,EAOX,EAAKhB,eAAeD,QAHtBgB,EAJa,EAIbA,aACAT,EALa,EAKbA,UACAW,EANa,EAMbA,aAGF,EAAKhE,SAAS,CACZiE,qBACEH,EAAeT,GAAaW,EATE,MAY9B,EAAK/F,MAAMmF,yBAEXC,EAfiB,MAgBnB,EAAKrD,SAAS,CACZoD,yBAAyB,IAG3B,EAAKR,kBA/KU,EAmLnB/E,eAAiB,SAAAyE,GACf,EAAKzC,MAAMhC,eAAeyE,GAE1B,EAAKtC,SAAS,CACZuD,gBAAgB,KAvLD,EA2LnBW,kBAAoB,WAAO,IAAD,EACU,EAAKrE,MAA/B9F,EADgB,EAChBA,SAAUuD,EADM,EACNA,YACZ2F,EAAiBlJ,EAASmJ,OAEhC,GAAInJ,GAAYkJ,EACd,OAAOlJ,EAASE,KAAI,SAASC,EAAMiK,GACjC,OACE,yBAAKC,IAAKD,GACR,kBAAC,EAAD,CAAcpL,QAASmB,EAAM0H,iBAAkBtE,EAAYrE,aAnMlD,EA0MnBoL,uBAAyB,WACvB,GAAI,EAAKpG,MAAMgG,qBACb,OAAO,kBAACnC,EAAD,CAAkBM,kBAAmB,EAAKA,qBAzMnD,EAAKW,eAAiBxC,IAAM+D,YAE5B,EAAKrG,MAAQ,CACXsG,kBAAkB,EAClBpB,uBAAwB,EACxBC,yBAAyB,EACzBnG,YAAa,KACbsG,gBAAgB,EAChBU,sBAAsB,GAXP,E,mEAiCjB7D,KAAKP,MAAM2E,8B,0DAiGwB,IAC3B1B,EAAY1C,KAAK2C,eAAjBD,QAEJA,EAAQ2B,aAAe3B,EAAQ4B,aACjCtE,KAAKwC,kB,gCA4EQ,IAAIZ,WACUC,gBAAP,+BAFF,WAIlB,aACAvE,KAAKwE,YAEP,OACE,6BACG9B,KAAKiE,yBACN,yBACEM,IAAKvE,KAAK2C,eACVxB,UAAU,eACVwC,SAAU3D,KAAK2D,UAEd3D,KAAK8D,qBAER,kBAAC,EAAD,CAAgB3B,mBAAoBnC,KAAKvC,sB,GAnOvB0C,IAAMC,YAiRjBoE,eAxCS,SAAA3G,GACtB,MAAO,CACLlE,SAAUkE,EAAMlE,SAChBkD,YAAagB,EAAMhB,YACnBK,YAAaW,EAAMX,gBAII,SAAAnC,GACzB,MAAO,CACLuI,kBAAmB,SAACjG,EAAQgG,GAAT,OACjBtI,EdnIC,SAA2BsC,EAAQgG,GACxC,8CAAO,WAAOtI,EAAU6B,GAAjB,qBAAA3C,EAAA,+EAEiBD,IAFjB,UAEG7B,EAFH,wEAMoB8D,MAAM,GAAD,OACvBlE,GADuB,OHpIJ,wBGoII,oBACoBsF,EADpB,gCACkDgG,EADlD,iCH3HA,IG6H1B,CACEnH,OAAQ,MACRC,QAASjE,EAA2BC,KAVrC,UAMGG,EANH,OAcC8D,EAAO/D,EAAuCC,GAd/C,kCAiBYA,EAAS+D,OAjBrB,QAiBDD,EAjBC,eAoBCA,EAAK3D,eACPsC,EAASF,EAAkBuB,IAC3BlC,aAAaiB,WAAW,WAEhBG,EAAiCsB,IAAWC,YAA5CvB,6BACRc,EAAO1C,EAAgB0C,EAAMd,GAC7BP,EAtGC,CACLP,KAjCqC,4BAkCrCC,QAoGqC2B,KA1BhC,kDA6BHE,QAAQC,IAAI,QAAZ,MA7BG,0DAAP,wDckIa+G,CAAkBjG,EAAQgG,KACrCE,iBAAkB,SAAClG,EAAQoH,GAAT,OAChB1J,EdlGC,SAA0BsC,EAAQoH,GACvC,8CAAO,WAAO1J,EAAU6B,GAAjB,mBAAA3C,EAAA,+EAEiBD,IAFjB,UAEG7B,EAFH,wEAMoB8D,MAAM,GAAD,OACvBlE,GADuB,OHtKD,yBGsKC,oBACuBsF,EADvB,gCACqDoH,GAC/E,CACEvI,OAAQ,MACRC,QAASjE,EAA2BC,KAVrC,UAMGG,EANH,OAcC8D,EAAO/D,EAAuCC,GAd/C,kCAiBYA,EAAS+D,OAjBrB,QAiBDD,EAjBC,eAoBCA,EAAK3D,eACPsC,EAASF,EAAkBuB,IAC3BlC,aAAaiB,WAAW,UAExBJ,EAAS2C,EAAgDtB,IAxBxD,kDA2BHE,QAAQC,IAAI,QAAZ,MA3BG,0DAAP,wDciGagH,CAAiBlG,EAAQoH,KACpClC,wBAAyB,SAAAlF,GAAM,OAC7BtC,EdvDC,SAAiCsC,GACtC,OAAO,SAAAtC,GACLA,EK5MK,CACLP,KARsB,aAStBC,QL0MmB,GAAD,OHlNU,wBGkNV,OAAuB4C,McqD9BkF,CAAwBlF,KACnC+G,0BAA2B,kBAAMrJ,GdjD5B,SAAAA,GACLA,EK/LK,CACLP,KAxByB,yBS8RdgK,CAA6CnC,GC5RtDqC,G,kNACJC,aAAe,WAAO,IACZhK,EAAS,EAAK8E,MAAd9E,KAER,EAAK8E,MAAMkF,aAAahK,I,EAG1BiK,gBAAkB,SAAAtF,GAChB,GAAIA,GAASA,EAAMwD,OACjB,OAAOxD,EAAMzF,KAAI,SAACC,EAAMiK,GACtB,OACE,yBAAKC,IAAKD,GACR,2BAAIjK,EAAKsD,W,uDAOT,IACAzC,EAASqF,KAAKP,MAAd9E,KAER,OACE,yBAAKwG,UAAU,qBAAqBY,QAAS/B,KAAK2E,cAChD,6BACE,4BAAKhK,EAAKyC,OAEZ,6BACE,4CACA,6BAAM4C,KAAK4E,gBAAgBjK,EAAK2E,c,GA7BlBa,IAAMC,YCQxByE,I,kNASJC,eAAiB,WAAO,IAAD,EACoB,EAAKrF,MAAtCxB,EADa,EACbA,UAAWvD,EADE,EACFA,kBAEnB,GAAIuD,GAAaA,EAAU6E,OACzB,OAAO7E,EAAUpE,KAAI,SAASC,GAC5B,OACE,kBAAC,EAAD,CACE6K,aAAcjK,EACdsJ,IAAKlK,EAAK4B,IACVf,KAAMb,Q,kEAhBd,IAAIkC,EAASgE,KAAKP,MAAMvC,YAAYxB,IAE/BM,GAELgE,KAAKP,MAAM1D,eAAeC,K,+BAoB1B,OAAO,yBAAKmF,UAAU,kBAAanB,KAAK8E,sB,GA1BrB3E,IAAMC,YAiEdoE,gBAnCS,SAAA3G,GACtB,MAAO,CACLI,UAAWJ,EAAMI,UACjBf,YAAaW,EAAMX,gBAII,SAAAnC,GACzB,MAAO,CACLgB,eAAgB,SAAAC,GAAM,OAAIjB,EAASgB,EAAeC,KAClDtB,kBAAmB,SAAAC,GAAI,OACrBI,EAASQ,EAAuCZ,QAwBvC6J,CAA6CK,I,MC1E5D,SAASE,GAAc3E,GACrB,OAAO,SAASX,GACd,OACE,yBAAK0B,UAAU,eACb,6BACE,kBAACf,EAAcX,M,UCJnBuF,G,4MACJC,YAAc,WAAO,IACX3K,EAAS,EAAKmF,MAAdnF,KAER,EAAKmF,MAAMwF,YAAY3K,I,uDAGf,IACAA,EAAS0F,KAAKP,MAAdnF,KAER,OACE,yBAAK6G,UAAU,YAAYY,QAAS/B,KAAKiF,aACvC,8BAAO3K,EAAK8C,W,GAZI+C,IAAMC,W,MCA9B,SAAS8E,GAAWzF,GAAQ,IAClB0F,EAAsD1F,EAAtD0F,QAAS/H,EAA6CqC,EAA7CrC,KAAM6C,EAAuCR,EAAvCQ,YAAazF,EAA0BiF,EAA1BjF,KAAMuF,EAAoBN,EAApBM,MAAOG,EAAaT,EAAbS,SAEjD,OACE,yBAAKiB,UAAU,cACb,+BAAQgE,GACR,2BACE/H,KAAMA,EACN6C,YAAaA,EACbzF,KAAMA,EACNuF,MAAOA,EACPG,SAAUA,K,UCTZkF,G,4MACJvH,MAAQ,CACNwH,aAAc,I,EAGhB9F,SAAW,SAAAO,GACTA,EAASN,iBAET,EAAKC,MAAM6F,qBAAqB,EAAKzH,MAAMwH,cAE3C,EAAKzF,SAAS,CACZ2F,kBAAmB,M,EAIvBC,wBAA0B,SAAA1F,GACxB,EAAKF,SAAS,CACZyF,aAAcvF,EAASZ,OAAOa,S,uDAKhC,OACE,0BAAMR,SAAUS,KAAKT,UACnB,kBAAC,GAAD,CACE4F,QAAQ,aACR/H,KAAK,YACL6C,YAAY,aACZzF,KAAK,OACLuF,MAAOC,KAAKnC,MAAMwH,aAClBnF,SAAUF,KAAKwF,0BAEjB,yBAAKC,MAAM,UACT,4BAAQtE,UAAU,eAAe3G,KAAK,UAAtC,oB,GAjCa2F,IAAMC,WCEvBsF,I,8NACJJ,qBAAuB,SAAAD,GACrB,EAAK5F,MAAMkG,UAAUN,I,EAGvBT,gBAAkB,WAAO,IAAD,EACa,EAAKnF,MAAhCrB,EADc,EACdA,UAAW6G,EADG,EACHA,YAEnB,GAAI7G,GAAaA,EAAU0E,OACzB,OAAO1E,EAAUvE,KAAI,SAASC,GAC5B,OACE,kBAAC,GAAD,CAAWmL,YAAaA,EAAajB,IAAKlK,EAAK4B,IAAKpB,KAAMR,Q,uDAOhE,OACE,yBAAKqH,UAAU,0BACb,uDACA,4BAAQA,UAAU,cAAcY,QAAS/B,KAAKP,MAAMmG,eAApD,KAGA,kBAAC,GAAD,CAAUN,qBAAsBtF,KAAKsF,uBACrC,yBAAKnE,UAAU,oCACZnB,KAAK4E,wB,GA1BqBzE,IAAMC,YCJrCyF,I,kNACJhI,MAAQ,CACN7E,KAAM,KACN8M,SAAU,I,EAGZvG,SAAW,SAAAX,GAAU,IACX5F,EAAS,EAAK6E,MAAd7E,KACAuG,EAAa,EAAKE,MAAlBF,SAERX,EAAMY,iBAEFxG,GACFuG,EAASvG,I,EAIb+M,+BAAiC,SAAAjG,GAC/B,EAAKF,SAAS,CACZ5G,KAAM8G,EAASZ,OAAO8G,MAAM,GAC5BF,SAAUhG,EAASZ,OAAOa,S,uDAK5B,OACE,yBAAKoB,UAAU,mCACb,0BAAM5B,SAAUS,KAAKT,UACnB,qCACA,2BACEnC,KAAK,2BACL5C,KAAK,OACLuF,MAAOC,KAAKnC,MAAMiI,SAClB5F,SAAUF,KAAK+F,iCAEjB,4BAAQvL,KAAK,UAAb,qCACA,4BAAQuH,QAAS/B,KAAKP,MAAMmG,eAA5B,gB,GApCoCzF,IAAMC,YCQ9C6F,GAA8BlB,GAAcW,IAC5CQ,GAAyCnB,GAC7Cc,IAGIM,G,kDACJ,WAAY1G,GAAQ,IAAD,8BACjB,cAAMA,IAQR2G,qBAAuB,WACrB,EAAKxG,SAAS,CACZyG,mBAAmB,KAXJ,EAenBC,4CAA8C,WAC5C,EAAK1G,SAAS,CACZ2G,qCAAqC,KAjBtB,EAqBnBC,wBAA0B,SAAAlM,GACxB,EAAKmM,mBACL,EAAKhH,MAAM+G,wBAAwBlM,IAvBlB,EA0BnBmM,iBAAmB,WACjB,EAAK7G,SAAS,CACZyG,mBAAmB,KA5BJ,EAgCnBK,kCAAoC,SAAAC,GAClC,EAAKC,0CACL,EAAKnH,MAAMiH,kCAAkCC,IAlC5B,EAqCnBC,wCAA0C,WACxC,EAAKhH,SAAS,CACZ2G,qCAAqC,KAvCtB,EA2CnBM,sBAAwB,WAAO,IAAD,EAIxB,EAAKhJ,MAFPwI,EAF0B,EAE1BA,kBACAE,EAH0B,EAG1BA,oCAH0B,EAKkB,EAAK9G,MAA3C5C,EALoB,EAKpBA,YAAa8I,EALO,EAKPA,UAAWvH,EALJ,EAKIA,UAEhC,OAAIiI,EAEA,kBAACJ,GAAD,CACEN,UAAWA,EACXvH,UAAWA,EACX6G,YAAa,EAAKuB,wBAClBZ,cAAe,EAAKa,mBAKtBF,EAEA,kBAACL,GAAD,CACErJ,YAAaA,EACb0C,SAAU,EAAKmH,kCACfd,cAAe,EAAKgB,0CAKtB/J,EAAYnB,IAEZ,kBAAC,IAAMoL,SAAP,KACE,4BAAQ/E,QAAS,EAAKqE,sBAAtB,wBAGA,4BAAQrE,QAAS,EAAKuE,6CAAtB,2CANN,GApEA,EAAKzI,MAAQ,CACXwI,mBAAmB,EACnBE,qCAAqC,GALtB,E,qDAsFjB,OACE,6BACE,uCAAavG,KAAKP,MAAM5C,YAAYO,MACnC4C,KAAK6G,6B,GA1FoB1G,IAAMC,WA4IzBoE,gBA5CS,SAAA3G,GACtB,MAAO,CACLhB,YAAagB,EAAMhB,YACnBuB,UAAWP,EAAMO,cAIM,SAAArD,GACzB,MAAO,CACL4K,UAAW,SAAAN,GAAY,OAAItK,ExBmPxB,SAAmBsK,GACxB,8CAAO,WAAMtK,GAAN,mBAAAd,EAAA,+EAEiBD,IAFjB,UAEG7B,EAFH,wEAMoB8D,MAAM,GAAD,OACvBlE,GADuB,OF3WH,gBE2WG,2BAC4BsN,GACtD,CACEnJ,OAAQ,MACRC,QAASjE,EAA2BC,KAVrC,UAMGG,EANH,OAcC8D,EAAO/D,EAAuCC,GAd/C,kCAiBYA,EAAS+D,OAjBrB,QAiBDD,EAjBC,eAoBCA,EAAK3D,eACPsC,EAASF,EAAkBuB,IAE3BlC,aAAaiB,WAAW,SACxBjB,aAAaiB,WAAW,aAExBJ,EA3TC,CACLP,KApDiC,wBAqDjCC,QAyTgC2B,IA1B3B,kDA6BHE,QAAQC,IAAI,QAAZ,MA7BG,0DAAP,sDwBpPsCoJ,CAAUN,KAC9CmB,wBAAyB,SAAAlM,GAAI,OAAIS,ExBqR9B,SAAiCT,GACtC,8CAAO,WAAOS,EAAU6B,GAAjB,uBAAA3C,EAAA,+EAEiBD,IAFjB,UAEG7B,EAFH,iEAMqByE,IAAhBC,EANL,EAMKA,YANL,SAQoBZ,MAAMlE,EF/YC,oBE+YsC,CAClEmE,OAAQ,OACRC,QAASjE,EAA2BC,GACpCmF,KAAMlD,KAAKmD,UAAU,CACnBF,OAAQR,EAAYnB,IACpBqL,UAAWzM,EAAKoB,QAbjB,UAQGpD,EARH,OAiBC8D,EAAO/D,EAAuCC,GAjB/C,kCAoBYA,EAAS+D,OApBrB,QAoBDD,EApBC,eAuBCA,EAAK3D,cACPsC,EAASF,EAAkBuB,IAE3BrB,EAASQ,EAAuCa,EAAKzB,OA1BpD,kDA6BH2B,QAAQC,IAAI,QAAZ,MA7BG,0DAAP,wDwBtR4CiK,CAAwBlM,KAClEoM,kCAAmC,SAAA1N,GAAI,OACrC+B,ExBEC,SAA2C/B,GAChD,8CAAO,WAAO+B,EAAU6B,GAAjB,yBAAA3C,EAAA,yDACAjB,EADA,iEAG0BD,EAAaC,GAHvC,UAGDwC,EAHC,QDrF2BwL,EC0FRxL,IDvFP,KAAfwL,EAAIC,OCkFD,uBAMHlM,EAASE,EAAa,CAAEtC,QAAS,uCAN9B,8BAUCgD,EAAevB,KAAKC,MAAMmB,IAEdK,SAAYF,EAAaG,SAZtC,wBAaHf,EAASE,EAAa,CAAEtC,QAAS,2BAb9B,2BAiBC0C,EAA8B,IAAIO,SACtC,OACAD,EAAaE,SAETP,EAA+B,IAAIM,SACvC,OACAD,EAAaG,UAvBV,EA0BmBc,IAAhBC,EA1BH,EA0BGA,YAER3C,aAAagN,QAAQrK,EAAYnB,IAAKF,GAEtCT,EACEK,EACEC,EACAC,IAjCC,kCDrFF,IAA6B0L,ICqF3B,OAAP,wDwBHaN,CAAkC1N,QAgClCwL,CAA6C2B,ICtJtDgB,I,kNACJtJ,MAAQ,CACNhF,MAAO,GACPuE,KAAM,GACNgK,SAAU,GACVC,oBAAoB,G,EAGtB9H,SAAW,SAAAO,GACTA,EAASN,iBADY,MAGiC,EAAK3B,MAAnDhF,EAHa,EAGbA,MAAOuE,EAHM,EAGNA,KAAMgK,EAHA,EAGAA,SAAUC,EAHV,EAGUA,mBAHV,EAIoC,EAAK5H,MAAtD6H,EAJa,EAIbA,uBAAwBC,EAJX,EAIWA,qBAQ5BF,EACFE,EAPW,CACX1O,QACAuE,OACAgK,aAMAE,EAAuBzO,EAAOuO,GAGhC,EAAKxH,SAAS,CACZ/G,MAAO,GACPuE,KAAM,GACNgK,SAAU,M,EAIdI,qBAAuB,SAAA1H,GACrB,EAAKF,SAAS,CACZ/G,MAAOiH,EAASZ,OAAOa,S,EAI3B0H,oBAAsB,SAAA3H,GACpB,EAAKF,SAAS,CACZxC,KAAM0C,EAASZ,OAAOa,S,EAI1B2H,wBAA0B,SAAA5H,GACxB,EAAKF,SAAS,CACZwH,SAAUtH,EAASZ,OAAOa,S,EAI9B4H,WAAa,YAA8B,IAAjBC,EAAgB,EAA1B1I,OAAU0I,QACxB,EAAKhI,SAAS,CACZyH,mBAAoBO,K,EAIxBC,aAAe,WACb,IAAIC,EAQJ,OALEA,EADE,EAAKjK,MAAMwJ,mBACA,wBAEA,QAIb,wBAAIlG,UAAU,6CACX2G,I,EAKPC,yBAA2B,WACzB,GAAI,EAAKlK,MAAMwJ,mBACb,OACE,kBAAC,GAAD,CACElC,QAAQ,YACR/H,KAAK,WACL6C,YAAY,YACZzF,KAAK,OACLuF,MAAO,EAAKlC,MAAMT,KAClB8C,SAAU,EAAKuH,uB,EAMvBO,mBAAqB,WACnB,IAAIC,EAQJ,OALEA,EADE,EAAKpK,MAAMwJ,mBACA,UAEA,UAIb,4BAAQlG,UAAU,eAAe3G,KAAK,UACnCyN,I,uDAML,OACE,yBAAK9G,UAAU,qCACb,2BAAO3G,KAAK,WAAWuH,QAAS/B,KAAK2H,aACrC,8CACA,0BAAMpI,SAAUS,KAAKT,UACnB,yBAAKkG,MAAM,UAAUzF,KAAK6H,gBACzB7H,KAAK+H,2BACN,kBAAC,GAAD,CACE5C,QAAQ,aACR/H,KAAK,YACL6C,YAAY,aACZzF,KAAK,OACLuF,MAAOC,KAAKnC,MAAMhF,MAClBqH,SAAUF,KAAKwH,uBAEjB,kBAAC,GAAD,CACErC,QAAQ,gBACR/H,KAAK,eACL6C,YAAY,gBACZzF,KAAK,OACLuF,MAAOC,KAAKnC,MAAMuJ,SAClBlH,SAAUF,KAAK0H,0BAEjB,yBAAKjC,MAAM,UAAUzF,KAAKgI,4B,GAhIY7H,IAAMC,Y,MCDtD,SAAS8H,GAAoCzI,GAC3C,OACE,yBAAK0B,UAAU,uCACb,kBAAC,GAAsC1B,ICP7C,SAAS0I,GAAc1I,GACrB,OACE,6BACE,4BAAQsC,QAAStC,EAAM2I,WAAvB,YACA,8BAAO3I,EAAM4I,kB,gBCgBbC,GAAmBvD,IClBzB,SAAqBtF,GAAQ,IAGvB8I,EAAiBC,EAAwBC,EAHnB,EACiBhJ,EAAMtB,UAAzC3F,EADkB,EAClBA,OAAQC,EADU,EACVA,cAAeE,EADL,EACKA,QAU/B,OANIH,IACF+P,EAAkB,sCAAY/P,GAC9BgQ,EAAyB,2CAAiB/P,GAC1CgQ,EAAmB,uCAAa9P,IAIhC,yBAAKwI,UAAU,eACb,6BACE,sCAEF,6BACGoH,EACAC,EACAC,GAEH,4BAAQ1G,QAAStC,EAAMiJ,MAAvB,UDDAC,G,4MAqCJP,UAAY,WACV,EAAK3I,MAAMzE,6B,kEApCXgF,KAAKP,MAAMmJ,6B,kDAIX,GAAI5I,KAAKP,MAAMvC,YAAYxB,IACzB,OACE,6BACE,kBAAC,GAAD,MACA,kBAAC,EAAD,CACEgE,gBAAiBM,KAAKP,MAAMoJ,cAC5BlJ,cAAeK,KAAKP,MAAMvC,YAAYxB,S,0CAQ9C,GAAKsE,KAAKP,MAAMvC,YAAYxB,KACvBsE,KAAKP,MAAM5C,YAAYnB,IAE5B,OAAO,kBAAC,EAAD,CAAa+B,eAAgBuC,KAAKP,MAAMhC,mB,0CAI/C,GAAKuC,KAAKP,MAAMtB,UAEhB,OACE,kBAACmK,GAAD,CACEI,KAAM1I,KAAKP,MAAMqJ,eACjB3K,UAAW6B,KAAKP,MAAMtB,c,0CAU1B,OAAI6B,KAAKP,MAAMvB,oBAEX,kBAAC,IAAM4I,SAAP,KACE,yBAAK3F,UAAU,cACb,yBAAKA,UAAU,oBACZnB,KAAK+I,6BAER,yBAAK5H,UAAU,sBAAsBnB,KAAK8D,sBAE5C,yBAAK3C,UAAU,aACb,kBAACgH,GAAD,CACEC,UAAWpI,KAAKoI,UAChBC,gBAAiBrI,KAAKP,MAAMvC,YAAYE,OAE1C,kBAAC,GAAD,CAAqB+D,UAAU,4BAOrC,kBAAC,GAAD,CACEmG,uBAAwBtH,KAAKP,MAAMuJ,2BACnCzB,qBAAsBvH,KAAKP,MAAMwJ,kB,+BAMrC,OACE,kBAAC,IAAMnC,SAAP,KACG9G,KAAKkJ,oBACN,yBAAK/H,UAAU,aAAanB,KAAKmJ,0B,GA1EvBhJ,IAAMC,WAwGToE,gBAxBS,SAAA3G,GACtB,MAAO,CACLX,YAAaW,EAAMX,YACnBL,YAAagB,EAAMhB,YACnBW,mBAAoBK,EAAML,mBAC1BU,oBAAqBL,EAAMK,oBAC3BC,UAAWN,EAAMM,cAIM,SAAApD,GACzB,MAAO,CACL6N,yBAA0B,kBAAM7N,E5BNlC,uCAAO,WAAMA,GAAN,mBAAAd,EAAA,2DACgBC,aAAbC,EADH,EACGA,SADH,SAIEA,EAJF,iEAKUC,KAAKC,MAAMF,GALrB,OAKHG,EALG,8DAOHJ,aAAaiB,WAAW,YAPrB,2BAWLJ,EAASR,EAAkBD,IAC3BS,EAASH,GAAwB,IACjCG,EAASgB,EAAezB,EAAKoB,MAbxB,yDAAP,wD4BOEmN,cAAe,SAACO,EAAUC,GAAX,OACbtO,G5B4EwBqC,E4B5EDgM,E5B4EO9J,E4B5EG+J,E5B6ErC,uCAAO,WAAOtO,EAAU6B,GAAjB,yBAAA3C,EAAA,+EAEiBD,IAFjB,UAEG7B,EAFH,+DAMGmR,EAAc,CAClB3O,KAAM,CACJyC,OACAkC,UATD,SAaoBrD,MAAMlE,EF3MF,aE2MsC,CAC/DmE,OAAQ,OACRC,QAASjE,EAA2BC,GACpCmF,KAAMlD,KAAKmD,UAAU+L,KAhBpB,UAaGhR,EAbH,OAmBC8D,EAAO/D,EAAuCC,GAnB/C,kCAsBYA,EAAS+D,OAtBrB,QAsBDD,EAtBC,eAyBCA,EAAK5D,OACPuC,EAASF,EAAkBuB,KACrB,EACkBQ,IAAhBM,EADH,EACGA,YAERnC,EAASQ,EAAuCa,EAAKzB,OACrDI,EAASgB,EAAemB,EAAYxB,OA/BnC,kDAkCHY,QAAQC,IAAI,QAAZ,MAlCG,0DAAP,0DADK,IAAuBa,EAAMkC,G4B3EhC7B,eAAgB,SAAA9E,GAAO,OAAIoC,EAAS4B,EAAyBhE,KAC7DqQ,2BAA4B,SAACO,EAAWC,GAAZ,OAC1BzO,G5BmJqClC,E4BnJD0Q,E5BmJQnC,E4BnJGoC,E5BoJnD,uCAAO,WAAMzO,GAAN,qBAAAd,EAAA,kEAEErB,EAAcC,GAFhB,uBAGDkC,EACEE,EAAa,CACXtC,QAAQ,cAAD,OAAgBE,MAL1B,iCAWG4Q,EAAyB,CAC7BnP,KAAM,CACJzB,QACAuE,KAAM,GACNgK,aAfD,SAmBoBnL,MACrBlE,EF1RsC,eE2RtC,CACEmE,OAAQ,OACRC,QAASnE,EACTsF,KAAMlD,KAAKmD,UAAUkM,KAxBtB,UAmBGnR,EAnBH,OA4BC8D,EAAO/D,EAAuCC,GA5B/C,kCA+BYA,EAAS+D,OA/BrB,QA+BDD,EA/BC,eAkCCA,EAAK3D,eACPsC,EAASF,EAAkBuB,IAC3BrB,EAASH,GAAwB,MAEzBc,EAAQU,EAAK9B,KAAboB,IAERxB,aAAagN,QAAQ,WAAY9M,KAAKmD,UAAUnB,EAAK9B,OAErDS,EAASR,EAAkB6B,EAAK9B,OAChCS,EAASH,GAAwB,IACjCG,EAASgB,EAAeL,KA5CvB,kDA+CHY,QAAQC,IAAI,QAAZ,MA/CG,0DAAP,wDADK,IAAoC1D,EAAOuO,G4BlJ9C6B,cAAe,SAAA3O,GAAI,OAAIS,E5BuMpB,SAAuBT,GAC5B,8CAAO,WAAMS,GAAN,mBAAAd,EAAA,kEAEErB,EAAc0B,EAAKzB,OAFrB,uBAGDkC,EACEE,EAAa,CACXtC,QAAQ,cAAD,OAAgB2B,EAAKzB,UAL/B,0CAYoBoD,MAAMlE,EFtUF,aEsUsC,CAC/DmE,OAAQ,OACRC,QAASnE,EACTsF,KAAMlD,KAAKmD,UAAU,CAAEjD,WAftB,UAYGhC,EAZH,OAkBC8D,EAAO/D,EAAuCC,GAlB/C,kCAqBYA,EAAS+D,OArBrB,QAqBDD,EArBC,eAwBCA,EAAK3D,eACPsC,EAASF,EAAkBuB,IAC3BrB,EAASH,GAAwB,MAEzBc,EAAQU,EAAK9B,KAAboB,IAERxB,aAAagN,QAAQ,WAAY9M,KAAKmD,UAAUnB,EAAK9B,OAErDS,EAASR,EAAkB6B,EAAK9B,OAChCS,EAASL,EAAkB,KAC3BK,EAASH,GAAwB,IACjCG,EAASgB,EAAeL,KAnCvB,kDAsCHY,QAAQC,IAAI,QAAZ,MAtCG,0DAAP,sD4BxMkC0M,CAAc3O,KAC9CU,0BAA2B,kBAAMD,EAASC,MAC1C8N,eAAgB,kBAAM/N,E5BjCjB,CACLP,KAjE4B,yB4BqGjBgK,CAA6CmE,IErHxCe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVN,IAAMvL,GCFGwL,YAAYC,EAAaC,YAAgBC,IAAOC,IDIzDC,IAASC,OACP,kBAAC,IAAD,CAAU9L,MAAOA,IACf,kBAAC,GAAD,OAEF+L,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.56814fbd.chunk.js","sourcesContent":["export const serverLocation = 'http://localhost:4000/'\nexport const wsServerLocation = 'ws://localhost:4000/'\n\nexport const messageSendPath = 'messages/new/'\nexport const messageGetPath = 'messages/listRequest/'\nexport const newMessageGetPath = 'messages/lastMessages/'\nexport const submitNewChatPath = 'chats/new/'\nexport const chatsListGetPath = 'chats/listRequest/'\nexport const submitUserEmailAndPasswordPath = 'users/login/'\nexport const submitNewUserPath = 'users/new/'\nexport const searchUsersPath = 'users/search/'\nexport const addNewUserToChatPath = 'chats/addNewUser/'\n\nexport const fetchMessagesCount = 15\nexport const updateInterval = 10000\n","export const httpHeadersWithoutToken = {\n  Accept: 'application/json',\n  'Content-Type': 'application/json',\n}\n\nexport function createHttpHeadersWithToken(token) {\n  return {\n    Accept: 'application/json',\n    'Content-Type': 'application/json',\n    Authorization: `Bearer ${token}`,\n  }\n}\n\nexport function checkResponseAndCreateErrorIfBadStatus(response) {\n  if (response.ok) {\n    return\n  } else {\n    const { status, statusText, message } = response\n\n    return {\n      status,\n      badStatusText: statusText,\n      message,\n    }\n  }\n}\n\nexport function validateEmail(email) {\n  const reg = /^([A-Za-z0-9_\\-\\.])+\\@([A-Za-z0-9_\\-\\.])+\\.([A-Za-z]{2,4})$/\n\n  return reg.test(email)\n}\n\nexport function readTextFile(file) {\n  return new Promise((resolve, reject) => {\n    var reader = new FileReader()\n    reader.onload = () => {\n      resolve(reader.result)\n    }\n    reader.onerror = reject\n    reader.readAsText(file)\n  })\n}\n\nexport function isStringNullOrEmpty(str) {\n  if (!str) return true\n\n  if (str.trim() === '') return true\n\n  return false\n}\n\nexport function convertMessages(messages, convertor) {\n  if (convertor) {\n    messages = messages.map(item => {\n      const text = convertor(item.text)\n      return { ...item, text }\n    })\n  }\n\n  return messages\n}\n\nexport async function getUserToken() {\n  const { userJson } = localStorage\n\n  if (!userJson) return null\n\n  const user = await JSON.parse(userJson)\n\n  if (!user) return null\n\n  return user.token ? user.token : null\n}\n","import {\n  serverLocation,\n  submitNewChatPath,\n  chatsListGetPath,\n  submitUserEmailAndPasswordPath,\n  submitNewUserPath,\n  searchUsersPath,\n  addNewUserToChatPath,\n} from '../applicationSettings'\n\nimport { clearMessages } from './messageListActions'\n\nimport {\n  createHttpHeadersWithToken,\n  httpHeadersWithoutToken,\n  checkResponseAndCreateErrorIfBadStatus,\n  validateEmail,\n  readTextFile,\n  isStringNullOrEmpty,\n  getUserToken,\n} from './helper'\n\nexport const CHANGE_CURRENT_USER = 'CHANGE_CURRENT_USER'\nexport const CHANGE_CURRENT_CHAT = 'CHANGE_CURRENT_CHAT'\nexport const REFRESH_CHATS_LIST = 'REFRESH_CHATS_LIST'\nexport const SET_AUTHENTICATION_RESULT = 'SET_AUTHENTICATION_RESULT'\nexport const SET_LAST_ERROR = 'SET_LAST_ERROR'\nexport const FILL_FOUND_USERS_LIST = 'FILL_FOUND_USERS_LIST'\nexport const CLEAR_LAST_ERROR = 'CLEAR_LAST_ERROR'\nexport const ADD_NEW_SPECIAL_MESSAGES_PREPROCESSOR_FUNCTION =\n  'ADD_NEW_SPECIAL_MESSAGES_PREPROCESSOR_FUNCTION'\n\nexport function changeCurrentUser(user) {\n  return {\n    type: CHANGE_CURRENT_USER,\n    payload: user,\n  }\n}\n\nexport function changeCurrentChat(chat) {\n  return {\n    type: CHANGE_CURRENT_CHAT,\n    payload: chat,\n  }\n}\n\nexport function refreshChatsList(chats) {\n  return {\n    type: REFRESH_CHATS_LIST,\n    payload: chats,\n  }\n}\n\nexport function setAuthenticationResult(result) {\n  return {\n    type: SET_AUTHENTICATION_RESULT,\n    payload: result,\n  }\n}\n\nexport function handleServerError(serverErrorData) {\n  return dispatch => {\n    if (serverErrorData.status === 401) {\n      dispatch(resetAuthenticationResult())\n    }\n\n    dispatch(setLastError(serverErrorData))\n  }\n}\n\nexport function setLastError(errorData) {\n  return {\n    type: SET_LAST_ERROR,\n    payload: errorData,\n  }\n}\n\nexport function fillFoundUsersList(usersList) {\n  return {\n    type: FILL_FOUND_USERS_LIST,\n    payload: usersList,\n  }\n}\n\nexport function resetAuthenticationResult() {\n  return dispatch => {\n    localStorage.removeItem('userJson')\n    dispatch(setAuthenticationResult(false))\n  }\n}\n\nexport function clearLastError() {\n  return {\n    type: CLEAR_LAST_ERROR,\n  }\n}\n\nexport function addNewSpecialMessagesPreprocessorFunction(\n  forwardPreprocessorFunction,\n  backwardPreprocessorFunction\n) {\n  return {\n    type: ADD_NEW_SPECIAL_MESSAGES_PREPROCESSOR_FUNCTION,\n    payload: {\n      forwardPreprocessorFunction,\n      backwardPreprocessorFunction,\n    },\n  }\n}\n\nexport function checkIsUserAuthenticated() {\n  return async dispatch => {\n    const { userJson } = localStorage\n    let user\n    try {\n      if (!userJson) return\n      user = await JSON.parse(userJson)\n    } catch (error) {\n      localStorage.removeItem('userJson')\n      return\n    }\n\n    dispatch(changeCurrentUser(user))\n    dispatch(setAuthenticationResult(true))\n    dispatch(fetchChatsList(user._id))\n  }\n}\n\nexport function addNewSpecialMessagesPreprocessor(file) {\n  return async (dispatch, getState) => {\n    if (!file) return\n\n    let preprocessorString = await readTextFile(file)\n\n    if (isStringNullOrEmpty(preprocessorString)) {\n      dispatch(setLastError({ message: 'File is empty or has wrong format' }))\n      return\n    }\n\n    const preprocessor = JSON.parse(preprocessorString)\n\n    if (!preprocessor.forward || !preprocessor.backward) {\n      dispatch(setLastError({ message: 'File has wrong format' }))\n      return\n    }\n\n    const forwardPreprocessorFunction = new Function(\n      'text',\n      preprocessor.forward\n    )\n    const backwardPreprocessorFunction = new Function(\n      'text',\n      preprocessor.backward\n    )\n\n    const { currentChat } = getState()\n\n    localStorage.setItem(currentChat._id, preprocessorString)\n\n    dispatch(\n      addNewSpecialMessagesPreprocessorFunction(\n        forwardPreprocessorFunction,\n        backwardPreprocessorFunction\n      )\n    )\n  }\n}\n\nexport function tryGetPreprocessorAnd–°hangeCurrentChat(chat) {\n  return dispatch => {\n    const preprocessorString = localStorage.getItem(chat._id)\n\n    let forwardPreprocessorFunction, backwardPreprocessorFunction\n\n    if (preprocessorString) {\n      const preprocessor = JSON.parse(preprocessorString)\n\n      forwardPreprocessorFunction = new Function('text', preprocessor.forward)\n      backwardPreprocessorFunction = new Function('text', preprocessor.backward)\n    }\n\n    dispatch(changeCurrentChat(chat))\n    dispatch(clearMessages())\n\n    if (forwardPreprocessorFunction && backwardPreprocessorFunction) {\n      dispatch(\n        addNewSpecialMessagesPreprocessorFunction(\n          forwardPreprocessorFunction,\n          backwardPreprocessorFunction\n        )\n      )\n    }\n  }\n}\n\nexport function createNewChat(name, users) {\n  return async (dispatch, getState) => {\n    try {\n      const token = await getUserToken()\n\n      if (!token) return\n\n      const newChatData = {\n        chat: {\n          name,\n          users,\n        },\n      }\n\n      const response = await fetch(serverLocation + submitNewChatPath, {\n        method: 'POST',\n        headers: createHttpHeadersWithToken(token),\n        body: JSON.stringify(newChatData),\n      })\n\n      let data = checkResponseAndCreateErrorIfBadStatus(response)\n\n      if (!data) {\n        data = await response.json()\n      }\n\n      if (data.status) {\n        dispatch(handleServerError(data))\n      } else {\n        const { currentUser } = getState()\n\n        dispatch(tryGetPreprocessorAnd–°hangeCurrentChat(data.chat))\n        dispatch(fetchChatsList(currentUser._id))\n      }\n    } catch (error) {\n      console.log('error', error)\n    }\n  }\n}\n\nexport function fetchChatsList(userId) {\n  return async dispatch => {\n    try {\n      const token = await getUserToken()\n\n      if (!token) return\n\n      const response = await fetch(\n        `${serverLocation}${chatsListGetPath}?user_id=${userId}`,\n        {\n          method: 'GET',\n          headers: createHttpHeadersWithToken(token),\n        }\n      )\n\n      let data = checkResponseAndCreateErrorIfBadStatus(response)\n\n      if (!data) {\n        data = await response.json()\n      }\n\n      if (data.badStatusText) {\n        dispatch(handleServerError(data))\n        localStorage.removeItem('token')\n        localStorage.removeItem('userJson')\n      } else {\n        dispatch(refreshChatsList(data))\n      }\n    } catch (error) {\n      console.log('error', error)\n    }\n  }\n}\n\nexport function submitUserEmailAndPassword(email, password) {\n  return async dispatch => {\n    try {\n      if (!validateEmail(email)) {\n        dispatch(\n          setLastError({\n            message: `Bad email: ${email}`,\n          })\n        )\n        return\n      }\n\n      const userAuthenticationData = {\n        user: {\n          email,\n          name: '',\n          password,\n        },\n      }\n\n      const response = await fetch(\n        serverLocation + submitUserEmailAndPasswordPath,\n        {\n          method: 'POST',\n          headers: httpHeadersWithoutToken,\n          body: JSON.stringify(userAuthenticationData),\n        }\n      )\n\n      let data = checkResponseAndCreateErrorIfBadStatus(response)\n\n      if (!data) {\n        data = await response.json()\n      }\n\n      if (data.badStatusText) {\n        dispatch(handleServerError(data))\n        dispatch(setAuthenticationResult(false))\n      } else {\n        const { _id } = data.user\n\n        localStorage.setItem('userJson', JSON.stringify(data.user))\n\n        dispatch(changeCurrentUser(data.user))\n        dispatch(setAuthenticationResult(true))\n        dispatch(fetchChatsList(_id))\n      }\n    } catch (error) {\n      console.log('error', error)\n    }\n  }\n}\n\nexport function submitNewUser(user) {\n  return async dispatch => {\n    try {\n      if (!validateEmail(user.email)) {\n        dispatch(\n          setLastError({\n            message: `Bad email: ${user.email}`,\n          })\n        )\n\n        return\n      }\n\n      const response = await fetch(serverLocation + submitNewUserPath, {\n        method: 'POST',\n        headers: httpHeadersWithoutToken,\n        body: JSON.stringify({ user }),\n      })\n\n      let data = checkResponseAndCreateErrorIfBadStatus(response)\n\n      if (!data) {\n        data = await response.json()\n      }\n\n      if (data.badStatusText) {\n        dispatch(handleServerError(data))\n        dispatch(setAuthenticationResult(false))\n      } else {\n        const { _id } = data.user\n\n        localStorage.setItem('userJson', JSON.stringify(data.user))\n\n        dispatch(changeCurrentUser(data.user))\n        dispatch(changeCurrentChat({}))\n        dispatch(setAuthenticationResult(true))\n        dispatch(fetchChatsList(_id))\n      }\n    } catch (error) {\n      console.log('error', error)\n    }\n  }\n}\n\nexport function findUsers(userSeekData) {\n  return async dispatch => {\n    try {\n      const token = await getUserToken()\n\n      if (!token) return\n\n      const response = await fetch(\n        `${serverLocation}${searchUsersPath}?user_seek_data=${userSeekData}`,\n        {\n          method: 'GET',\n          headers: createHttpHeadersWithToken(token),\n        }\n      )\n\n      let data = checkResponseAndCreateErrorIfBadStatus(response)\n\n      if (!data) {\n        data = await response.json()\n      }\n\n      if (data.badStatusText) {\n        dispatch(handleServerError(data))\n\n        localStorage.removeItem('token')\n        localStorage.removeItem('userJson')\n      } else {\n        dispatch(fillFoundUsersList(data))\n      }\n    } catch (error) {\n      console.log('error', error)\n    }\n  }\n}\n\nexport function addNewUserToCurrentChat(user) {\n  return async (dispatch, getState) => {\n    try {\n      const token = await getUserToken()\n\n      if (!token) return\n\n      const { currentChat } = getState()\n\n      const response = await fetch(serverLocation + addNewUserToChatPath, {\n        method: 'POST',\n        headers: createHttpHeadersWithToken(token),\n        body: JSON.stringify({\n          chatId: currentChat._id,\n          newUserId: user._id,\n        }),\n      })\n\n      let data = checkResponseAndCreateErrorIfBadStatus(response)\n\n      if (!data) {\n        data = await response.json()\n      }\n\n      if (data.badStatusText) {\n        dispatch(handleServerError(data))\n      } else {\n        dispatch(tryGetPreprocessorAnd–°hangeCurrentChat(data.chat))\n      }\n    } catch (error) {\n      console.log('error', error)\n    }\n  }\n}\n","import {\n  serverLocation,\n  wsServerLocation,\n  messageSendPath,\n  messageGetPath,\n  newMessageGetPath,\n  fetchMessagesCount,\n} from '../applicationSettings'\n\nimport { handleServerError } from './chatSettingsActions'\nimport { wsConnect, wsDisconnect } from './webSocketActions'\n\nimport {\n  createHttpHeadersWithToken,\n  checkResponseAndCreateErrorIfBadStatus,\n  convertMessages,\n  getUserToken,\n} from './helper'\n\nexport const ADD_NEW_MESSAGE = 'ADD_NEW_MESSAGE'\nexport const MESSAGE_WAS_RECEIVED = 'MESSAGE_WAS_RECEIVED'\nexport const REFRESH_MESSAGES_LIST = 'REFRESH_MESSAGES_LIST'\nexport const UNSHIFT_PREVIOUS_MESSAGES = 'UNSHIFT_PREVIOUS_MESSAGES'\nexport const PUSH_NEW_MESSAGES = 'PUSH_NEW_MESSAGES'\nexport const CLEAR_MESSAGES = 'CLEAR_MESSAGES'\n\nexport function clearMessages() {\n  return {\n    type: CLEAR_MESSAGES,\n  }\n}\n\nexport function addNewMessage(message) {\n  return {\n    type: ADD_NEW_MESSAGE,\n    payload: message,\n  }\n}\n\nexport function messageWasReceived(bool) {\n  return {\n    type: MESSAGE_WAS_RECEIVED,\n    payload: bool,\n  }\n}\n\nexport function refreshMessagesList(messages) {\n  return {\n    type: REFRESH_MESSAGES_LIST,\n    payload: messages,\n  }\n}\n\nexport function unshiftPreviousMessages(messages) {\n  return {\n    type: UNSHIFT_PREVIOUS_MESSAGES,\n    payload: messages,\n  }\n}\n\nexport function pushNewMessages(messages) {\n  return {\n    type: PUSH_NEW_MESSAGES,\n    payload: messages,\n  }\n}\n\nexport function encryptAndSendNewMessage(text) {\n  return (dispatch, getState) => {\n    const { forwardPreprocessorFunction } = getState().currentChat\n\n    if (forwardPreprocessorFunction) {\n      text = forwardPreprocessorFunction(text)\n    }\n\n    dispatch(sendNewMessage(text))\n  }\n}\n\nexport function sendNewMessage(text) {\n  return async (dispatch, getState) => {\n    try {\n      const token = await getUserToken()\n\n      if (!token) return\n\n      dispatch(messageWasReceived(false))\n\n      const time = new Date().getTime()\n      const authorEmail = getState().currentUser.email\n      const authorName = getState().currentUser.name\n      const chatId = getState().currentChat._id\n\n      const message = {\n        chatId,\n        time,\n        authorEmail,\n        authorName,\n        text,\n      }\n\n      const response = await fetch(serverLocation + messageSendPath, {\n        method: 'POST',\n        headers: createHttpHeadersWithToken(token),\n        body: JSON.stringify(message),\n      })\n\n      let data = checkResponseAndCreateErrorIfBadStatus(response)\n\n      if (!data) {\n        data = await response.json()\n      }\n\n      if (data.status) {\n        dispatch(handleServerError(data))\n        message.wasMessageReceived = false\n        dispatch(addNewMessage(message))\n        localStorage.removeItem('token')\n      } else {\n        message.wasMessageReceived = true\n        //dispatch(addNewMessage(message))\n        dispatch(messageWasReceived(true))\n      }\n    } catch (error) {\n      console.log('error', error)\n    }\n  }\n}\n\nexport function fetchMessagesList(chatId, oldestMessageTime) {\n  return async (dispatch, getState) => {\n    try {\n      const token = await getUserToken()\n\n      if (!token) return\n\n      const response = await fetch(\n        `${serverLocation}${messageGetPath}?chat_id=${chatId}&oldest_message_time=${oldestMessageTime}&fetch_messages_count=${fetchMessagesCount}`,\n        {\n          method: 'GET',\n          headers: createHttpHeadersWithToken(token),\n        }\n      )\n\n      let data = checkResponseAndCreateErrorIfBadStatus(response)\n\n      if (!data) {\n        data = await response.json()\n      }\n\n      if (data.badStatusText) {\n        dispatch(handleServerError(data))\n        localStorage.removeItem('token')\n      } else {\n        const { backwardPreprocessorFunction } = getState().currentChat\n        data = convertMessages(data, backwardPreprocessorFunction)\n        dispatch(unshiftPreviousMessages(data))\n      }\n    } catch (error) {\n      console.log('error', error)\n    }\n  }\n}\n\nexport function fetchNewMessages(chatId, newestMessageTime) {\n  return async (dispatch, getState) => {\n    try {\n      const token = await getUserToken()\n\n      if (!token) return\n\n      const response = await fetch(\n        `${serverLocation}${newMessageGetPath}?chat_id=${chatId}&newest_message_time=${newestMessageTime}`,\n        {\n          method: 'GET',\n          headers: createHttpHeadersWithToken(token),\n        }\n      )\n\n      let data = checkResponseAndCreateErrorIfBadStatus(response)\n\n      if (!data) {\n        data = await response.json()\n      }\n\n      if (data.badStatusText) {\n        dispatch(handleServerError(data))\n        localStorage.removeItem('token')\n      } else {\n        dispatch(applyBackwardPreprocessorFunctionAndPushMessage(data))\n      }\n    } catch (error) {\n      console.log('error', error)\n    }\n  }\n}\n\nexport function applyBackwardPreprocessorFunctionAndPushMessage(messages) {\n  return (dispatch, getState) => {\n    const { backwardPreprocessorFunction } = getState().currentChat\n\n    if (backwardPreprocessorFunction) {\n      messages = convertMessages(messages, backwardPreprocessorFunction)\n    }\n\n    dispatch(pushNewMessages(messages))\n  }\n}\n\nexport function subscribeForNewMessages(chatId) {\n  return dispatch => {\n    dispatch(wsConnect(`${wsServerLocation}${chatId}`))\n  }\n}\n\nexport function unsubscribeForNewMessages() {\n  return dispatch => {\n    dispatch(wsDisconnect())\n  }\n}\n","import { combineReducers } from 'redux'\nimport { messages, wasMessageReceived } from './messageListData'\nimport {\n  currentUser,\n  currentChat,\n  chatsList,\n  isUserAuthenticated,\n  lastError,\n  usersList,\n} from './chatSettings'\n\nexport default combineReducers({\n  messages,\n  wasMessageReceived,\n  currentUser,\n  currentChat,\n  chatsList,\n  isUserAuthenticated,\n  lastError,\n  usersList,\n})\n","import {\n  ADD_NEW_MESSAGE,\n  MESSAGE_WAS_RECEIVED,\n  REFRESH_MESSAGES_LIST,\n  UNSHIFT_PREVIOUS_MESSAGES,\n  PUSH_NEW_MESSAGES,\n  CLEAR_MESSAGES,\n} from '../actions/messageListActions'\n\nexport function messages(state = [], action) {\n  switch (action.type) {\n    case CLEAR_MESSAGES:\n      return []\n    case ADD_NEW_MESSAGE:\n      return [...state, action.payload]\n    case REFRESH_MESSAGES_LIST:\n      return action.payload\n    case UNSHIFT_PREVIOUS_MESSAGES:\n      const previousMessages = action.payload\n      return [...previousMessages, ...state]\n    case PUSH_NEW_MESSAGES:\n      const newMessages = action.payload\n      return [...state, ...newMessages]\n    default:\n      return state\n  }\n}\n\nexport function wasMessageReceived(state = true, action) {\n  switch (action.type) {\n    case MESSAGE_WAS_RECEIVED:\n      return action.payload\n    default:\n      return state\n  }\n}\n","import {\n  CHANGE_CURRENT_USER,\n  CHANGE_CURRENT_CHAT,\n  REFRESH_CHATS_LIST,\n  SET_AUTHENTICATION_RESULT,\n  SET_LAST_ERROR,\n  FILL_FOUND_USERS_LIST,\n  CLEAR_LAST_ERROR,\n  ADD_NEW_SPECIAL_MESSAGES_PREPROCESSOR_FUNCTION,\n} from '../actions/chatSettingsActions'\n\nexport function currentUser(state = {}, action) {\n  switch (action.type) {\n    case CHANGE_CURRENT_USER:\n      return action.payload\n    default:\n      return state\n  }\n}\n\nexport function currentChat(state = {}, action) {\n  switch (action.type) {\n    case CHANGE_CURRENT_CHAT:\n      return action.payload\n    case ADD_NEW_SPECIAL_MESSAGES_PREPROCESSOR_FUNCTION:\n      return { ...state, ...action.payload }\n    default:\n      return state\n  }\n}\n\nexport function chatsList(state = [], action) {\n  switch (action.type) {\n    case REFRESH_CHATS_LIST:\n      return action.payload\n    default:\n      return state\n  }\n}\n\nexport function isUserAuthenticated(state = false, action) {\n  switch (action.type) {\n    case SET_AUTHENTICATION_RESULT:\n      return action.payload\n    default:\n      return state\n  }\n}\n\nexport function lastError(state = null, action) {\n  switch (action.type) {\n    case SET_LAST_ERROR:\n      return action.payload\n    case CLEAR_LAST_ERROR:\n      return null\n    default:\n      return state\n  }\n}\n\nexport function usersList(state = [], action) {\n  switch (action.type) {\n    case FILL_FOUND_USERS_LIST:\n      return action.payload\n    default:\n      return state\n  }\n}\n","import { applyBackwardPreprocessorFunctionAndPushMessage } from '../actions/messageListActions'\n\nimport {\n  wsConnected,\n  wsDisconnected,\n  WS_CONNECT,\n  WS_DISCONNECT,\n} from '../actions/webSocketActions'\n\nconst webSocketMiddleware = () => {\n  let socket = null\n\n  const onOpen = store => event => {\n    store.dispatch(wsConnected(event.target.url))\n  }\n\n  const onClose = store => () => {\n    store.dispatch(wsDisconnected())\n  }\n\n  const onMessage = store => event => {\n    const data = JSON.parse(event.data)\n\n    switch (data.actionType) {\n      case 'save':\n        const messages = [data.message]\n        store.dispatch(\n          applyBackwardPreprocessorFunctionAndPushMessage(messages)\n        )\n        break\n      default:\n        break\n    }\n  }\n\n  return store => next => action => {\n    switch (action.type) {\n      case WS_CONNECT:\n        if (socket !== null) {\n          socket.close()\n        }\n\n        socket = new WebSocket(action.payload)\n        socket.onmessage = onMessage(store)\n        socket.onclose = onClose(store)\n        socket.onopen = onOpen(store)\n        break\n      case WS_DISCONNECT:\n        if (socket !== null) {\n          socket.close()\n        }\n\n        socket = null\n        break\n      default:\n        return next(action)\n    }\n  }\n}\n\nexport default webSocketMiddleware()\n","export const WS_CONNECT = 'WS_CONNECT'\nexport const WS_CONNECTING = 'WS_CONNECTING'\nexport const WS_CONNECTED = 'WS_CONNECTED'\nexport const WS_DISCONNECT = 'WS_DISCONNECT'\nexport const WS_DISCONNECTED = 'WS_DISCONNECTED'\n\nexport function wsConnect(host) {\n  return {\n    type: WS_CONNECT,\n    payload: host,\n  }\n}\n\nexport function wsConnecting() {\n  return {\n    type: WS_CONNECTING,\n  }\n}\n\nexport function wsConnected() {\n  return {\n    type: WS_CONNECTED,\n  }\n}\n\nexport function wsDisconnect() {\n  return {\n    type: WS_DISCONNECT,\n  }\n}\n\nexport function wsDisconnected() {\n  return {\n    type: WS_DISCONNECTED,\n  }\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nclass NewChatForm extends React.Component {\n  state = {\n    name: '',\n    users: [],\n  }\n\n  onSubmit = event => {\n    event.preventDefault()\n\n    this.props.onSubmitNewChat(this.state.name, [this.props.currentUserId])\n\n    this.setState({\n      name: '',\n      users: [],\n    })\n  }\n\n  updateChatNameValue = eventArg => {\n    this.setState({\n      name: eventArg.target.value,\n    })\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.onSubmit}>\n        <h4>+Chat</h4>\n        <input\n          name=\"chatName\"\n          placeholder=\"chat name\"\n          type=\"text\"\n          value={this.state.name}\n          onChange={this.updateChatNameValue}\n        />\n        <button type=\"submit\">Create new chat</button>\n      </form>\n    )\n  }\n}\n\nNewChatForm.propTypes = {\n  currentUserId: PropTypes.string.isRequired,\n  onSubmitNewChat: PropTypes.func.isRequired,\n}\n\nexport { NewChatForm }\n","export function addLeadZero(number) {\n  if (number < 10) return '0' + number\n  return number\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { addLeadZero } from '../../helper'\n\nimport './MessageFrame-MessageTimestamp.sass'\n\nfunction MessageTimestamp(props) {\n  const date = new Date(props.time)\n  let hours = addLeadZero(date.getHours())\n  let minutes = addLeadZero(date.getMinutes())\n  let day = addLeadZero(date.getDate())\n  let month = addLeadZero(date.getMonth() + 1)\n  let year = date.getFullYear()\n\n  return (\n    <div className=\"messageFrame-MessageTimestamp\">\n      <span>\n        {hours}:{minutes} {day}.{month}.{year}\n      </span>\n    </div>\n  )\n}\n\nMessageTimestamp.propTypes = {\n  time: PropTypes.oneOfType([\n    PropTypes.number,\n    PropTypes.string,\n    PropTypes.instanceOf(Date),\n  ]).isRequired,\n}\n\nexport { MessageTimestamp }\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport './MessageFrame-AuthorNameLabel.sass'\n\nfunction AuthorNameLabel(props) {\n  return (\n    <span className=\"messageFrame-AuthorNameLabel\">{props.authorName}</span>\n  )\n}\n\nAuthorNameLabel.propTypes = {\n  authorName: PropTypes.string,\n}\n\nexport { AuthorNameLabel }\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nfunction MessageTextField(props) {\n  return <span>{props.text}</span>\n}\n\nMessageTextField.propTypes = {\n  text: PropTypes.string,\n}\n\nexport { MessageTextField }\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { MessageTimestamp } from './__MessageTimestamp/MessageFrame-MessageTimestamp'\nimport { AuthorNameLabel } from './__AuthorNameLabel/MessageFrame-AuthorNameLabel'\nimport { MessageTextField } from './__MessageTextField/MessageFrame-MessageTextField'\n\nimport './MessageFrame.sass'\nimport './_user/MessageFrame_user_another.sass'\nimport './_user/MessageFrame_user_current.sass'\n\nclass MessageFrame extends React.Component {\n  renderAuthorName = () => {\n    const { message, currentUserEmail } = this.props\n\n    if (currentUserEmail === message.authorEmail) {\n      return\n    } else {\n      return <AuthorNameLabel authorName={message.authorName} />\n    }\n  }\n\n  render() {\n    const { message, currentUserEmail } = this.props\n    let messageFrameClass = 'messageFrame'\n\n    if (currentUserEmail === message.authorEmail) {\n      messageFrameClass += ' messageFrame_user_current'\n    } else {\n      messageFrameClass += ' messageFrame_user_another'\n    }\n\n    return (\n      <div className={messageFrameClass}>\n        <div>{this.renderAuthorName()}</div>\n        <div>\n          <MessageTextField text={message.text} />\n        </div>\n        <div>\n          <MessageTimestamp time={message.time} />\n        </div>\n      </div>\n    )\n  }\n}\n\nMessageFrame.propTypes = {\n  message: PropTypes.exact({\n    _id: PropTypes.string,\n    chatId: PropTypes.string.isRequired,\n    authorName: PropTypes.string.isRequired,\n    authorEmail: PropTypes.string.isRequired,\n    time: PropTypes.oneOfType([\n      PropTypes.number,\n      PropTypes.string,\n      PropTypes.instanceOf(Date),\n    ]).isRequired,\n    text: PropTypes.string.isRequired,\n    wasMessageReceived: PropTypes.bool,\n  }),\n}\n\nexport { MessageFrame }\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport './MessageList-ScrollDownButton.sass'\n\nfunction ScrollDownButton(props) {\n  const strToDecode = '&#11015'\n  const parser = new DOMParser()\n  const decodedString = parser.parseFromString(\n    `<!doctype html><body>${strToDecode}`,\n    'text/html'\n  ).body.textContent\n\n  return (\n    <div className=\"scrollDownButton\" onClick={props.onScrollDownClick}>\n      {decodedString}\n    </div>\n  )\n}\n\nScrollDownButton.propTypes = {\n  text: PropTypes.string,\n}\n\nexport { ScrollDownButton }\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nclass NewMessageForm extends React.Component {\n  state = {\n    newMessage: '',\n  }\n\n  onSubmit = event => {\n    event.preventDefault()\n\n    this.props.onSubmitNewMessage(this.state.newMessage)\n\n    this.setState({\n      newMessage: '',\n    })\n  }\n\n  updateInputValue = eventArg => {\n    this.setState({\n      newMessage: eventArg.target.value,\n    })\n  }\n\n  render() {\n    return (\n      <form className=\"new-message-input\" onSubmit={this.onSubmit}>\n        <h4>+Message</h4>\n        <input\n          name=\"userMessage\"\n          placeholder=\"message text\"\n          type=\"text\"\n          value={this.state.newMessage}\n          onChange={this.updateInputValue}\n        />\n        <button type=\"submit\">Send message</button>\n      </form>\n    )\n  }\n}\n\nNewMessageForm.propTypes = {\n  onSubmitNewMessage: PropTypes.func.isRequired,\n}\n\nexport { NewMessageForm }\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport PropTypes from 'prop-types'\nimport {\n  fetchMessagesList,\n  fetchNewMessages,\n  subscribeForNewMessages,\n  unsubscribeForNewMessages,\n} from '../../actions/messageListActions'\n\nimport { MessageFrame } from '../../components/MessageFrame/MessageFrame'\nimport { ScrollDownButton } from './__ScrollDownButton/MessageList-ScrollDownButton'\nimport { NewMessageForm } from '../../components/NewMessageForm/NewMessageForm'\n//import { updateInterval } from '../applicationSettings'\nimport './MessageList.sass'\n\nclass MessageList extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.messageListRef = React.createRef()\n\n    this.state = {\n      enableScrollDown: true,\n      previousMessagesLength: 0,\n      suspendMessagesFetching: false,\n      currentChat: null,\n      needScrollDown: true,\n      showScrollDownButton: false,\n    }\n  }\n\n  componentDidMount = () => {\n    const { currentChat, subscribeForNewMessages } = this.props\n    if (this.state.currentChat !== currentChat) {\n      this.setState({ currentChat })\n      subscribeForNewMessages(this.props.currentChat._id)\n    }\n    this.fetchMessages()\n    //this.initializeMessagesListUpdateTimer()\n  }\n\n  // initializeMessagesListUpdateTimer = () => {\n  //   this.timerID = setInterval(() => {\n  //     this.fetchNewMessages()\n  //     this.tryLoadMessagesUntilScrollAppears()\n  //   }, updateInterval)\n  // }\n\n  componentWillUnmount() {\n    this.props.unsubscribeForNewMessages()\n    //clearInterval(this.timerID)\n  }\n\n  componentDidUpdate = () => {\n    const { messages, currentChat, subscribeForNewMessages } = this.props\n    const scrollDownShift = 30\n    const { current } = this.messageListRef\n\n    if (this.state.currentChat !== currentChat) {\n      this.reloadMessagesList()\n      subscribeForNewMessages(this.props.currentChat._id)\n      return\n    }\n\n    if (!messages) return\n\n    const messagesLength = messages.length\n    const previousMessagesLength = this.state.previousMessagesLength\n\n    if (messagesLength <= previousMessagesLength) {\n      return\n    }\n\n    this.setState({\n      previousMessagesLength: messagesLength,\n      suspendMessagesFetching: false,\n    })\n\n    if (current) {\n      current.scrollTop += scrollDownShift\n    }\n\n    this.scrollDownIfNeed()\n  }\n\n  reloadMessagesList = () => {\n    this.setState({\n      currentChat: this.props.currentChat,\n      previousMessagesLength: 0,\n      suspendMessagesFetching: true,\n      needScrollDown: true,\n    })\n\n    this.fetchMessagesForced()\n  }\n\n  fetchMessages = () => {\n    if (this.state.suspendMessagesFetching) return\n\n    this.fetchMessagesForced()\n  }\n\n  fetchMessagesForced = () => {\n    const currentChat = this.props.currentChat\n    const messages = this.props.messages\n\n    if (!currentChat || !currentChat._id) return\n    if (!messages) return\n\n    const time = new Date().getTime()\n\n    const oldestMessageTime = messages.length ? messages[0].time : time\n\n    this.props.fetchMessagesList(currentChat._id, oldestMessageTime)\n  }\n\n  fetchNewMessages = () => {\n    const currentChat = this.props.currentChat\n    const messages = this.props.messages\n\n    if (!currentChat || !currentChat._id) return\n    if (!messages) return\n\n    const lastMessageIndex = messages.length - 1\n\n    if (lastMessageIndex < 0) {\n      this.fetchMessages()\n      return\n    }\n\n    this.props.fetchNewMessages(\n      currentChat._id,\n      messages[lastMessageIndex].time\n    )\n  }\n\n  scrollDownIfNeed = () => {\n    if (this.state.needScrollDown) {\n      this.setState({\n        needScrollDown: false,\n      })\n\n      this.scrollDown()\n    }\n  }\n\n  tryLoadMessagesUntilScrollAppears() {\n    const { current } = this.messageListRef\n\n    if (current.offsetWidth <= current.clientWidth) {\n      this.fetchMessages()\n    }\n  }\n\n  scrollDown = () => {\n    const { current } = this.messageListRef\n\n    this.setState({\n      needScrollDown: false,\n    })\n\n    if (current) {\n      current.scrollTop = current.scrollHeight\n    }\n  }\n\n  onScrollDownClick = () => {\n    this.scrollDown()\n  }\n\n  onScroll = () => {\n    const minScrollTop = 200\n    const scrollDownButtonThreshold = 200\n    const {\n      scrollHeight,\n      scrollTop,\n      clientHeight,\n    } = this.messageListRef.current\n\n    this.setState({\n      showScrollDownButton:\n        scrollHeight - scrollTop >= clientHeight + scrollDownButtonThreshold,\n    })\n\n    if (this.state.suspendMessagesFetching) return\n\n    if (scrollTop < minScrollTop) {\n      this.setState({\n        suspendMessagesFetching: true,\n      })\n\n      this.fetchMessages()\n    }\n  }\n\n  sendNewMessage = newMessage => {\n    this.props.sendNewMessage(newMessage)\n\n    this.setState({\n      needScrollDown: true,\n    })\n  }\n\n  renderMessageList = () => {\n    const { messages, currentUser } = this.props\n    const messagesLength = messages.length\n\n    if (messages && messagesLength) {\n      return messages.map(function(item, index) {\n        return (\n          <div key={index}>\n            <MessageFrame message={item} currentUserEmail={currentUser.email} />\n          </div>\n        )\n      })\n    }\n  }\n\n  renderScrollDownButton = () => {\n    if (this.state.showScrollDownButton) {\n      return <ScrollDownButton onScrollDownClick={this.onScrollDownClick} />\n    }\n  }\n\n  render() {\n    const strToDecode = '&#11015'\n    const parser = new DOMParser()\n    const decodedString = parser.parseFromString(\n      `<!doctype html><body>${strToDecode}`,\n      'text/html'\n    ).body.textContent\n\n    return (\n      <div>\n        {this.renderScrollDownButton()}\n        <div\n          ref={this.messageListRef}\n          className=\"message-list\"\n          onScroll={this.onScroll}\n        >\n          {this.renderMessageList()}\n        </div>\n        <NewMessageForm onSubmitNewMessage={this.sendNewMessage} />\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    messages: state.messages,\n    currentChat: state.currentChat,\n    currentUser: state.currentUser,\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    fetchMessagesList: (chatId, oldestMessageTime) =>\n      dispatch(fetchMessagesList(chatId, oldestMessageTime)),\n    fetchNewMessages: (chatId, newestMessageTime) =>\n      dispatch(fetchNewMessages(chatId, newestMessageTime)),\n    subscribeForNewMessages: chatId =>\n      dispatch(subscribeForNewMessages(chatId)),\n    unsubscribeForNewMessages: () => dispatch(unsubscribeForNewMessages()),\n  }\n}\n\nMessageList.propTypes = {\n  messages: PropTypes.arrayOf(\n    PropTypes.shape({\n      message: PropTypes.exact({\n        chatId: PropTypes.number.isRequired,\n        authorName: PropTypes.string.isRequired,\n        authorEmail: PropTypes.string.isRequired,\n        time: PropTypes.oneOfType([\n          PropTypes.number,\n          PropTypes.string,\n          PropTypes.instanceOf(Date),\n        ]).isRequired,\n        text: PropTypes.string.isRequired,\n        wasMessageReceived: PropTypes.bool,\n      }),\n    })\n  ),\n}\n\nexport { MessageList }\nexport default connect(mapStateToProps, mapDispatchToProps)(MessageList)\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport './ChatList-ChatFrame.sass'\n\nclass ChatFrame extends React.Component {\n  onSelectChat = () => {\n    const { chat } = this.props\n\n    this.props.onSelectChat(chat)\n  }\n\n  renderUsersList = users => {\n    if (users && users.length) {\n      return users.map((item, index) => {\n        return (\n          <div key={index}>\n            <p>{item.name}</p>\n          </div>\n        )\n      })\n    }\n  }\n\n  render() {\n    const { chat } = this.props\n\n    return (\n      <div className=\"chatList-ChatFrame\" onClick={this.onSelectChat}>\n        <div>\n          <h4>{chat.name}</h4>\n        </div>\n        <div>\n          <p>Chat members:</p>\n          <div>{this.renderUsersList(chat.users)}</div>\n        </div>\n      </div>\n    )\n  }\n}\n\nChatFrame.propTypes = {\n  chat: PropTypes.exact({\n    _id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    users: PropTypes.arrayOf(\n      PropTypes.exact({\n        _id: PropTypes.string.isRequired,\n        name: PropTypes.string.isRequired,\n        email: PropTypes.string.isRequired,\n      })\n    ).isRequired,\n  }),\n  onSelectChat: PropTypes.func.isRequired,\n}\n\nexport { ChatFrame }\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport PropTypes from 'prop-types'\n\nimport {\n  fetchChatsList,\n  tryGetPreprocessorAnd–°hangeCurrentChat,\n} from '../../actions/chatSettingsActions'\n\nimport { ChatFrame } from './__ChatFrame/ChatList-ChatFrame'\n\nimport './ChatList.sass'\n\nclass ChatList extends React.Component {\n  componentDidMount() {\n    let userId = this.props.currentUser._id\n\n    if (!userId) return\n\n    this.props.fetchChatsList(userId)\n  }\n\n  renderChatList = () => {\n    const { chatsList, changeCurrentChat } = this.props\n\n    if (chatsList && chatsList.length) {\n      return chatsList.map(function(item) {\n        return (\n          <ChatFrame\n            onSelectChat={changeCurrentChat}\n            key={item._id}\n            chat={item}\n          />\n        )\n      })\n    }\n  }\n\n  render() {\n    return <div className=\"—Åhat-list\">{this.renderChatList()}</div>\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    chatsList: state.chatsList,\n    currentUser: state.currentUser,\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    fetchChatsList: userId => dispatch(fetchChatsList(userId)),\n    changeCurrentChat: chat =>\n      dispatch(tryGetPreprocessorAnd–°hangeCurrentChat(chat)),\n  }\n}\n\nChatList.propTypes = {\n  chatsList: PropTypes.arrayOf(\n    PropTypes.shape({\n      chat: PropTypes.exact({\n        _id: PropTypes.string.isRequired,\n        name: PropTypes.string.isRequired,\n        users: PropTypes.arrayOf(\n          PropTypes.shape({\n            _id: PropTypes.string.isRequired,\n            name: PropTypes.string.isRequired,\n            email: PropTypes.string.isRequired,\n          })\n        ).isRequired,\n      }),\n    })\n  ),\n  changeCurrentChat: PropTypes.func.isRequired,\n}\n\nexport { ChatList }\nexport default connect(mapStateToProps, mapDispatchToProps)(ChatList)\n","import React from 'react'\n\nimport './ModalWindow.sass'\n\nfunction asModalWindow(Component) {\n  return function(props) {\n    return (\n      <div className=\"modalWindow\">\n        <div>\n          <Component {...props} />\n        </div>\n      </div>\n    )\n  }\n}\n\nexport { asModalWindow }\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport './UserFrame.sass'\n\nclass UserFrame extends React.Component {\n  onUserClick = () => {\n    const { user } = this.props\n\n    this.props.onUserClick(user)\n  }\n\n  render() {\n    const { user } = this.props\n\n    return (\n      <div className=\"userFrame\" onClick={this.onUserClick}>\n        <span>{user.name}</span>\n      </div>\n    )\n  }\n}\n\nUserFrame.propTypes = {\n  chat: PropTypes.exact({\n    _id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    email: PropTypes.string.isRequired,\n  }),\n  onSelectUser: PropTypes.func,\n}\n\nexport { UserFrame }\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport './InputField.sass'\n\nfunction InputField(props) {\n  const { caption, name, placeholder, type, value, onChange } = props\n\n  return (\n    <div className=\"inputField\">\n      <label>{caption}</label>\n      <input\n        name={name}\n        placeholder={placeholder}\n        type={type}\n        value={value}\n        onChange={onChange}\n      />\n    </div>\n  )\n}\n\nInputField.propTypes = {\n  caption: PropTypes.string,\n  name: PropTypes.string,\n  placeholder: PropTypes.string,\n  type: PropTypes.string,\n  value: PropTypes.string,\n  onChange: PropTypes.func,\n}\n\nexport { InputField }\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport { InputField } from '../../InputField/InputField'\n\nimport '../../SubmitButton/SubmitButton.sass'\n\nclass SeekForm extends React.Component {\n  state = {\n    userSeekData: '',\n  }\n\n  onSubmit = eventArg => {\n    eventArg.preventDefault()\n\n    this.props.onSubmitUserSeekData(this.state.userSeekData)\n\n    this.setState({\n      searchQueryString: '',\n    })\n  }\n\n  updateSearchQueryString = eventArg => {\n    this.setState({\n      userSeekData: eventArg.target.value,\n    })\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.onSubmit}>\n        <InputField\n          caption=\"User email\"\n          name=\"userEmail\"\n          placeholder=\"User email\"\n          type=\"text\"\n          value={this.state.userSeekData}\n          onChange={this.updateSearchQueryString}\n        />\n        <div align=\"center\">\n          <button className=\"submitButton\" type=\"submit\">\n            Find users\n          </button>\n        </div>\n      </form>\n    )\n  }\n}\n\nSeekForm.propTypes = {\n  onSubmitUserSeekData: PropTypes.func.isRequired,\n}\n\nexport { SeekForm }\n","import React from 'react'\nimport { UserFrame } from '../UserFrame/UserFrame'\nimport { SeekForm } from './__SeekForm/AddToChatNewUserWindow-SeekForm'\nimport PropTypes from 'prop-types'\n\nimport './AddToChatNewUserWindow.sass'\nimport '../CloseButton/CloseButton.sass'\nimport './__UsersList/AddToChatNewUserWindow-UsersList.sass'\n\nclass AddToChatNewUserWindow extends React.Component {\n  onSubmitUserSeekData = userSeekData => {\n    this.props.findUsers(userSeekData)\n  }\n\n  renderUsersList = () => {\n    const { usersList, onUserClick } = this.props\n\n    if (usersList && usersList.length) {\n      return usersList.map(function(item) {\n        return (\n          <UserFrame onUserClick={onUserClick} key={item._id} user={item} />\n        )\n      })\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"addToChatNewUserWindow\">\n        <h4>Search for a new member</h4>\n        <button className=\"closeButton\" onClick={this.props.onCancelClick}>\n          X\n        </button>\n        <SeekForm onSubmitUserSeekData={this.onSubmitUserSeekData} />\n        <div className=\"addToChatNewUserWindow-UsersList\">\n          {this.renderUsersList()}\n        </div>\n      </div>\n    )\n  }\n}\n\nAddToChatNewUserWindow.propTypes = {\n  usersList: PropTypes.arrayOf(\n    PropTypes.shape({\n      user: PropTypes.exact({\n        _id: PropTypes.number.isRequired,\n        name: PropTypes.string.isRequired,\n        email: PropTypes.string.isRequired,\n      }),\n    })\n  ),\n  findUsers: PropTypes.func.isRequired,\n  onUserClick: PropTypes.func.isRequired,\n  cancelUserAdding: PropTypes.func.isRequired,\n}\n\nexport { AddToChatNewUserWindow }\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport './SpecialMessagesPreprocessorMenu.sass'\n\nclass SpecialMessagesPreprocessorMenu extends React.Component {\n  state = {\n    file: null,\n    filePath: '',\n  }\n\n  onSubmit = event => {\n    const { file } = this.state\n    const { onSubmit } = this.props\n\n    event.preventDefault()\n\n    if (file) {\n      onSubmit(file)\n    }\n  }\n\n  updateMessagesPreprocessorFile = eventArg => {\n    this.setState({\n      file: eventArg.target.files[0],\n      filePath: eventArg.target.value,\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"specialMessagesPreprocessorMenu\">\n        <form onSubmit={this.onSubmit}>\n          <h4>+Chat</h4>\n          <input\n            name=\"messagesPreprocessorFile\"\n            type=\"file\"\n            value={this.state.filePath}\n            onChange={this.updateMessagesPreprocessorFile}\n          />\n          <button type=\"submit\">Add special messages preprocessor</button>\n          <button onClick={this.props.onCancelClick}>Cancel</button>\n        </form>\n      </div>\n    )\n  }\n}\n\nSpecialMessagesPreprocessorMenu.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n  onCancelClick: PropTypes.string,\n}\n\nexport { SpecialMessagesPreprocessorMenu }\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport PropTypes from 'prop-types'\n\nimport { asModalWindow } from '../components/ModalWindow/asModalWindow'\nimport { AddToChatNewUserWindow } from '../components/AddToChatNewUserWindow/AddToChatNewUserWindow'\nimport { SpecialMessagesPreprocessorMenu } from '../components/SpecialMessagesPreprocessorMenu/SpecialMessagesPreprocessorMenu'\nimport {\n  findUsers,\n  addNewUserToCurrentChat,\n  addNewSpecialMessagesPreprocessor,\n} from '../actions/chatSettingsActions'\n\nconst AddToChatNewUserModalWindow = asModalWindow(AddToChatNewUserWindow)\nconst SpecialMessagesPreprocessorModalWindow = asModalWindow(\n  SpecialMessagesPreprocessorMenu\n)\n\nclass CurrentChatSettings extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      showAddedUserMenu: false,\n      showSpecialMessagesPreprocessorMenu: false,\n    }\n  }\n\n  onAddUserButtonClick = () => {\n    this.setState({\n      showAddedUserMenu: true,\n    })\n  }\n\n  onAddSpecialMessagesPreprocessorButtonClick = () => {\n    this.setState({\n      showSpecialMessagesPreprocessorMenu: true,\n    })\n  }\n\n  addNewUserToCurrentChat = user => {\n    this.cancelUserAdding()\n    this.props.addNewUserToCurrentChat(user)\n  }\n\n  cancelUserAdding = () => {\n    this.setState({\n      showAddedUserMenu: false,\n    })\n  }\n\n  addNewSpecialMessagesPreprocessor = preprocessorFunctionString => {\n    this.cancelSpecialMessagesPreprocessorAdding()\n    this.props.addNewSpecialMessagesPreprocessor(preprocessorFunctionString)\n  }\n\n  cancelSpecialMessagesPreprocessorAdding = () => {\n    this.setState({\n      showSpecialMessagesPreprocessorMenu: false,\n    })\n  }\n\n  renderAddedUserWindow = () => {\n    const {\n      showAddedUserMenu,\n      showSpecialMessagesPreprocessorMenu,\n    } = this.state\n    const { currentChat, findUsers, usersList } = this.props\n\n    if (showAddedUserMenu) {\n      return (\n        <AddToChatNewUserModalWindow\n          findUsers={findUsers}\n          usersList={usersList}\n          onUserClick={this.addNewUserToCurrentChat}\n          onCancelClick={this.cancelUserAdding}\n        />\n      )\n    }\n\n    if (showSpecialMessagesPreprocessorMenu) {\n      return (\n        <SpecialMessagesPreprocessorModalWindow\n          currentChat={currentChat}\n          onSubmit={this.addNewSpecialMessagesPreprocessor}\n          onCancelClick={this.cancelSpecialMessagesPreprocessorAdding}\n        />\n      )\n    }\n\n    if (currentChat._id) {\n      return (\n        <React.Fragment>\n          <button onClick={this.onAddUserButtonClick}>\n            Add new user to chat\n          </button>\n          <button onClick={this.onAddSpecialMessagesPreprocessorButtonClick}>\n            Add special messages preprocessor\n          </button>\n        </React.Fragment>\n      )\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <span>Chat: {this.props.currentChat.name}</span>\n        {this.renderAddedUserWindow()}\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    currentChat: state.currentChat,\n    usersList: state.usersList,\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    findUsers: userSeekData => dispatch(findUsers(userSeekData)),\n    addNewUserToCurrentChat: user => dispatch(addNewUserToCurrentChat(user)),\n    addNewSpecialMessagesPreprocessor: file =>\n      dispatch(addNewSpecialMessagesPreprocessor(file)),\n  }\n}\n\nCurrentChatSettings.propTypes = {\n  usersList: PropTypes.arrayOf(\n    PropTypes.shape({\n      user: PropTypes.exact({\n        _id: PropTypes.number.isRequired,\n        name: PropTypes.string.isRequired,\n        email: PropTypes.string.isRequired,\n      }),\n    })\n  ),\n  currentChat: PropTypes.exact({\n    _id: PropTypes.string,\n    name: PropTypes.string,\n    users: PropTypes.arrayOf(\n      PropTypes.shape({\n        _id: PropTypes.string.isRequired,\n        name: PropTypes.string.isRequired,\n        email: PropTypes.string.isRequired,\n      })\n    ),\n    forwardPreprocessorFunction: PropTypes.func,\n    backwardPreprocessorFunction: PropTypes.func,\n  }),\n  findUsers: PropTypes.func.isRequired,\n  addNewUserToCurrentChat: PropTypes.func.isRequired,\n}\n\nexport { CurrentChatSettings }\nexport default connect(mapStateToProps, mapDispatchToProps)(CurrentChatSettings)\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport { InputField } from '../InputField/InputField'\n\nimport './AuthenticationAndRegistrationForm.sass'\nimport '../SubmitButton/SubmitButton.sass'\n\nclass AuthenticationAndRegistrationForm extends React.Component {\n  state = {\n    email: '',\n    name: '',\n    password: '',\n    isRegistrationMode: false,\n  }\n\n  onSubmit = eventArg => {\n    eventArg.preventDefault()\n\n    const { email, name, password, isRegistrationMode } = this.state\n    const { onAuthenticationSubmit, onRegistrationSubmit } = this.props\n\n    const user = {\n      email,\n      name,\n      password,\n    }\n\n    if (isRegistrationMode) {\n      onRegistrationSubmit(user)\n    } else {\n      onAuthenticationSubmit(email, password)\n    }\n\n    this.setState({\n      email: '',\n      name: '',\n      password: '',\n    })\n  }\n\n  updateUserEmailValue = eventArg => {\n    this.setState({\n      email: eventArg.target.value,\n    })\n  }\n\n  updateUserNameValue = eventArg => {\n    this.setState({\n      name: eventArg.target.value,\n    })\n  }\n\n  updateUserPasswordValue = eventArg => {\n    this.setState({\n      password: eventArg.target.value,\n    })\n  }\n\n  changeMode = ({ target: { checked } }) => {\n    this.setState({\n      isRegistrationMode: checked,\n    })\n  }\n\n  renderHeader = () => {\n    let headerText\n\n    if (this.state.isRegistrationMode) {\n      headerText = 'New user registration'\n    } else {\n      headerText = 'Login'\n    }\n\n    return (\n      <h3 className=\"authenticationAndRegistrationForm__Header\">\n        {headerText}\n      </h3>\n    )\n  }\n\n  renderUserNameInputField = () => {\n    if (this.state.isRegistrationMode) {\n      return (\n        <InputField\n          caption=\"User name\"\n          name=\"userName\"\n          placeholder=\"User name\"\n          type=\"text\"\n          value={this.state.name}\n          onChange={this.updateUserNameValue}\n        />\n      )\n    }\n  }\n\n  renderSubmitButton = () => {\n    let buttonText\n\n    if (this.state.isRegistrationMode) {\n      buttonText = 'Sign up'\n    } else {\n      buttonText = 'Sign in'\n    }\n\n    return (\n      <button className=\"submitButton\" type=\"submit\">\n        {buttonText}\n      </button>\n    )\n  }\n\n  render() {\n    return (\n      <div className=\"authenticationAndRegistrationForm\">\n        <input type=\"checkbox\" onClick={this.changeMode} />\n        <span>Registration</span>\n        <form onSubmit={this.onSubmit}>\n          <div align=\"center\">{this.renderHeader()}</div>\n          {this.renderUserNameInputField()}\n          <InputField\n            caption=\"User email\"\n            name=\"userEmail\"\n            placeholder=\"User email\"\n            type=\"text\"\n            value={this.state.email}\n            onChange={this.updateUserEmailValue}\n          />\n          <InputField\n            caption=\"User password\"\n            name=\"userPassword\"\n            placeholder=\"User password\"\n            type=\"text\"\n            value={this.state.password}\n            onChange={this.updateUserPasswordValue}\n          />\n          <div align=\"center\">{this.renderSubmitButton()}</div>\n        </form>\n      </div>\n    )\n  }\n}\n\nAuthenticationAndRegistrationForm.propTypes = {\n  onAuthenticationSubmit: PropTypes.func.isRequired,\n  onRegistrationSubmit: PropTypes.func.isRequired,\n}\n\nexport { AuthenticationAndRegistrationForm }\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport { AuthenticationAndRegistrationForm } from '../AuthenticationAndRegistrationForm/AuthenticationAndRegistrationForm'\n\nimport './AuthenticationAndRegistrationWindow.sass'\n\nfunction AuthenticationAndRegistrationWindow(props) {\n  return (\n    <div className=\"authenticationAndRegistrationWindow\">\n      <AuthenticationAndRegistrationForm {...props} />\n    </div>\n  )\n}\n\nAuthenticationAndRegistrationWindow.propTypes = {\n  submitUserEmailAndPassword: PropTypes.func,\n  submitNewUser: PropTypes.func,\n}\n\nexport { AuthenticationAndRegistrationWindow }\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nfunction SettingsPanel(props) {\n  return (\n    <div>\n      <button onClick={props.onSignOut}>Sign out</button>\n      <span>{props.currentUserName}</span>\n    </div>\n  )\n}\n\nSettingsPanel.propTypes = {\n  onSignOut: PropTypes.func.isRequired,\n  currentUserName: PropTypes.string,\n}\n\nexport { SettingsPanel }\n","import React from 'react'\nimport { NewChatForm } from '../components/NewChatForm/NewChatForm'\nimport MessageList from './MessageList/MessageList'\nimport ChatList from './ChatList/ChatList'\nimport CurrentChatSettings from './CurrentChatSettings'\nimport { asModalWindow } from '../components/ModalWindow/asModalWindow'\nimport { AuthenticationAndRegistrationWindow } from '../components/AuthenticationAndRegistrationWindow/AuthenticationAndRegistrationWindow'\nimport { SettingsPanel } from '../components/SettingsPanel/SettingsPanel'\nimport { ErrorWindow } from '../components/ErrorWindow/ErrorWindow'\nimport { connect } from 'react-redux'\nimport { encryptAndSendNewMessage } from '../actions/messageListActions'\n\nimport {\n  checkIsUserAuthenticated,\n  submitUserEmailAndPassword,\n  submitNewUser,\n  createNewChat,\n  resetAuthenticationResult,\n  clearLastError,\n} from '../actions/chatSettingsActions'\n\nimport './App.sass'\n\nconst ErrorModalWindow = asModalWindow(ErrorWindow)\n\nclass App extends React.Component {\n  componentDidMount() {\n    this.props.checkIsUserAuthenticated()\n  }\n\n  renderChatListNewChatForm() {\n    if (this.props.currentUser._id) {\n      return (\n        <div>\n          <ChatList />\n          <NewChatForm\n            onSubmitNewChat={this.props.createNewChat}\n            currentUserId={this.props.currentUser._id}\n          />\n        </div>\n      )\n    }\n  }\n\n  renderMessageList() {\n    if (!this.props.currentUser._id) return\n    if (!this.props.currentChat._id) return\n\n    return <MessageList sendNewMessage={this.props.sendNewMessage} />\n  }\n\n  renderErrorWindow() {\n    if (!this.props.lastError) return\n\n    return (\n      <ErrorModalWindow\n        onOk={this.props.clearLastError}\n        lastError={this.props.lastError}\n      />\n    )\n  }\n\n  onSignOut = () => {\n    this.props.resetAuthenticationResult()\n  }\n\n  renderMainContent() {\n    if (this.props.isUserAuthenticated) {\n      return (\n        <React.Fragment>\n          <div className=\"main-panel\">\n            <div className=\"user-chats-panel\">\n              {this.renderChatListNewChatForm()}\n            </div>\n            <div className=\"current-chat-panel\">{this.renderMessageList()}</div>\n          </div>\n          <div className=\"top-panel\">\n            <SettingsPanel\n              onSignOut={this.onSignOut}\n              currentUserName={this.props.currentUser.name}\n            />\n            <CurrentChatSettings className=\"current-chat-settings\" />\n          </div>\n        </React.Fragment>\n      )\n    }\n\n    return (\n      <AuthenticationAndRegistrationWindow\n        onAuthenticationSubmit={this.props.submitUserEmailAndPassword}\n        onRegistrationSubmit={this.props.submitNewUser}\n      />\n    )\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        {this.renderErrorWindow()}\n        <div className=\"app-panel\">{this.renderMainContent()}</div>\n      </React.Fragment>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    currentUser: state.currentUser,\n    currentChat: state.currentChat,\n    wasMessageReceived: state.wasMessageReceived,\n    isUserAuthenticated: state.isUserAuthenticated,\n    lastError: state.lastError,\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    checkIsUserAuthenticated: () => dispatch(checkIsUserAuthenticated()),\n    createNewChat: (chatName, usersIds) =>\n      dispatch(createNewChat(chatName, usersIds)),\n    sendNewMessage: message => dispatch(encryptAndSendNewMessage(message)),\n    submitUserEmailAndPassword: (userEmail, userPassword) =>\n      dispatch(submitUserEmailAndPassword(userEmail, userPassword)),\n    submitNewUser: user => dispatch(submitNewUser(user)),\n    resetAuthenticationResult: () => dispatch(resetAuthenticationResult()),\n    clearLastError: () => dispatch(clearLastError()),\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App)\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport './ErrorWindow.sass'\n\nfunction ErrorWindow(props) {\n  const { status, badStatusText, message } = props.lastError\n\n  let statusParagraph, badStatusTextParagraph, messageParagraph\n\n  if (status) {\n    statusParagraph = <p>Status: {status}</p>\n    badStatusTextParagraph = <p>Status text: {badStatusText}</p>\n    messageParagraph = <p>Message: {message}</p>\n  }\n\n  return (\n    <div className=\"errorWindow\">\n      <div>\n        <h4>Error</h4>\n      </div>\n      <div>\n        {statusParagraph}\n        {badStatusTextParagraph}\n        {messageParagraph}\n      </div>\n      <button onClick={props.onOk}>Ok</button>\n    </div>\n  )\n}\n\nErrorWindow.propTypes = {\n  lastError: PropTypes.exact({\n    status: PropTypes.number,\n    badStatusText: PropTypes.string,\n    message: PropTypes.string,\n  }),\n}\n\nexport { ErrorWindow }\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport configureStore from './store/configureStore'\nimport './index.css'\nimport App from './containers/App'\nimport * as serviceWorker from './serviceWorker'\n\nconst store = configureStore()\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","import { createStore, applyMiddleware } from 'redux'\nimport thunk from 'redux-thunk'\nimport rootReducer from '../reducers'\nimport wsMiddleware from '../middleware/webSocketMiddleware'\n\nexport default function configureStore(initialState) {\n  return createStore(rootReducer, applyMiddleware(thunk, wsMiddleware))\n}\n"],"sourceRoot":""}