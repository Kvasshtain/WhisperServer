{"version":3,"sources":["applicationSettings.js","actions/helper.js","actions/chatSettingsActions.js","actions/messageListActions.js","reducers/index.js","reducers/messageListData.js","reducers/chatSettings.js","components/NewChatForm.js","components/MessageTimestamp.js","components/MessageFrame.js","components/NewMessageInput.js","containers/MessageList.js","components/ChatFrame.js","containers/ChatList.js","components/UserFrame.js","components/UserSeekForm.js","components/AddToChatNewUserWindow.js","components/SpecialMessagesPreprocessorMenu.js","containers/CurrentChatSettings.js","components/AuthenticationForm.js","components/RegistrationForm.js","components/SettingsPanel.js","components/ErrorWindow.js","containers/App.js","serviceWorker.js","index.js","store/configureStore.js"],"names":["serverLocation","messageSendPath","messageGetPath","newMessageGetPath","submitNewChatPath","chatsListGetPath","submitUserEmailAndPasswordPath","submitNewUserPath","searchUsersPath","addNewUserToChatPath","fetchMessagesCount","updateInterval","httpHeadersWithoutToken","Accept","createHttpHeadersWithToken","token","Authorization","checkResponseAndCreateErrorIfBadStatus","response","ok","status","badStatusText","statusText","message","validateEmail","email","test","readTextFile","file","Promise","resolve","reject","reader","FileReader","onload","result","onerror","readAsText","convertMessages","messages","convertor","map","item","text","CHANGE_CURRENT_USER","CHANGE_CURRENT_CHAT","REFRESH_CHATS_LIST","SET_AUTHENTICATION_RESULT","SET_LAST_ERROR","FILL_FOUND_USERS_LIST","CLEAR_LAST_ERROR","ADD_NEW_SPECIAL_MESSAGES_PREPROCESSOR_FUNCTION","changeCurrentUser","user","type","payload","changeCurrentChat","chat","setAuthenticationResult","handleServerError","serverErrorData","dispatch","resetAuthenticationResult","setLastError","errorData","localStorage","removeItem","addNewSpecialMessagesPreprocessorFunction","forwardPreprocessorFunction","backwardPreprocessorFunction","tryGetPreprocessorAnd–°hangeCurrentChat","preprocessorString","getItem","_id","preprocessor","JSON","parse","Function","forward","backward","fetchChatsList","userId","a","async","fetch","method","headers","data","json","console","log","ADD_NEW_MESSAGE","MESSAGE_WAS_RECEIVED","REFRESH_MESSAGES_LIST","UNSHIFT_PREVIOUS_MESSAGES","PUSH_NEW_MESSAGES","addNewMessage","messageWasReceived","bool","encryptAndSendNewMessage","getState","currentChat","time","Date","getTime","authorEmail","currentUser","authorName","name","chatId","body","stringify","wasMessageReceived","sendNewMessage","combineReducers","state","action","previousMessages","newMessages","chatsList","isUserAuthenticated","lastError","usersList","NewChatForm","users","onSubmit","event","preventDefault","props","onSubmitNewChat","currentUserId","setState","updateChatNameValue","eventArg","target","value","this","placeholder","onChange","React","Component","MessageTimestamp","date","hours","getHours","minutes","getMinutes","day","getDate","month","getMonth","year","getFullYear","MessageFrame","messageFrameClass","currentUserEmail","className","NewMessageInput","newMessage","onSubmitNewMessage","updateInputValue","MessageList","componentDidMount","fetchMessages","initializeMessagesListUpdateTimer","componentDidUpdate","current","messageListRef","messagesLength","length","previousMessagesLength","suspendMessagesFetching","scrollTop","scrollDownIfEnabled","tryLoadMessagesUntilScrollAppears","timerID","setInterval","fetchNewMessages","oldestMessageTime","fetchMessagesList","lastMessageIndex","enableScrollDown","scrollDown","scrollHeight","renderMessageList","index","key","onScrollDownClick","onScroll","createRef","clearInterval","offsetWidth","clientWidth","decodedString","DOMParser","parseFromString","textContent","onClick","ref","connect","newestMessageTime","ChatFrame","onSelectChat","renderUsersList","ChatList","renderChatList","UserFrame","onUserClick","UserSeekForm","userSeekData","onSubmitUserSeekData","searchQueryString","updateSearchQueryString","AddToChatNewUserWindow","findUsers","onCancelClick","SpecialMessagesPreprocessorMenu","filePath","updateMessagesPreprocessorFile","files","CurrentChatSettings","onAddUserButtonClick","showAddedUserMenu","onAddSpecialMessagesPreprocessorButtonClick","showSpecialMessagesPreprocessorMenu","addNewUserToCurrentChat","cancelUserAdding","addNewSpecialMessagesPreprocessor","preprocessorFunctionString","cancelSpecialMessagesPreprocessorAdding","renderAddedUserWindow","Fragment","newUserId","str","trim","setItem","AuthenticationForm","password","updateUserEmailValue","updateUserPasswordValue","RegistrationForm","updateUserNameValue","SettingsPanel","onSignOut","currentUserName","ErrorWindow","statusParagraph","badStatusTextParagraph","messageParagraph","onOk","App","createNewChat","clearLastError","renderChatListNewChatForm","renderErrorWindow","submitNewUser","submitUserEmailAndPassword","renderMainContent","chatName","usersIds","newChatData","userEmail","userPassword","userAuthenticationData","Boolean","window","location","hostname","match","store","createStore","rootReducer","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qTAAaA,EAAiB,yBAEjBC,EAAkB,gBAClBC,EAAiB,wBACjBC,EAAoB,yBACpBC,EAAoB,aACpBC,EAAmB,qBACnBC,EAAiC,eACjCC,EAAoB,aACpBC,EAAkB,gBAClBC,EAAuB,oBAEvBC,EAAqB,EACrBC,EAAiB,I,QCbjBC,EAA0B,CACrCC,OAAQ,mBACR,eAAgB,oBAGX,SAASC,EAA2BC,GACzC,MAAO,CACLF,OAAQ,mBACR,eAAgB,mBAChBG,cAAc,UAAD,OAAYD,IAItB,SAASE,EAAuCC,GACrD,IAAIA,EAASC,GAKX,MAAO,CACLC,OAHsCF,EAAhCE,OAINC,cAJsCH,EAAxBI,WAKdC,QALsCL,EAAZK,SAUzB,SAASC,EAAcC,GAG5B,MAFY,8DAEDC,KAAKD,GAGX,SAASE,EAAaC,GAC3B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAIC,EAAS,IAAIC,WACjBD,EAAOE,OAAS,WACdJ,EAAQE,EAAOG,SAEjBH,EAAOI,QAAUL,EACjBC,EAAOK,WAAWT,MAYf,SAASU,EAAgBC,EAAUC,GAQxC,OAPIA,IACFD,EAAWA,EAASE,KAAI,SAAAC,GACtB,IAAMC,EAAOH,EAAUE,EAAKC,MAC5B,OAAO,eAAKD,EAAZ,CAAkBC,aAIfJ,ECzCF,IAAMK,EAAsB,sBACtBC,EAAsB,sBACtBC,EAAqB,qBACrBC,EAA4B,4BAC5BC,EAAiB,iBACjBC,EAAwB,wBACxBC,EAAmB,mBACnBC,EACX,iDAEK,SAASC,EAAkBC,GAChC,MAAO,CACLC,KAAMV,EACNW,QAASF,GAIN,SAASG,EAAkBC,GAChC,MAAO,CACLH,KAAMT,EACNU,QAASE,GAWN,SAASC,EAAwBvB,GACtC,MAAO,CACLmB,KAAMP,EACNQ,QAASpB,GAIN,SAASwB,EAAkBC,GAChC,OAAO,SAAAC,GAC0B,MAA3BD,EAAgBxC,QAClByC,EAASC,KAGXD,EAASE,EAAaH,KAInB,SAASG,EAAaC,GAC3B,MAAO,CACLV,KAAMN,EACNO,QAASS,GAWN,SAASF,IACd,OAAO,SAAAD,GACLI,aAAaC,WAAW,SACxBL,EAASH,GAAwB,KAU9B,SAASS,EACdC,EACAC,GAEA,MAAO,CACLf,KAAMH,EACNI,QAAS,CACPa,8BACAC,iCA6CC,SAASC,EAAuCb,GACrD,OAAO,SAAAI,GACL,IAEIO,EAA6BC,EAF3BE,EAAqBN,aAAaO,QAAQf,EAAKgB,KAIrD,GAAIF,EAAoB,CACtB,IAAMG,EAAeC,KAAKC,MAAML,GAEhCH,EAA8B,IAAIS,SAAS,OAAQH,EAAaI,SAChET,EAA+B,IAAIQ,SAAS,OAAQH,EAAaK,UAGnElB,EAASL,EAAkBC,IAEvBW,GAA+BC,GACjCR,EACEM,EACEC,EACAC,KA+CH,SAASW,EAAeC,GAC7B,OAAO,SAAMpB,GAAN,qBAAAqB,EAAAC,OAAA,8DAEelB,eAAVlD,EAFL,EAEKA,OAFL,mCAAAmE,EAAA,MAKsBE,MAAM,GAAD,OACvBpF,GADuB,OACNK,EADM,oBACsB4E,GAChD,CACEI,OAAQ,MACRC,QAASxE,EAA2BC,MATvC,UAKKG,EALL,OAaGqE,EAAOtE,EAAuCC,GAbjD,oCAAAgE,EAAA,MAgBchE,EAASsE,QAhBvB,QAgBCD,EAhBD,eAmBGA,EAAKlE,eACPwC,EAASF,EAAkB4B,IAC3BtB,aAAaC,WAAW,UAExBL,EAjMD,CACLP,KAAMR,EACNS,QA+LgCgC,IAvB3B,0DA2BHE,QAAQC,IAAI,QAAZ,MA3BG,0DCtMF,IAAMC,EAAkB,kBAClBC,EAAuB,uBACvBC,EAAwB,wBACxBC,EAA4B,4BAC5BC,EAAoB,oBAE1B,SAASC,GAAczE,GAC5B,MAAO,CACL+B,KAAMqC,EACNpC,QAAShC,GAIN,SAAS0E,GAAmBC,GACjC,MAAO,CACL5C,KAAMsC,EACNrC,QAAS2C,GAyBN,SAASC,GAAyBxD,GACvC,OAAO,SAACkB,EAAUuC,GAAc,IACtBhC,EAAgCgC,IAAWC,YAA3CjC,4BAEJA,IACFzB,EAAOyB,EAA4BzB,IAGrCkB,EAIG,SAAwBlB,GAC7B,OAAO,SAAOkB,EAAUuC,GAAjB,6BAAAlB,EAAAC,OAAA,8DAEGpE,EAAQkD,aAAalD,OAFxB,wBAKD8C,EAASoC,IAAmB,IAEtBK,GAAO,IAAIC,MAAOC,UAClBC,EAAcL,IAAWM,YAAYjF,MACrCkF,EAAaP,IAAWM,YAAYE,KACpCC,EAAST,IAAWC,YAAY5B,IAEhClD,EAAU,CACdsF,SACAP,OACAG,cACAE,aACAhE,QAjBD,YAAAuC,EAAA,MAoBsBE,MAAMpF,EAAiBC,EAAiB,CAC7DoF,OAAQ,OACRC,QAASxE,EAA2BC,GACpC+F,KAAMnC,KAAKoC,UAAUxF,MAvBtB,WAoBKL,EApBL,OA0BGqE,EAAOtE,EAAuCC,GA1BjD,oCAAAgE,EAAA,MA6BchE,EAASsE,QA7BvB,QA6BCD,EA7BD,eAgCGA,EAAKnE,QACPyC,EAASF,EAAkB4B,IAC3BhE,EAAQyF,oBAAqB,EAC7BnD,EAASmC,GAAczE,IACvB0C,aAAaC,WAAW,WAExB3C,EAAQyF,oBAAqB,EAC7BnD,EAASmC,GAAczE,IACvBsC,EAASoC,IAAmB,KAxC7B,0DA4CHR,QAAQC,IAAI,QAAZ,MA5CG,0DALIuB,CAAetE,KCtDbuE,mBAAgB,CAC7B3E,SCJK,WAAuC,IAArB4E,EAAoB,uDAAZ,GAAIC,EAAQ,uCAC3C,OAAQA,EAAO9D,MACb,KAAKqC,EACH,MAAM,GAAN,mBAAWwB,GAAX,CAAkBC,EAAO7D,UAC3B,KAAKsC,EACH,OAAOuB,EAAO7D,QAChB,KAAKuC,EACH,IAAMuB,EAAmBD,EAAO7D,QAChC,MAAM,GAAN,mBAAW8D,GAAX,YAAgCF,IAClC,KAAKpB,EACH,IAAMuB,EAAcF,EAAO7D,QAC3B,MAAM,GAAN,mBAAW4D,GAAX,YAAqBG,IACvB,QACE,OAAOH,IDRXH,mBCYK,WAAmD,IAAvBG,IAAsB,yDAARC,EAAQ,uCACvD,OAAQA,EAAO9D,MACb,KAAKsC,EACH,OAAOwB,EAAO7D,QAChB,QACE,OAAO4D,IDhBXT,YEHK,WAA0C,IAArBS,EAAoB,uDAAZ,GAAIC,EAAQ,uCAC9C,OAAQA,EAAO9D,MACb,KAAKV,EACH,OAAOwE,EAAO7D,QAChB,QACE,OAAO4D,IFDXd,YEKK,WAA0C,IAArBc,EAAoB,uDAAZ,GAAIC,EAAQ,uCAC9C,OAAQA,EAAO9D,MACb,KAAKT,EACH,OAAOuE,EAAO7D,QAChB,KAAKJ,EACH,OAAO,eAAKgE,EAAZ,GAAsBC,EAAO7D,SAC/B,QACE,OAAO4D,IFXXI,UEeK,WAAwC,IAArBJ,EAAoB,uDAAZ,GAAIC,EAAQ,uCAC5C,OAAQA,EAAO9D,MACb,KAAKR,EACH,OAAOsE,EAAO7D,QAChB,QACE,OAAO4D,IFnBXK,oBEuBK,WAAqD,IAAxBL,EAAuB,wDAARC,EAAQ,uCACzD,OAAQA,EAAO9D,MACb,KAAKP,EACH,OAAOqE,EAAO7D,QAChB,QACE,OAAO4D,IF3BXM,UE+BK,WAA0C,IAAvBN,EAAsB,uDAAd,KAAMC,EAAQ,uCAC9C,OAAQA,EAAO9D,MACb,KAAKN,EACH,OAAOoE,EAAO7D,QAChB,KAAKL,EACH,OAAO,KACT,QACE,OAAOiE,IFrCXO,UEyCK,WAAwC,IAArBP,EAAoB,uDAAZ,GAAIC,EAAQ,uCAC5C,OAAQA,EAAO9D,MACb,KAAKL,EACH,OAAOmE,EAAO7D,QAChB,QACE,OAAO4D,M,kDC9DPQ,G,8MACJR,MAAQ,CACNP,KAAM,GACNgB,MAAO,I,EAGTC,SAAW,SAAAC,GACTA,EAAMC,iBAEN,EAAKC,MAAMC,gBAAgB,EAAKd,MAAMP,KAAM,CAAC,EAAKoB,MAAME,gBAExD,EAAKC,SAAS,CACZvB,KAAM,GACNgB,MAAO,M,EAIXQ,oBAAsB,SAAAC,GACpB,EAAKF,SAAS,CACZvB,KAAMyB,EAASC,OAAOC,S,0EAKxB,OACE,0BAAMV,SAAUW,KAAKX,UACnB,qCACA,2BACEjB,KAAK,WACL6B,YAAY,YACZnF,KAAK,OACLiF,MAAOC,KAAKrB,MAAMP,KAClB8B,SAAUF,KAAKJ,sBAEjB,4BAAQ9E,KAAK,UAAb,wB,GAlCkBqF,IAAMC,WCAhC,SAASC,GAAiBb,GACxB,IAAMc,EAAO,IAAIvC,KAAKyB,EAAM1B,MACtByC,EAAQD,EAAKE,WACbC,EAAUH,EAAKI,aACfC,EAAML,EAAKM,UACXC,EAAQP,EAAKQ,WAAa,EAC1BC,EAAOT,EAAKU,cAElB,OACE,6BACE,2BACGT,EADH,IACWE,EADX,IACqBE,EADrB,IAC2BE,EAD3B,IACmCE,ICVzC,SAASE,GAAazB,GAAQ,IAExB0B,EADInI,EAA8ByG,EAA9BzG,QASR,OALEmI,EAJoC1B,EAArB2B,mBAGQpI,EAAQkF,YACX,uBAEA,uBAIpB,yBAAKmD,UAAWF,GACd,6BACE,2BAAInI,EAAQoF,aAEd,6BACE,2BAAIpF,EAAQkF,cAEd,6BACE,2BAAIlF,EAAQoB,OAEd,kBAACkG,GAAD,CAAkBvC,KAAM/E,EAAQ+E,Q,ICtBhCuD,G,8MACJ1C,MAAQ,CACN2C,WAAY,I,EAGdjC,SAAW,SAAAC,GACTA,EAAMC,iBAEN,EAAKC,MAAM+B,mBAAmB,EAAK5C,MAAM2C,YAEzC,EAAK3B,SAAS,CACZ2B,WAAY,M,EAIhBE,iBAAmB,SAAA3B,GACjB,EAAKF,SAAS,CACZ2B,WAAYzB,EAASC,OAAOC,S,0EAK9B,OACE,0BAAMqB,UAAU,oBAAoB/B,SAAUW,KAAKX,UACjD,wCACA,2BACEjB,KAAK,cACL6B,YAAY,eACZnF,KAAK,OACLiF,MAAOC,KAAKrB,MAAM2C,WAClBpB,SAAUF,KAAKwB,mBAEjB,4BAAQ1G,KAAK,UAAb,qB,GAhCsBqF,IAAMC,WCO9BqB,I,kBACJ,WAAYjC,GAAQ,IAAD,+BACjB,8CAAMA,KAWRkC,kBAAoB,WAClB,EAAKC,gBACL,EAAKC,qCAdY,EAqBnBC,mBAAqB,WAAO,IAClB9H,EAAa,EAAKyF,MAAlBzF,SAEA+H,EAAY,EAAKC,eAAjBD,QAER,GAAK/H,EAAL,CAEA,IAAMiI,EAAiBjI,EAASkI,OAG5BD,IAF2B,EAAKrD,MAAMuD,yBAI1C,EAAKvC,SAAS,CACZuC,uBAAwBF,IAG1B,EAAKrC,SAAS,CACZwC,yBAAyB,IAG3BL,EAAQM,WAlBgB,GAoBxB,EAAKC,sBAEL,EAAKC,uCA7CY,EAgDnBV,kCAAoC,WAClC,EAAKW,QAAUC,aAAY,kBAAM,EAAKC,qBAAoBtK,IAjDzC,EAoDnBwJ,cAAgB,WACd,IAAI,EAAKhD,MAAMwD,wBAAf,CAEA,IAAMtE,EAAc,EAAK2B,MAAM3B,YACzB9D,EAAW,EAAKyF,MAAMzF,SAE5B,GAAK8D,GAAgBA,EAAY5B,KAC5BlC,EAAL,CAEA,IAAM+D,GAAO,IAAIC,MAAOC,UAElB0E,EAAoB3I,EAASkI,OAASlI,EAAS,GAAG+D,KAAOA,EAE/D,EAAK0B,MAAMmD,kBAAkB9E,EAAY5B,IAAKyG,MAjE7B,EAoEnBD,iBAAmB,WACjB,IAAM5E,EAAc,EAAK2B,MAAM3B,YACzB9D,EAAW,EAAKyF,MAAMzF,SAE5B,GAAK8D,GAAgBA,EAAY5B,KAC5BlC,EAAL,CAEA,IAAM6I,EAAmB7I,EAASkI,OAAS,EAEvCW,EAAmB,EACrB,EAAKjB,gBAIP,EAAKnC,MAAMiD,iBACT5E,EAAY5B,IACZlC,EAAS6I,GAAkB9E,QApFZ,EAwFnBuE,oBAAsB,WAChB,EAAK1D,MAAMkE,mBACb,EAAKlD,SAAS,CACZkD,kBAAkB,IAGpB,EAAKC,eA9FU,EA0GnBA,WAAa,WAAO,IACVhB,EAAY,EAAKC,eAAjBD,QAERA,EAAQM,UAAYN,EAAQiB,cA7GX,EAgHnBC,kBAAoB,WAAO,IAAD,EACU,EAAKxD,MAA/BzF,EADgB,EAChBA,SAAUmE,EADM,EACNA,YACZ8D,EAAiBjI,EAASkI,OAEhC,GAAIlI,GAAYiI,EACd,OAAOjI,EAASE,KAAI,SAASC,EAAM+I,GACjC,OACE,yBAAKC,IAAKD,GACR,kBAAChC,GAAD,CAAclI,QAASmB,EAAMiH,iBAAkBjD,EAAYjF,aAxHlD,EA+HnBkK,kBAAoB,WAClB,EAAKL,cAhIY,EAmInBM,SAAW,WAEW,EAAKrB,eAAjBD,QAEIM,UAHS,KAInB,EAAKzC,SAAS,CACZwC,yBAAyB,IAG3B,EAAKR,kBA5IU,EAgJnBlD,eAAiB,SAAA6C,GACf,EAAK9B,MAAMf,eAAe6C,GAE1B,EAAK3B,SAAS,CACZkD,kBAAkB,KAjJpB,EAAKd,eAAiB5B,IAAMkD,YAE5B,EAAK1E,MAAQ,CACXkE,kBAAkB,EAClBX,uBAAwB,EACxBC,yBAAyB,GARV,E,sFAkBjBmB,cAActD,KAAKuC,W,0DAgFgB,IAC3BT,EAAY9B,KAAK+B,eAAjBD,QAEJA,EAAQyB,aAAezB,EAAQ0B,aACjCxD,KAAK2B,kB,+BAmDP,IAEM8B,GADS,IAAIC,WACUC,gBAAP,+BAFF,WAIlB,aACArF,KAAKsF,YAEP,OACE,6BACE,yBAAKxC,UAAU,qBAAqByC,QAAS7D,KAAKmD,mBAC/CM,GAEH,yBACEK,IAAK9D,KAAK+B,eACVX,UAAU,eACVgC,SAAUpD,KAAKoD,UAEdpD,KAAKgD,qBAER,kBAAC,GAAD,CAAiBzB,mBAAoBvB,KAAKvB,sB,GA7KxB0B,IAAMC,YAwNjB2D,gBArCS,SAAApF,GACtB,MAAO,CACL5E,SAAU4E,EAAM5E,SAChB8D,YAAac,EAAMd,YACnBK,YAAaS,EAAMT,gBAII,SAAA7C,GACzB,MAAO,CACLsH,kBAAmB,SAACtE,EAAQqE,GAAT,OACjBrH,ERjFC,SAA2BgD,EAAQqE,GACxC,OAAO,SAAOrH,EAAUuC,GAAjB,qBAAAlB,EAAAC,OAAA,8DAEGpE,EAAQkD,aAAalD,OAFxB,mCAAAmE,EAAA,MAKsBE,MAAM,GAAD,OACvBpF,GADuB,OACNE,EADM,oBACoB2G,EADpB,gCACkDqE,EADlD,iCAC4FxK,GACtH,CACE2E,OAAQ,MACRC,QAASxE,EAA2BC,MATvC,UAKKG,EALL,OAaGqE,EAAOtE,EAAuCC,GAbjD,oCAAAgE,EAAA,MAgBchE,EAASsE,QAhBvB,QAgBCD,EAhBD,eAmBGA,EAAKlE,eACPwC,EAASF,EAAkB4B,IAC3BtB,aAAaC,WAAW,WAEhBG,EAAiC+B,IAAWC,YAA5ChC,6BACRkB,EAAOjD,EAAgBiD,EAAMlB,GAC7BR,EArGD,CACLP,KAAMwC,EACNvC,QAmGuCgC,KAzBlC,0DA6BHE,QAAQC,IAAI,QAAZ,MA7BG,0DQgFMyF,CAAkBtE,EAAQqE,KACrCD,iBAAkB,SAACpE,EAAQ2F,GAAT,OAChB3I,ERhDC,SAA0BgD,EAAQ2F,GACvC,OAAO,SAAO3I,EAAUuC,GAAjB,qBAAAlB,EAAAC,OAAA,8DAEGpE,EAAQkD,aAAalD,OAFxB,mCAAAmE,EAAA,MAKsBE,MAAM,GAAD,OACvBpF,GADuB,OACNG,EADM,oBACuB0G,EADvB,gCACqD2F,GAC/E,CACEnH,OAAQ,MACRC,QAASxE,EAA2BC,MATvC,UAKKG,EALL,OAaGqE,EAAOtE,EAAuCC,GAbjD,oCAAAgE,EAAA,MAgBchE,EAASsE,QAhBvB,QAgBCD,EAhBD,eAmBGA,EAAKlE,eACPwC,EAASF,EAAkB4B,IAC3BtB,aAAaC,WAAW,WAEhBG,EAAiC+B,IAAWC,YAA5ChC,6BACRkB,EAAOjD,EAAgBiD,EAAMlB,GAC7BR,EAjID,CACLP,KAAMyC,EACNxC,QA+H+BgC,KAzB1B,0DA6BHE,QAAQC,IAAI,QAAZ,MA7BG,0DQ+CMuF,CAAiBpE,EAAQ2F,QAwBzBD,CAA6CtC,IC/NtDwC,G,8MACJC,aAAe,WAAO,IACZjJ,EAAS,EAAKuE,MAAdvE,KAER,EAAKuE,MAAM0E,aAAajJ,I,EAG1BkJ,gBAAkB,SAAA/E,GAChB,GAAIA,GAASA,EAAM6C,OACjB,OAAO7C,EAAMnF,KAAI,SAACC,EAAM+I,GACtB,OACE,yBAAKC,IAAKD,GACR,2BAAI/I,EAAKkE,W,0EAOT,IACAnD,EAAS+E,KAAKR,MAAdvE,KAER,OACE,yBAAKmG,UAAU,gBAAgByC,QAAS7D,KAAKkE,cAC3C,6BACE,4BAAKjJ,EAAKmD,OAEZ,6BACE,4CACA,6BAAM4B,KAAKmE,gBAAgBlJ,EAAKmE,c,GA7BlBe,IAAMC,WCOxBgE,I,oNASJC,eAAiB,WAAO,IAAD,EACoB,EAAK7E,MAAtCT,EADa,EACbA,UAAW/D,EADE,EACFA,kBAEnB,GAAI+D,GAAaA,EAAUkD,OACzB,OAAOlD,EAAU9E,KAAI,SAASC,GAC5B,OACE,kBAAC,GAAD,CACEgK,aAAclJ,EACdkI,IAAKhJ,EAAK+B,IACVhB,KAAMf,Q,qFAhBd,IAAIuC,EAASuD,KAAKR,MAAMtB,YAAYjC,IAE/BQ,GAELuD,KAAKR,MAAMhD,eAAeC,K,+BAoB1B,OAAO,yBAAK2E,UAAU,kBAAapB,KAAKqE,sB,GA1BrBlE,IAAMC,YAiEd2D,gBAnCS,SAAApF,GACtB,MAAO,CACLI,UAAWJ,EAAMI,UACjBb,YAAaS,EAAMT,gBAII,SAAA7C,GACzB,MAAO,CACLmB,eAAgB,SAAAC,GAAM,OAAIpB,EAASmB,EAAeC,KAClDzB,kBAAmB,SAAAC,GAAI,OACrBI,EAASS,EAAuCb,QAwBvC8I,CAA6CK,ICxEtDE,G,8MACJC,YAAc,WAAO,IACX1J,EAAS,EAAK2E,MAAd3E,KAER,EAAK2E,MAAM+E,YAAY1J,I,0EAGf,IACAA,EAASmF,KAAKR,MAAd3E,KAER,OACE,yBAAKuG,UAAU,gBAAgByC,QAAS7D,KAAKuE,aAC3C,2BAAI1J,EAAKuD,MACT,2BAAIvD,EAAK5B,Y,GAbOkH,IAAMC,WCAxBoE,G,8MACJ7F,MAAQ,CACN8F,aAAc,I,EAGhBpF,SAAW,SAAAQ,GACTA,EAASN,iBAET,EAAKC,MAAMkF,qBAAqB,EAAK/F,MAAM8F,cAE3C,EAAK9E,SAAS,CACZgF,kBAAmB,M,EAIvBC,wBAA0B,SAAA/E,GACxB,EAAKF,SAAS,CACZ8E,aAAc5E,EAASC,OAAOC,S,0EAKhC,OACE,0BAAMV,SAAUW,KAAKX,UACnB,uDACA,8CACA,2BACEjB,KAAK,YACL6B,YAAY,aACZnF,KAAK,OACLiF,MAAOC,KAAKrB,MAAM8F,aAClBvE,SAAUF,KAAK4E,0BAEjB,4BAAQ9J,KAAK,UAAb,mB,GAjCmBqF,IAAMC,WCE3ByE,G,8MACJH,qBAAuB,SAAAD,GACrB,EAAKjF,MAAMsF,UAAUL,I,EAGvBN,gBAAkB,WAAO,IAAD,EACa,EAAK3E,MAAhCN,EADc,EACdA,UAAWqF,EADG,EACHA,YAEnB,GAAIrF,GAAaA,EAAU+C,OACzB,OAAO/C,EAAUjF,KAAI,SAASC,GAC5B,OACE,kBAAC,GAAD,CAAWqK,YAAaA,EAAarB,IAAKhJ,EAAK+B,IAAKpB,KAAMX,Q,0EAOhE,OACE,yBAAKkH,UAAU,aACb,yBAAKA,UAAU,gBACb,kBAAC,GAAD,CAAcsD,qBAAsB1E,KAAK0E,uBACxC1E,KAAKmE,kBACN,4BAAQN,QAAS7D,KAAKR,MAAMuF,eAA5B,gB,GAvB2B5E,IAAMC,WCFrC4E,G,8MACJrG,MAAQ,CACNvF,KAAM,KACN6L,SAAU,I,EAGZ5F,SAAW,SAAAC,GAAU,IACXlG,EAAS,EAAKuF,MAAdvF,KACAiG,EAAa,EAAKG,MAAlBH,SAERC,EAAMC,iBAEFnG,GACFiG,EAASjG,I,EAIb8L,+BAAiC,SAAArF,GAC/B,EAAKF,SAAS,CACZvG,KAAMyG,EAASC,OAAOqF,MAAM,GAC5BF,SAAUpF,EAASC,OAAOC,S,0EAK5B,OACE,yBAAKqB,UAAU,aACb,yBAAKA,UAAU,gBACb,0BAAM/B,SAAUW,KAAKX,UACnB,qCACA,2BACEjB,KAAK,2BACLtD,KAAK,OACLiF,MAAOC,KAAKrB,MAAMsG,SAClB/E,SAAUF,KAAKkF,iCAEjB,4BAAQpK,KAAK,UAAb,qCACA,4BAAQ+I,QAAS7D,KAAKR,MAAMuF,eAA5B,iB,GArCkC5E,IAAMC,WCQ9CgF,G,YACJ,WAAY5F,GAAQ,IAAD,+BACjB,8CAAMA,KAQR6F,qBAAuB,WACrB,EAAK1F,SAAS,CACZ2F,mBAAmB,KAXJ,EAenBC,4CAA8C,WAC5C,EAAK5F,SAAS,CACZ6F,qCAAqC,KAjBtB,EAqBnBC,wBAA0B,SAAA5K,GACxB,EAAK6K,mBACL,EAAKlG,MAAMiG,wBAAwB5K,IAvBlB,EA0BnB6K,iBAAmB,WACjB,EAAK/F,SAAS,CACZ2F,mBAAmB,KA5BJ,EAgCnBK,kCAAoC,SAAAC,GAClC,EAAKC,0CACL,EAAKrG,MAAMmG,kCAAkCC,IAlC5B,EAqCnBC,wCAA0C,WACxC,EAAKlG,SAAS,CACZ6F,qCAAqC,KAvCtB,EA2CnBM,sBAAwB,WAAO,IAAD,EAIxB,EAAKnH,MAFP2G,EAF0B,EAE1BA,kBACAE,EAH0B,EAG1BA,oCAH0B,EAKkB,EAAKhG,MAA3C3B,EALoB,EAKpBA,YAAaiH,EALO,EAKPA,UAAW5F,EALJ,EAKIA,UAEhC,OAAIoG,EAEA,kBAAC,GAAD,CACER,UAAWA,EACX5F,UAAWA,EACXqF,YAAa,EAAKkB,wBAClBV,cAAe,EAAKW,mBAKtBF,EAEA,kBAAC,GAAD,CACE3H,YAAaA,EACbwB,SAAU,EAAKsG,kCACfZ,cAAe,EAAKc,0CAKtBhI,EAAY5B,IAEZ,kBAAC,IAAM8J,SAAP,KACE,4BAAQlC,QAAS,EAAKwB,sBAAtB,wBAGA,4BAAQxB,QAAS,EAAK0B,6CAAtB,2CANN,GApEA,EAAK5G,MAAQ,CACX2G,mBAAmB,EACnBE,qCAAqC,GALtB,E,wEAsFjB,OACE,6BACE,uCAAaxF,KAAKR,MAAM3B,YAAYO,MACnC4B,KAAK8F,6B,GA1FoB3F,IAAMC,WA4IzB2D,gBA5CS,SAAApF,GACtB,MAAO,CACLd,YAAac,EAAMd,YACnBqB,UAAWP,EAAMO,cAIM,SAAA7D,GACzB,MAAO,CACLyJ,UAAW,SAAAL,GAAY,OAAIpJ,EhBmOxB,SAAmBoJ,GACxB,OAAO,SAAMpJ,GAAN,qBAAAqB,EAAAC,OAAA,8DAEelB,eAAVlD,EAFL,EAEKA,OAFL,mCAAAmE,EAAA,MAKsBE,MAAM,GAAD,OACvBpF,GADuB,OACNQ,EADM,2BAC4ByM,GACtD,CACE5H,OAAQ,MACRC,QAASxE,EAA2BC,MATvC,UAKKG,EALL,OAaGqE,EAAOtE,EAAuCC,GAbjD,oCAAAgE,EAAA,MAgBchE,EAASsE,QAhBvB,QAgBCD,EAhBD,eAmBGA,EAAKlE,eACPwC,EAASF,EAAkB4B,IAE3BtB,aAAaC,WAAW,UAExBL,EArSD,CACLP,KAAML,EACNM,QAmSkCgC,IAxB7B,0DA4BHE,QAAQC,IAAI,QAAZ,MA5BG,0DgBpO+B4H,CAAUL,KAC9CgB,wBAAyB,SAAA5K,GAAI,OAAIQ,EhBoQ9B,SAAiCR,GACtC,OAAO,SAAOQ,EAAUuC,GAAjB,yBAAAlB,EAAAC,OAAA,8DAEelB,eAAVlD,EAFL,EAEKA,OAFL,0BAIuBqF,IAAhBC,EAJP,EAIOA,YAJP,WAAAnB,EAAA,MAMsBE,MAAMpF,EAAiBS,EAAsB,CAClE4E,OAAQ,OACRC,QAASxE,EAA2BC,GACpC+F,KAAMnC,KAAKoC,UAAU,CACnBF,OAAQR,EAAY5B,IACpB+J,UAAWnL,EAAKoB,SAXnB,UAMKvD,EANL,OAeGqE,EAAOtE,EAAuCC,GAfjD,oCAAAgE,EAAA,MAkBchE,EAASsE,QAlBvB,QAkBCD,EAlBD,eAqBGA,EAAKlE,cACPwC,EAASF,EAAkB4B,IAE3B1B,EAASS,EAAuCiB,EAAK9B,OAxBtD,0DA4BHgC,QAAQC,IAAI,QAAZ,MA5BG,0DgBrQqCuI,CAAwB5K,KAClE8K,kCAAmC,SAAAvM,GAAI,OACrCiC,EhBZC,SAA2CjC,GAChD,OAAO,SAAOiC,EAAUuC,GAAjB,yBAAAlB,EAAAC,OAAA,mDACAvD,EADA,mEAAAsD,EAAA,MAG0BvD,EAAaC,IAHvC,UAGD2C,EAHC,QDhE2BkK,ECqERlK,IDlER,IAAdkK,EAAIC,OC6DD,uBAMH7K,EAASE,EAAa,CAAExC,QAAS,uCAN9B,8BAUCmD,EAAeC,KAAKC,MAAML,IAEdO,SAAYJ,EAAaK,SAZtC,wBAaHlB,EAASE,EAAa,CAAExC,QAAS,2BAb9B,2BAiBC6C,EAA8B,IAAIS,SACtC,OACAH,EAAaI,SAETT,EAA+B,IAAIQ,SACvC,OACAH,EAAaK,UAvBV,EA0BmBqB,IAAhBC,EA1BH,EA0BGA,YAERpC,aAAa0K,QAAQtI,EAAY5B,IAAKF,GAEtCV,EACEM,EACEC,EACAC,IAjCC,kCDhEF,IAA6BoK,MiB2ErBN,CAAkCvM,QAgClC2K,CAA6CqB,ICpJtDgB,G,8MACJzH,MAAQ,CACN1F,MAAO,GACPoN,SAAU,I,EAGZhH,SAAW,SAAAC,GACTA,EAAMC,iBAEN,EAAKC,MAAMH,SAAS,EAAKV,MAAM1F,MAAO,EAAK0F,MAAM0H,UAEjD,EAAK1G,SAAS,CACZ1G,MAAO,GACPoN,SAAU,M,EAIdC,qBAAuB,SAAAzG,GACrB,EAAKF,SAAS,CACZ1G,MAAO4G,EAASC,OAAOC,S,EAI3BwG,wBAA0B,SAAA1G,GACxB,EAAKF,SAAS,CACZ0G,SAAUxG,EAASC,OAAOC,S,0EAK5B,OACE,0BAAMV,SAAUW,KAAKX,SAAU+B,UAAU,iBACvC,qCACA,6CACA,2BACEhD,KAAK,YACL6B,YAAY,aACZnF,KAAK,OACLiF,MAAOC,KAAKrB,MAAM1F,MAClBiH,SAAUF,KAAKsG,uBAEjB,6BACA,gDACA,2BACElI,KAAK,eACL6B,YAAY,gBACZnF,KAAK,OACLiF,MAAOC,KAAKrB,MAAM0H,SAClBnG,SAAUF,KAAKuG,0BAEjB,6BACA,4BAAQzL,KAAK,UAAb,e,GAnDyBqF,IAAMC,WCAjCoG,G,8MACJ7H,MAAQ,CACN1F,MAAO,GACPmF,KAAM,GACNiI,SAAU,I,EAGZhH,SAAW,SAAAQ,GACTA,EAASN,iBADY,MAGa,EAAKZ,MAEjC9D,EAAO,CACX5B,MANmB,EAGbA,MAINmF,KAPmB,EAGNA,KAKbiI,SARmB,EAGAA,UAQrB,EAAK7G,MAAMH,SAASxE,GAEpB,EAAK8E,SAAS,CACZ1G,MAAO,GACPmF,KAAM,GACNiI,SAAU,M,EAIdC,qBAAuB,SAAAzG,GACrB,EAAKF,SAAS,CACZ1G,MAAO4G,EAASC,OAAOC,S,EAI3B0G,oBAAsB,SAAA5G,GACpB,EAAKF,SAAS,CACZvB,KAAMyB,EAASC,OAAOC,S,EAI1BwG,wBAA0B,SAAA1G,GACxB,EAAKF,SAAS,CACZ0G,SAAUxG,EAASC,OAAOC,S,0EAK5B,OACE,0BAAMV,SAAUW,KAAKX,SAAU+B,UAAU,iBACvC,qDACA,6CACA,2BACEhD,KAAK,YACL6B,YAAY,aACZnF,KAAK,OACLiF,MAAOC,KAAKrB,MAAM1F,MAClBiH,SAAUF,KAAKsG,uBAEjB,6BACA,4CACA,2BACElI,KAAK,WACL6B,YAAY,YACZnF,KAAK,OACLiF,MAAOC,KAAKrB,MAAMP,KAClB8B,SAAUF,KAAKyG,sBAEjB,6BACA,gDACA,2BACErI,KAAK,eACL6B,YAAY,gBACZnF,KAAK,OACLiF,MAAOC,KAAKrB,MAAM0H,SAClBnG,SAAUF,KAAKuG,0BAEjB,6BACA,4BAAQzL,KAAK,UAAb,wC,GA5EuBqF,IAAMC,WCArC,SAASsG,GAAclH,GACrB,OACE,6BACE,4BAAQqE,QAASrE,EAAMmH,WAAvB,YACA,8BAAOnH,EAAMoH,kBCJnB,SAASC,GAAYrH,GAAQ,IAGvBsH,EAAiBC,EAAwBC,EAHnB,EACiBxH,EAAMP,UAAzCrG,EADkB,EAClBA,OAAQC,EADU,EACVA,cAAeE,EADL,EACKA,QAgB/B,OAZIH,IACFkO,EAAkB,sCAAYlO,IAG5BA,IACFmO,EAAyB,2CAAiBlO,IAGxCD,IACFoO,EAAmB,uCAAajO,IAIhC,yBAAKqI,UAAU,eACb,6BACE,sCAEF,6BACG0F,EACAC,EACAC,GAEH,4BAAQnD,QAASrE,EAAMyH,MAAvB,O,UCVAC,G,8MAoCJP,UAAY,WACV,EAAKnH,MAAMlE,6B,6FAnCX,GAAI0E,KAAKR,MAAMtB,YAAYjC,IACzB,OACE,6BACE,kBAAC,GAAD,MACA,kBAAC,GAAD,CACEwD,gBAAiBO,KAAKR,MAAM2H,cAC5BzH,cAAeM,KAAKR,MAAMtB,YAAYjC,S,0CAQ9C,GAAK+D,KAAKR,MAAMtB,YAAYjC,KACvB+D,KAAKR,MAAM3B,YAAY5B,IAE5B,OAAO,kBAAC,GAAD,CAAawC,eAAgBuB,KAAKR,MAAMf,mB,0CAI/C,GAAKuB,KAAKR,MAAMP,UAEhB,OACE,yBAAKmC,UAAU,aACb,kBAACyF,GAAD,CACEzF,UAAU,eACV6F,KAAMjH,KAAKR,MAAM4H,eACjBnI,UAAWe,KAAKR,MAAMP,e,0CAW5B,OAAIe,KAAKR,MAAMR,oBAEX,kBAAC,IAAM+G,SAAP,KACE,yBAAK3E,UAAU,cACb,yBAAKA,UAAU,oBACZpB,KAAKqH,6BAER,yBAAKjG,UAAU,sBAAsBpB,KAAKgD,sBAE5C,yBAAK5B,UAAU,aACb,kBAACsF,GAAD,CACEtF,UAAU,iBACVuF,UAAW3G,KAAK2G,UAChBC,gBAAiB5G,KAAKR,MAAMtB,YAAYE,OAE1C,kBAAC,GAAD,CAAqBgD,UAAU,4BAOrC,kBAAC,IAAM2E,SAAP,KACG/F,KAAKsH,oBACN,yBAAKlG,UAAU,wBACb,kBAAC,GAAD,CAAkB/B,SAAUW,KAAKR,MAAM+H,gBACvC,kBAAC,GAAD,CACElI,SAAUW,KAAKR,MAAMgI,iC,+BAQ7B,OAAO,yBAAKpG,UAAU,aAAapB,KAAKyH,yB,GA5E1BtH,IAAMC,WAuGT2D,gBAvBS,SAAApF,GACtB,MAAO,CACLT,YAAaS,EAAMT,YACnBL,YAAac,EAAMd,YACnBW,mBAAoBG,EAAMH,mBAC1BQ,oBAAqBL,EAAMK,oBAC3BC,UAAWN,EAAMM,cAIM,SAAA5D,GACzB,MAAO,CACL8L,cAAe,SAACO,EAAUC,GAAX,OACbtM,GrB4DwB+C,EqB5DDsJ,ErB4DOtI,EqB5DGuI,ErB6D9B,SAAOtM,EAAUuC,GAAjB,2BAAAlB,EAAAC,OAAA,8DAEelB,eAAVlD,EAFL,EAEKA,OAFL,wBAKKqP,EAAc,CAClB3M,KAAM,CACJmD,OACAgB,UARH,WAAA1C,EAAA,MAYsBE,MAAMpF,EAAiBI,EAAmB,CAC/DiF,OAAQ,OACRC,QAASxE,EAA2BC,GACpC+F,KAAMnC,KAAKoC,UAAUqJ,MAftB,UAYKlP,EAZL,OAkBGqE,EAAOtE,EAAuCC,GAlBjD,oCAAAgE,EAAA,MAqBchE,EAASsE,QArBvB,QAqBCD,EArBD,eAwBGA,EAAKnE,OACPyC,EAASF,EAAkB4B,KACrB,EACkBa,IAAhBM,EADH,EACGA,YAER7C,EAASS,EAAuCiB,EAAK9B,OACrDI,EAASmB,EAAe0B,EAAYjC,OA9BrC,0DAkCHgB,QAAQC,IAAI,QAAZ,MAlCG,4DADF,IAAuBkB,EAAMgB,GqB3DhCX,eAAgB,SAAA1F,GAAO,OAAIsC,EAASsC,GAAyB5E,KAC7DyO,2BAA4B,SAACK,EAAWC,GAAZ,OAC1BzM,GrBkIqCpC,EqBlID4O,ErBkIQxB,EqBlIGyB,ErBmI5C,SAAMzM,GAAN,yBAAAqB,EAAAC,OAAA,4DAEE3D,EAAcC,GAFhB,uBAGDoC,EACEE,EAAa,CACXxC,QAAQ,cAAD,OAAgBE,MAL1B,iCAWG8O,EAAyB,CAC7BlN,KAAM,CACJ5B,QACAmF,KAAM,GACNiI,aAfD,WAAA3J,EAAA,MAmBoBE,MACrBpF,EAAiBM,EACjB,CACE+E,OAAQ,OACRC,QAAS1E,EACTkG,KAAMnC,KAAKoC,UAAUwJ,MAxBtB,UAmBGrP,EAnBH,OA4BCqE,EAAOtE,EAAuCC,GA5B/C,oCAAAgE,EAAA,MA+BYhE,EAASsE,QA/BrB,QA+BDD,EA/BC,eAkCCA,EAAKlE,eACPwC,EAASF,EAAkB4B,IAC3B1B,EAASH,GAAwB,MAC3B,EACiB6B,EAAKlC,KAApBoB,EADH,EACGA,IAAK1D,EADR,EACQA,MAEbkD,aAAa0K,QAAQ,QAAS5N,GAE9B8C,EAAST,EAAkBmC,EAAKlC,OAChCQ,EAASH,GAAwB,IACjCG,EAASmB,EAAeP,KA5CvB,kDA+CHgB,QAAQC,IAAI,QAAZ,MA/CG,4DADF,IAAoCjE,EAAOoN,GqBjI9CkB,cAAe,SAAA1M,GAAI,OAAIQ,ErBsLpB,SAAuBR,GAC5B,OAAO,SAAMQ,GAAN,uBAAAqB,EAAAC,OAAA,4DAEE3D,EAAc6B,EAAK5B,OAFrB,uBAGDoC,EACEE,EAAa,CACXxC,QAAQ,cAAD,OAAgB8B,EAAK5B,UAL/B,4CAAAyD,EAAA,MAYoBE,MAAMpF,EAAiBO,EAAmB,CAC/D8E,OAAQ,OACRC,QAAS1E,EACTkG,KAAMnC,KAAKoC,UAAU,CAAE1D,YAftB,UAYGnC,EAZH,OAkBCqE,EAAOtE,EAAuCC,GAlB/C,oCAAAgE,EAAA,MAqBYhE,EAASsE,QArBrB,QAqBDD,EArBC,eAwBCA,EAAKlE,eACPwC,EAASF,EAAkB4B,IAC3B1B,EAASH,GAAwB,MAC3B,EACiB6B,EAAKlC,KAApBoB,EADH,EACGA,IAAK1D,EADR,EACQA,MAEbkD,aAAa0K,QAAQ,QAAS5N,GAE9B8C,EAAST,EAAkBmC,EAAKlC,OAChCQ,EAASL,EAAkB,KAC3BK,EAASH,GAAwB,IACjCG,EAASmB,EAAeP,KAnCvB,kDAsCHgB,QAAQC,IAAI,QAAZ,MAtCG,0DqBvL2BqK,CAAc1M,KAC9CS,0BAA2B,kBAAMD,EAASC,MAC1C8L,eAAgB,kBAAM/L,ErB9BjB,CACLP,KAAMJ,QqBiCKqJ,CAA6CmD,IC/GxCc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVN,IAAMC,GCFKC,YACHC,GACAC,YAAgBC,MDExBC,IAASC,OACP,kBAAC,IAAD,CAAUN,MAAOA,IACf,kBAAC,GAAD,OAEFO,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.490b1571.chunk.js","sourcesContent":["export const serverLocation = 'http://localhost:4000/'\n\nexport const messageSendPath = 'messages/new/'\nexport const messageGetPath = 'messages/listRequest/'\nexport const newMessageGetPath = 'messages/lastMessages/'\nexport const submitNewChatPath = 'chats/new/'\nexport const chatsListGetPath = 'chats/listRequest/'\nexport const submitUserEmailAndPasswordPath = 'users/login/'\nexport const submitNewUserPath = 'users/new/'\nexport const searchUsersPath = 'users/search/'\nexport const addNewUserToChatPath = 'chats/addNewUser/'\n\nexport const fetchMessagesCount = 3\nexport const updateInterval = 10000\n","export const httpHeadersWithoutToken = {\n  Accept: 'application/json',\n  'Content-Type': 'application/json',\n}\n\nexport function createHttpHeadersWithToken(token) {\n  return {\n    Accept: 'application/json',\n    'Content-Type': 'application/json',\n    Authorization: `Bearer ${token}`,\n  }\n}\n\nexport function checkResponseAndCreateErrorIfBadStatus(response) {\n  if (response.ok) {\n    return\n  } else {\n    const { status, statusText, message } = response\n\n    return {\n      status,\n      badStatusText: statusText,\n      message,\n    }\n  }\n}\n\nexport function validateEmail(email) {\n  const reg = /^([A-Za-z0-9_\\-\\.])+\\@([A-Za-z0-9_\\-\\.])+\\.([A-Za-z]{2,4})$/\n\n  return reg.test(email)\n}\n\nexport function readTextFile(file) {\n  return new Promise((resolve, reject) => {\n    var reader = new FileReader()\n    reader.onload = () => {\n      resolve(reader.result)\n    }\n    reader.onerror = reject\n    reader.readAsText(file)\n  })\n}\n\nexport function isStringNullOrEmpty(str) {\n  if (!str) return true\n\n  if (str.trim() == '') return true\n\n  return false\n}\n\nexport function convertMessages(messages, convertor) {\n  if (convertor) {\n    messages = messages.map(item => {\n      const text = convertor(item.text)\n      return { ...item, text }\n    })\n  }\n\n  return messages\n}\n","import {\n  serverLocation,\n  submitNewChatPath,\n  chatsListGetPath,\n  submitUserEmailAndPasswordPath,\n  submitNewUserPath,\n  searchUsersPath,\n  addNewUserToChatPath,\n} from '../applicationSettings'\n\nimport {\n  createHttpHeadersWithToken,\n  httpHeadersWithoutToken,\n  checkResponseAndCreateErrorIfBadStatus,\n  validateEmail,\n  readTextFile,\n  isStringNullOrEmpty,\n} from './helper'\n\nexport const CHANGE_CURRENT_USER = 'CHANGE_CURRENT_USER'\nexport const CHANGE_CURRENT_CHAT = 'CHANGE_CURRENT_CHAT'\nexport const REFRESH_CHATS_LIST = 'REFRESH_CHATS_LIST'\nexport const SET_AUTHENTICATION_RESULT = 'SET_AUTHENTICATION_RESULT'\nexport const SET_LAST_ERROR = 'SET_LAST_ERROR'\nexport const FILL_FOUND_USERS_LIST = 'FILL_FOUND_USERS_LIST'\nexport const CLEAR_LAST_ERROR = 'CLEAR_LAST_ERROR'\nexport const ADD_NEW_SPECIAL_MESSAGES_PREPROCESSOR_FUNCTION =\n  'ADD_NEW_SPECIAL_MESSAGES_PREPROCESSOR_FUNCTION'\n\nexport function changeCurrentUser(user) {\n  return {\n    type: CHANGE_CURRENT_USER,\n    payload: user,\n  }\n}\n\nexport function changeCurrentChat(chat) {\n  return {\n    type: CHANGE_CURRENT_CHAT,\n    payload: chat,\n  }\n}\n\nexport function refreshChatsList(chats) {\n  return {\n    type: REFRESH_CHATS_LIST,\n    payload: chats,\n  }\n}\n\nexport function setAuthenticationResult(result) {\n  return {\n    type: SET_AUTHENTICATION_RESULT,\n    payload: result,\n  }\n}\n\nexport function handleServerError(serverErrorData) {\n  return dispatch => {\n    if (serverErrorData.status === 401) {\n      dispatch(resetAuthenticationResult())\n    }\n\n    dispatch(setLastError(serverErrorData))\n  }\n}\n\nexport function setLastError(errorData) {\n  return {\n    type: SET_LAST_ERROR,\n    payload: errorData,\n  }\n}\n\nexport function fillFoundUsersList(usersList) {\n  return {\n    type: FILL_FOUND_USERS_LIST,\n    payload: usersList,\n  }\n}\n\nexport function resetAuthenticationResult() {\n  return dispatch => {\n    localStorage.removeItem('token')\n    dispatch(setAuthenticationResult(false))\n  }\n}\n\nexport function clearLastError() {\n  return {\n    type: CLEAR_LAST_ERROR,\n  }\n}\n\nexport function addNewSpecialMessagesPreprocessorFunction(\n  forwardPreprocessorFunction,\n  backwardPreprocessorFunction\n) {\n  return {\n    type: ADD_NEW_SPECIAL_MESSAGES_PREPROCESSOR_FUNCTION,\n    payload: {\n      forwardPreprocessorFunction,\n      backwardPreprocessorFunction,\n    },\n  }\n}\n\nexport function addNewSpecialMessagesPreprocessor(file) {\n  return async (dispatch, getState) => {\n    if (!file) return\n\n    let preprocessorString = await readTextFile(file)\n\n    if (isStringNullOrEmpty(preprocessorString)) {\n      dispatch(setLastError({ message: 'File is empty or has wrong format' }))\n      return\n    }\n\n    const preprocessor = JSON.parse(preprocessorString)\n\n    if (!preprocessor.forward || !preprocessor.backward) {\n      dispatch(setLastError({ message: 'File has wrong format' }))\n      return\n    }\n\n    const forwardPreprocessorFunction = new Function(\n      'text',\n      preprocessor.forward\n    )\n    const backwardPreprocessorFunction = new Function(\n      'text',\n      preprocessor.backward\n    )\n\n    const { currentChat } = getState()\n\n    localStorage.setItem(currentChat._id, preprocessorString)\n\n    dispatch(\n      addNewSpecialMessagesPreprocessorFunction(\n        forwardPreprocessorFunction,\n        backwardPreprocessorFunction\n      )\n    )\n  }\n}\n\nexport function tryGetPreprocessorAnd–°hangeCurrentChat(chat) {\n  return dispatch => {\n    const preprocessorString = localStorage.getItem(chat._id)\n\n    let forwardPreprocessorFunction, backwardPreprocessorFunction\n\n    if (preprocessorString) {\n      const preprocessor = JSON.parse(preprocessorString)\n\n      forwardPreprocessorFunction = new Function('text', preprocessor.forward)\n      backwardPreprocessorFunction = new Function('text', preprocessor.backward)\n    }\n\n    dispatch(changeCurrentChat(chat))\n\n    if (forwardPreprocessorFunction && backwardPreprocessorFunction) {\n      dispatch(\n        addNewSpecialMessagesPreprocessorFunction(\n          forwardPreprocessorFunction,\n          backwardPreprocessorFunction\n        )\n      )\n    }\n  }\n}\n\nexport function createNewChat(name, users) {\n  return async (dispatch, getState) => {\n    try {\n      const { token } = localStorage\n\n      if (token) {\n        const newChatData = {\n          chat: {\n            name,\n            users,\n          },\n        }\n\n        const response = await fetch(serverLocation + submitNewChatPath, {\n          method: 'POST',\n          headers: createHttpHeadersWithToken(token),\n          body: JSON.stringify(newChatData),\n        })\n\n        let data = checkResponseAndCreateErrorIfBadStatus(response)\n\n        if (!data) {\n          data = await response.json()\n        }\n\n        if (data.status) {\n          dispatch(handleServerError(data))\n        } else {\n          const { currentUser } = getState()\n\n          dispatch(tryGetPreprocessorAnd–°hangeCurrentChat(data.chat))\n          dispatch(fetchChatsList(currentUser._id))\n        }\n      }\n    } catch (error) {\n      console.log('error', error)\n    }\n  }\n}\n\nexport function fetchChatsList(userId) {\n  return async dispatch => {\n    try {\n      const { token } = localStorage\n\n      if (token) {\n        const response = await fetch(\n          `${serverLocation}${chatsListGetPath}?user_id=${userId}`,\n          {\n            method: 'GET',\n            headers: createHttpHeadersWithToken(token),\n          }\n        )\n\n        let data = checkResponseAndCreateErrorIfBadStatus(response)\n\n        if (!data) {\n          data = await response.json()\n        }\n\n        if (data.badStatusText) {\n          dispatch(handleServerError(data))\n          localStorage.removeItem('token')\n        } else {\n          dispatch(refreshChatsList(data))\n        }\n      }\n    } catch (error) {\n      console.log('error', error)\n    }\n  }\n}\n\nexport function submitUserEmailAndPassword(email, password) {\n  return async dispatch => {\n    try {\n      if (!validateEmail(email)) {\n        dispatch(\n          setLastError({\n            message: `Bad email: ${email}`,\n          })\n        )\n        return\n      }\n\n      const userAuthenticationData = {\n        user: {\n          email,\n          name: '',\n          password,\n        },\n      }\n\n      const response = await fetch(\n        serverLocation + submitUserEmailAndPasswordPath,\n        {\n          method: 'POST',\n          headers: httpHeadersWithoutToken,\n          body: JSON.stringify(userAuthenticationData),\n        }\n      )\n\n      let data = checkResponseAndCreateErrorIfBadStatus(response)\n\n      if (!data) {\n        data = await response.json()\n      }\n\n      if (data.badStatusText) {\n        dispatch(handleServerError(data))\n        dispatch(setAuthenticationResult(false))\n      } else {\n        const { _id, token } = data.user\n\n        localStorage.setItem('token', token)\n\n        dispatch(changeCurrentUser(data.user))\n        dispatch(setAuthenticationResult(true))\n        dispatch(fetchChatsList(_id))\n      }\n    } catch (error) {\n      console.log('error', error)\n    }\n  }\n}\n\nexport function submitNewUser(user) {\n  return async dispatch => {\n    try {\n      if (!validateEmail(user.email)) {\n        dispatch(\n          setLastError({\n            message: `Bad email: ${user.email}`,\n          })\n        )\n\n        return\n      }\n\n      const response = await fetch(serverLocation + submitNewUserPath, {\n        method: 'POST',\n        headers: httpHeadersWithoutToken,\n        body: JSON.stringify({ user }),\n      })\n\n      let data = checkResponseAndCreateErrorIfBadStatus(response)\n\n      if (!data) {\n        data = await response.json()\n      }\n\n      if (data.badStatusText) {\n        dispatch(handleServerError(data))\n        dispatch(setAuthenticationResult(false))\n      } else {\n        const { _id, token } = data.user\n\n        localStorage.setItem('token', token)\n\n        dispatch(changeCurrentUser(data.user))\n        dispatch(changeCurrentChat({}))\n        dispatch(setAuthenticationResult(true))\n        dispatch(fetchChatsList(_id))\n      }\n    } catch (error) {\n      console.log('error', error)\n    }\n  }\n}\n\nexport function findUsers(userSeekData) {\n  return async dispatch => {\n    try {\n      const { token } = localStorage\n\n      if (token) {\n        const response = await fetch(\n          `${serverLocation}${searchUsersPath}?user_seek_data=${userSeekData}`,\n          {\n            method: 'GET',\n            headers: createHttpHeadersWithToken(token),\n          }\n        )\n\n        let data = checkResponseAndCreateErrorIfBadStatus(response)\n\n        if (!data) {\n          data = await response.json()\n        }\n\n        if (data.badStatusText) {\n          dispatch(handleServerError(data))\n\n          localStorage.removeItem('token')\n        } else {\n          dispatch(fillFoundUsersList(data))\n        }\n      }\n    } catch (error) {\n      console.log('error', error)\n    }\n  }\n}\n\nexport function addNewUserToCurrentChat(user) {\n  return async (dispatch, getState) => {\n    try {\n      const { token } = localStorage\n      if (token) {\n        const { currentChat } = getState()\n\n        const response = await fetch(serverLocation + addNewUserToChatPath, {\n          method: 'POST',\n          headers: createHttpHeadersWithToken(token),\n          body: JSON.stringify({\n            chatId: currentChat._id,\n            newUserId: user._id,\n          }),\n        })\n\n        let data = checkResponseAndCreateErrorIfBadStatus(response)\n\n        if (!data) {\n          data = await response.json()\n        }\n\n        if (data.badStatusText) {\n          dispatch(handleServerError(data))\n        } else {\n          dispatch(tryGetPreprocessorAnd–°hangeCurrentChat(data.chat))\n        }\n      }\n    } catch (error) {\n      console.log('error', error)\n    }\n  }\n}\n","import {\n  serverLocation,\n  messageSendPath,\n  messageGetPath,\n  newMessageGetPath,\n  fetchMessagesCount,\n} from '../applicationSettings'\n\nimport { handleServerError } from './chatSettingsActions'\n\nimport {\n  createHttpHeadersWithToken,\n  checkResponseAndCreateErrorIfBadStatus,\n  convertMessages,\n} from './helper'\n\nexport const ADD_NEW_MESSAGE = 'ADD_NEW_MESSAGE'\nexport const MESSAGE_WAS_RECEIVED = 'MESSAGE_WAS_RECEIVED'\nexport const REFRESH_MESSAGES_LIST = 'REFRESH_MESSAGES_LIST'\nexport const UNSHIFT_PREVIOUS_MESSAGES = 'UNSHIFT_PREVIOUS_MESSAGES'\nexport const PUSH_NEW_MESSAGES = 'PUSH_NEW_MESSAGES'\n\nexport function addNewMessage(message) {\n  return {\n    type: ADD_NEW_MESSAGE,\n    payload: message,\n  }\n}\n\nexport function messageWasReceived(bool) {\n  return {\n    type: MESSAGE_WAS_RECEIVED,\n    payload: bool,\n  }\n}\n\nexport function refreshMessagesList(messages) {\n  return {\n    type: REFRESH_MESSAGES_LIST,\n    payload: messages,\n  }\n}\n\nexport function unshiftPreviousMessages(messages) {\n  return {\n    type: UNSHIFT_PREVIOUS_MESSAGES,\n    payload: messages,\n  }\n}\n\nexport function pushNewMessages(messages) {\n  return {\n    type: PUSH_NEW_MESSAGES,\n    payload: messages,\n  }\n}\n\nexport function encryptAndSendNewMessage(text) {\n  return (dispatch, getState) => {\n    const { forwardPreprocessorFunction } = getState().currentChat\n\n    if (forwardPreprocessorFunction) {\n      text = forwardPreprocessorFunction(text)\n    }\n\n    dispatch(sendNewMessage(text))\n  }\n}\n\nexport function sendNewMessage(text) {\n  return async (dispatch, getState) => {\n    try {\n      const token = localStorage.token\n\n      if (token) {\n        dispatch(messageWasReceived(false))\n\n        const time = new Date().getTime()\n        const authorEmail = getState().currentUser.email\n        const authorName = getState().currentUser.name\n        const chatId = getState().currentChat._id\n\n        const message = {\n          chatId,\n          time,\n          authorEmail,\n          authorName,\n          text,\n        }\n\n        const response = await fetch(serverLocation + messageSendPath, {\n          method: 'POST',\n          headers: createHttpHeadersWithToken(token),\n          body: JSON.stringify(message),\n        })\n\n        let data = checkResponseAndCreateErrorIfBadStatus(response)\n\n        if (!data) {\n          data = await response.json()\n        }\n\n        if (data.status) {\n          dispatch(handleServerError(data))\n          message.wasMessageReceived = false\n          dispatch(addNewMessage(message))\n          localStorage.removeItem('token')\n        } else {\n          message.wasMessageReceived = true\n          dispatch(addNewMessage(message))\n          dispatch(messageWasReceived(true))\n        }\n      }\n    } catch (error) {\n      console.log('error', error)\n    }\n  }\n}\n\nexport function fetchMessagesList(chatId, oldestMessageTime) {\n  return async (dispatch, getState) => {\n    try {\n      const token = localStorage.token\n\n      if (token) {\n        const response = await fetch(\n          `${serverLocation}${messageGetPath}?chat_id=${chatId}&oldest_message_time=${oldestMessageTime}&fetch_messages_count=${fetchMessagesCount}`,\n          {\n            method: 'GET',\n            headers: createHttpHeadersWithToken(token),\n          }\n        )\n\n        let data = checkResponseAndCreateErrorIfBadStatus(response)\n\n        if (!data) {\n          data = await response.json()\n        }\n\n        if (data.badStatusText) {\n          dispatch(handleServerError(data))\n          localStorage.removeItem('token')\n        } else {\n          const { backwardPreprocessorFunction } = getState().currentChat\n          data = convertMessages(data, backwardPreprocessorFunction)\n          dispatch(unshiftPreviousMessages(data))\n        }\n      }\n    } catch (error) {\n      console.log('error', error)\n    }\n  }\n}\n\nexport function fetchNewMessages(chatId, newestMessageTime) {\n  return async (dispatch, getState) => {\n    try {\n      const token = localStorage.token\n\n      if (token) {\n        const response = await fetch(\n          `${serverLocation}${newMessageGetPath}?chat_id=${chatId}&newest_message_time=${newestMessageTime}`,\n          {\n            method: 'GET',\n            headers: createHttpHeadersWithToken(token),\n          }\n        )\n\n        let data = checkResponseAndCreateErrorIfBadStatus(response)\n\n        if (!data) {\n          data = await response.json()\n        }\n\n        if (data.badStatusText) {\n          dispatch(handleServerError(data))\n          localStorage.removeItem('token')\n        } else {\n          const { backwardPreprocessorFunction } = getState().currentChat\n          data = convertMessages(data, backwardPreprocessorFunction)\n          dispatch(pushNewMessages(data))\n        }\n      }\n    } catch (error) {\n      console.log('error', error)\n    }\n  }\n}\n","import { combineReducers } from 'redux'\nimport { messages, wasMessageReceived } from './messageListData'\nimport {\n  currentUser,\n  currentChat,\n  chatsList,\n  isUserAuthenticated,\n  lastError,\n  usersList,\n} from './chatSettings'\n\nexport default combineReducers({\n  messages,\n  wasMessageReceived,\n  currentUser,\n  currentChat,\n  chatsList,\n  isUserAuthenticated,\n  lastError,\n  usersList,\n})\n","import {\n  ADD_NEW_MESSAGE,\n  MESSAGE_WAS_RECEIVED,\n  REFRESH_MESSAGES_LIST,\n  UNSHIFT_PREVIOUS_MESSAGES,\n  PUSH_NEW_MESSAGES,\n} from '../actions/messageListActions'\n\nexport function messages(state = [], action) {\n  switch (action.type) {\n    case ADD_NEW_MESSAGE:\n      return [...state, action.payload]\n    case REFRESH_MESSAGES_LIST:\n      return action.payload\n    case UNSHIFT_PREVIOUS_MESSAGES:\n      const previousMessages = action.payload\n      return [...previousMessages, ...state]\n    case PUSH_NEW_MESSAGES:\n      const newMessages = action.payload\n      return [...state, ...newMessages]\n    default:\n      return state\n  }\n}\n\nexport function wasMessageReceived(state = true, action) {\n  switch (action.type) {\n    case MESSAGE_WAS_RECEIVED:\n      return action.payload\n    default:\n      return state\n  }\n}\n","import {\n  CHANGE_CURRENT_USER,\n  CHANGE_CURRENT_CHAT,\n  REFRESH_CHATS_LIST,\n  SET_AUTHENTICATION_RESULT,\n  SET_LAST_ERROR,\n  FILL_FOUND_USERS_LIST,\n  CLEAR_LAST_ERROR,\n  ADD_NEW_SPECIAL_MESSAGES_PREPROCESSOR_FUNCTION,\n} from '../actions/chatSettingsActions'\n\nexport function currentUser(state = {}, action) {\n  switch (action.type) {\n    case CHANGE_CURRENT_USER:\n      return action.payload\n    default:\n      return state\n  }\n}\n\nexport function currentChat(state = {}, action) {\n  switch (action.type) {\n    case CHANGE_CURRENT_CHAT:\n      return action.payload\n    case ADD_NEW_SPECIAL_MESSAGES_PREPROCESSOR_FUNCTION:\n      return { ...state, ...action.payload }\n    default:\n      return state\n  }\n}\n\nexport function chatsList(state = [], action) {\n  switch (action.type) {\n    case REFRESH_CHATS_LIST:\n      return action.payload\n    default:\n      return state\n  }\n}\n\nexport function isUserAuthenticated(state = false, action) {\n  switch (action.type) {\n    case SET_AUTHENTICATION_RESULT:\n      return action.payload\n    default:\n      return state\n  }\n}\n\nexport function lastError(state = null, action) {\n  switch (action.type) {\n    case SET_LAST_ERROR:\n      return action.payload\n    case CLEAR_LAST_ERROR:\n      return null\n    default:\n      return state\n  }\n}\n\nexport function usersList(state = [], action) {\n  switch (action.type) {\n    case FILL_FOUND_USERS_LIST:\n      return action.payload\n    default:\n      return state\n  }\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nclass NewChatForm extends React.Component {\n  state = {\n    name: '',\n    users: [],\n  }\n\n  onSubmit = event => {\n    event.preventDefault()\n\n    this.props.onSubmitNewChat(this.state.name, [this.props.currentUserId])\n\n    this.setState({\n      name: '',\n      users: [],\n    })\n  }\n\n  updateChatNameValue = eventArg => {\n    this.setState({\n      name: eventArg.target.value,\n    })\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.onSubmit}>\n        <h4>+Chat</h4>\n        <input\n          name=\"chatName\"\n          placeholder=\"chat name\"\n          type=\"text\"\n          value={this.state.name}\n          onChange={this.updateChatNameValue}\n        />\n        <button type=\"submit\">Create new chat</button>\n      </form>\n    )\n  }\n}\n\nNewChatForm.propTypes = {\n  currentUserId: PropTypes.string.isRequired,\n  onSubmitNewChat: PropTypes.func.isRequired,\n}\n\nexport { NewChatForm }\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nfunction MessageTimestamp(props) {\n  const date = new Date(props.time)\n  const hours = date.getHours()\n  const minutes = date.getMinutes()\n  const day = date.getDate()\n  const month = date.getMonth() + 1\n  const year = date.getFullYear()\n\n  return (\n    <div>\n      <p>\n        {hours}:{minutes} {day}.{month}.{year}\n      </p>\n    </div>\n  )\n}\n\nMessageTimestamp.propTypes = {\n  time: PropTypes.oneOfType([\n    PropTypes.number,\n    PropTypes.string,\n    PropTypes.instanceOf(Date),\n  ]).isRequired,\n}\n\nexport { MessageTimestamp }\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { MessageTimestamp } from './MessageTimestamp'\n\nfunction MessageFrame(props) {\n  const { message, currentUserEmail } = props\n  let messageFrameClass\n\n  if (currentUserEmail === message.authorEmail) {\n    messageFrameClass = 'current_user_message'\n  } else {\n    messageFrameClass = 'another_user_message'\n  }\n\n  return (\n    <div className={messageFrameClass}>\n      <div>\n        <p>{message.authorName}</p>\n      </div>\n      <div>\n        <p>{message.authorEmail}</p>\n      </div>\n      <div>\n        <p>{message.text}</p>\n      </div>\n      <MessageTimestamp time={message.time} />\n    </div>\n  )\n}\n\nMessageFrame.propTypes = {\n  message: PropTypes.exact({\n    _id: PropTypes.string,\n    chatId: PropTypes.string.isRequired,\n    authorName: PropTypes.string.isRequired,\n    authorEmail: PropTypes.string.isRequired,\n    time: PropTypes.oneOfType([\n      PropTypes.number,\n      PropTypes.string,\n      PropTypes.instanceOf(Date),\n    ]).isRequired,\n    text: PropTypes.string.isRequired,\n    wasMessageReceived: PropTypes.bool,\n  }),\n}\n\nexport { MessageFrame }\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nclass NewMessageInput extends React.Component {\n  state = {\n    newMessage: '',\n  }\n\n  onSubmit = event => {\n    event.preventDefault()\n\n    this.props.onSubmitNewMessage(this.state.newMessage)\n\n    this.setState({\n      newMessage: '',\n    })\n  }\n\n  updateInputValue = eventArg => {\n    this.setState({\n      newMessage: eventArg.target.value,\n    })\n  }\n\n  render() {\n    return (\n      <form className=\"new-message-input\" onSubmit={this.onSubmit}>\n        <h4>+Message</h4>\n        <input\n          name=\"userMessage\"\n          placeholder=\"message text\"\n          type=\"text\"\n          value={this.state.newMessage}\n          onChange={this.updateInputValue}\n        />\n        <button type=\"submit\">Send message</button>\n      </form>\n    )\n  }\n}\n\nNewMessageInput.propTypes = {\n  onSubmitNewMessage: PropTypes.func.isRequired,\n}\n\nexport { NewMessageInput }\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport PropTypes from 'prop-types'\nimport { fetchMessagesList } from '../actions/messageListActions'\nimport { fetchNewMessages } from '../actions/messageListActions'\nimport { MessageFrame } from '../components/MessageFrame'\nimport { NewMessageInput } from '../components/NewMessageInput'\nimport { updateInterval } from '../applicationSettings'\nimport './MessageList.sass'\n\nclass MessageList extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.messageListRef = React.createRef()\n\n    this.state = {\n      enableScrollDown: true,\n      previousMessagesLength: 0,\n      suspendMessagesFetching: false,\n    }\n  }\n\n  componentDidMount = () => {\n    this.fetchMessages()\n    this.initializeMessagesListUpdateTimer()\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerID)\n  }\n\n  componentDidUpdate = () => {\n    const { messages } = this.props\n    const scrollDownShift = 30\n    const { current } = this.messageListRef\n\n    if (!messages) return\n\n    const messagesLength = messages.length\n    const previousMessagesLength = this.state.previousMessagesLength\n\n    if (messagesLength === previousMessagesLength) return\n\n    this.setState({\n      previousMessagesLength: messagesLength,\n    })\n\n    this.setState({\n      suspendMessagesFetching: false,\n    })\n\n    current.scrollTop += scrollDownShift\n\n    this.scrollDownIfEnabled()\n\n    this.tryLoadMessagesUntilScrollAppears()\n  }\n\n  initializeMessagesListUpdateTimer = () => {\n    this.timerID = setInterval(() => this.fetchNewMessages(), updateInterval)\n  }\n\n  fetchMessages = () => {\n    if (this.state.suspendMessagesFetching) return\n\n    const currentChat = this.props.currentChat\n    const messages = this.props.messages\n\n    if (!currentChat || !currentChat._id) return\n    if (!messages) return\n\n    const time = new Date().getTime()\n\n    const oldestMessageTime = messages.length ? messages[0].time : time\n\n    this.props.fetchMessagesList(currentChat._id, oldestMessageTime)\n  }\n\n  fetchNewMessages = () => {\n    const currentChat = this.props.currentChat\n    const messages = this.props.messages\n\n    if (!currentChat || !currentChat._id) return\n    if (!messages) return\n\n    const lastMessageIndex = messages.length - 1\n\n    if (lastMessageIndex < 0) {\n      this.fetchMessages()\n      return\n    }\n\n    this.props.fetchNewMessages(\n      currentChat._id,\n      messages[lastMessageIndex].time\n    )\n  }\n\n  scrollDownIfEnabled = () => {\n    if (this.state.enableScrollDown) {\n      this.setState({\n        enableScrollDown: false,\n      })\n\n      this.scrollDown()\n    }\n  }\n\n  tryLoadMessagesUntilScrollAppears() {\n    const { current } = this.messageListRef\n\n    if (current.offsetWidth <= current.clientWidth) {\n      this.fetchMessages()\n    }\n  }\n\n  scrollDown = () => {\n    const { current } = this.messageListRef\n\n    current.scrollTop = current.scrollHeight\n  }\n\n  renderMessageList = () => {\n    const { messages, currentUser } = this.props\n    const messagesLength = messages.length\n\n    if (messages && messagesLength) {\n      return messages.map(function(item, index) {\n        return (\n          <div key={index}>\n            <MessageFrame message={item} currentUserEmail={currentUser.email} />\n          </div>\n        )\n      })\n    }\n  }\n\n  onScrollDownClick = () => {\n    this.scrollDown()\n  }\n\n  onScroll = () => {\n    const minScrollTop = 30\n    const { current } = this.messageListRef\n\n    if (current.scrollTop < minScrollTop) {\n      this.setState({\n        suspendMessagesFetching: true,\n      })\n\n      this.fetchMessages()\n    }\n  }\n\n  sendNewMessage = newMessage => {\n    this.props.sendNewMessage(newMessage)\n\n    this.setState({\n      enableScrollDown: true,\n    })\n  }\n\n  render() {\n    const strToDecode = '&#11015'\n    const parser = new DOMParser()\n    const decodedString = parser.parseFromString(\n      `<!doctype html><body>${strToDecode}`,\n      'text/html'\n    ).body.textContent\n\n    return (\n      <div>\n        <div className=\"scroll-down-button\" onClick={this.onScrollDownClick}>\n          {decodedString}\n        </div>\n        <div\n          ref={this.messageListRef}\n          className=\"message-list\"\n          onScroll={this.onScroll}\n        >\n          {this.renderMessageList()}\n        </div>\n        <NewMessageInput onSubmitNewMessage={this.sendNewMessage} />\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    messages: state.messages,\n    currentChat: state.currentChat,\n    currentUser: state.currentUser,\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    fetchMessagesList: (chatId, oldestMessageTime) =>\n      dispatch(fetchMessagesList(chatId, oldestMessageTime)),\n    fetchNewMessages: (chatId, newestMessageTime) =>\n      dispatch(fetchNewMessages(chatId, newestMessageTime)),\n  }\n}\n\nMessageList.propTypes = {\n  messages: PropTypes.arrayOf(\n    PropTypes.shape({\n      message: PropTypes.exact({\n        chatId: PropTypes.number.isRequired,\n        authorName: PropTypes.string.isRequired,\n        authorEmail: PropTypes.string.isRequired,\n        time: PropTypes.oneOfType([\n          PropTypes.number,\n          PropTypes.string,\n          PropTypes.instanceOf(Date),\n        ]).isRequired,\n        text: PropTypes.string.isRequired,\n        wasMessageReceived: PropTypes.bool,\n      }),\n    })\n  ),\n}\n\nexport { MessageList }\nexport default connect(mapStateToProps, mapDispatchToProps)(MessageList)\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nclass ChatFrame extends React.Component {\n  onSelectChat = () => {\n    const { chat } = this.props\n\n    this.props.onSelectChat(chat)\n  }\n\n  renderUsersList = users => {\n    if (users && users.length) {\n      return users.map((item, index) => {\n        return (\n          <div key={index}>\n            <p>{item.name}</p>\n          </div>\n        )\n      })\n    }\n  }\n\n  render() {\n    const { chat } = this.props\n\n    return (\n      <div className=\"selected-item\" onClick={this.onSelectChat}>\n        <div>\n          <h4>{chat.name}</h4>\n        </div>\n        <div>\n          <p>Chat members:</p>\n          <div>{this.renderUsersList(chat.users)}</div>\n        </div>\n      </div>\n    )\n  }\n}\n\nChatFrame.propTypes = {\n  chat: PropTypes.exact({\n    _id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    users: PropTypes.arrayOf(\n      PropTypes.exact({\n        _id: PropTypes.string.isRequired,\n        name: PropTypes.string.isRequired,\n        email: PropTypes.string.isRequired,\n      })\n    ).isRequired,\n  }),\n  onSelectChat: PropTypes.func.isRequired,\n}\n\nexport { ChatFrame }\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport PropTypes from 'prop-types'\nimport {\n  fetchChatsList,\n  tryGetPreprocessorAnd–°hangeCurrentChat,\n} from '../actions/chatSettingsActions'\nimport { ChatFrame } from '../components/ChatFrame'\nimport './ChatList.sass'\n\nclass ChatList extends React.Component {\n  componentDidMount() {\n    let userId = this.props.currentUser._id\n\n    if (!userId) return\n\n    this.props.fetchChatsList(userId)\n  }\n\n  renderChatList = () => {\n    const { chatsList, changeCurrentChat } = this.props\n\n    if (chatsList && chatsList.length) {\n      return chatsList.map(function(item) {\n        return (\n          <ChatFrame\n            onSelectChat={changeCurrentChat}\n            key={item._id}\n            chat={item}\n          />\n        )\n      })\n    }\n  }\n\n  render() {\n    return <div className=\"—Åhat-list\">{this.renderChatList()}</div>\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    chatsList: state.chatsList,\n    currentUser: state.currentUser,\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    fetchChatsList: userId => dispatch(fetchChatsList(userId)),\n    changeCurrentChat: chat =>\n      dispatch(tryGetPreprocessorAnd–°hangeCurrentChat(chat)),\n  }\n}\n\nChatList.propTypes = {\n  chatsList: PropTypes.arrayOf(\n    PropTypes.shape({\n      chat: PropTypes.exact({\n        _id: PropTypes.string.isRequired,\n        name: PropTypes.string.isRequired,\n        users: PropTypes.arrayOf(\n          PropTypes.shape({\n            _id: PropTypes.string.isRequired,\n            name: PropTypes.string.isRequired,\n            email: PropTypes.string.isRequired,\n          })\n        ).isRequired,\n      }),\n    })\n  ),\n  changeCurrentChat: PropTypes.func.isRequired,\n}\n\nexport { ChatList }\nexport default connect(mapStateToProps, mapDispatchToProps)(ChatList)\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nclass UserFrame extends React.Component {\n  onUserClick = () => {\n    const { user } = this.props\n\n    this.props.onUserClick(user)\n  }\n\n  render() {\n    const { user } = this.props\n\n    return (\n      <div className=\"selected-item\" onClick={this.onUserClick}>\n        <p>{user.name}</p>\n        <p>{user.email}</p>\n      </div>\n    )\n  }\n}\n\nUserFrame.propTypes = {\n  chat: PropTypes.exact({\n    _id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    email: PropTypes.string.isRequired,\n  }),\n  onSelectUser: PropTypes.func,\n}\n\nexport { UserFrame }\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nclass UserSeekForm extends React.Component {\n  state = {\n    userSeekData: '',\n  }\n\n  onSubmit = eventArg => {\n    eventArg.preventDefault()\n\n    this.props.onSubmitUserSeekData(this.state.userSeekData)\n\n    this.setState({\n      searchQueryString: '',\n    })\n  }\n\n  updateSearchQueryString = eventArg => {\n    this.setState({\n      userSeekData: eventArg.target.value,\n    })\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.onSubmit}>\n        <h1>Search for a new member</h1>\n        <label>Enter email</label>\n        <input\n          name=\"userEmail\"\n          placeholder=\"User email\"\n          type=\"text\"\n          value={this.state.userSeekData}\n          onChange={this.updateSearchQueryString}\n        />\n        <button type=\"submit\">Find users</button>\n      </form>\n    )\n  }\n}\n\nUserSeekForm.propTypes = {\n  onSubmitUserSeekData: PropTypes.func.isRequired,\n}\n\nexport { UserSeekForm }\n","import React from 'react'\nimport { UserFrame } from './UserFrame'\nimport { UserSeekForm } from './UserSeekForm'\nimport PropTypes from 'prop-types'\n\nclass AddToChatNewUserWindow extends React.Component {\n  onSubmitUserSeekData = userSeekData => {\n    this.props.findUsers(userSeekData)\n  }\n\n  renderUsersList = () => {\n    const { usersList, onUserClick } = this.props\n\n    if (usersList && usersList.length) {\n      return usersList.map(function(item) {\n        return (\n          <UserFrame onUserClick={onUserClick} key={item._id} user={item} />\n        )\n      })\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"cover-div\">\n        <div className=\"modal-window\">\n          <UserSeekForm onSubmitUserSeekData={this.onSubmitUserSeekData} />\n          {this.renderUsersList()}\n          <button onClick={this.props.onCancelClick}>Cancel</button>\n        </div>\n      </div>\n    )\n  }\n}\n\nAddToChatNewUserWindow.propTypes = {\n  usersList: PropTypes.arrayOf(\n    PropTypes.shape({\n      user: PropTypes.exact({\n        _id: PropTypes.number.isRequired,\n        name: PropTypes.string.isRequired,\n        email: PropTypes.string.isRequired,\n      }),\n    })\n  ),\n  findUsers: PropTypes.func.isRequired,\n  onUserClick: PropTypes.func.isRequired,\n  cancelUserAdding: PropTypes.func.isRequired,\n}\n\nexport { AddToChatNewUserWindow }\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nclass SpecialMessagesPreprocessorMenu extends React.Component {\n  state = {\n    file: null,\n    filePath: '',\n  }\n\n  onSubmit = event => {\n    const { file } = this.state\n    const { onSubmit } = this.props\n\n    event.preventDefault()\n\n    if (file) {\n      onSubmit(file)\n    }\n  }\n\n  updateMessagesPreprocessorFile = eventArg => {\n    this.setState({\n      file: eventArg.target.files[0],\n      filePath: eventArg.target.value,\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"cover-div\">\n        <div className=\"modal-window\">\n          <form onSubmit={this.onSubmit}>\n            <h4>+Chat</h4>\n            <input\n              name=\"messagesPreprocessorFile\"\n              type=\"file\"\n              value={this.state.filePath}\n              onChange={this.updateMessagesPreprocessorFile}\n            />\n            <button type=\"submit\">Add special messages preprocessor</button>\n            <button onClick={this.props.onCancelClick}>Cancel</button>\n          </form>\n        </div>\n      </div>\n    )\n  }\n}\n\nSpecialMessagesPreprocessorMenu.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n  onCancelClick: PropTypes.string,\n}\n\nexport { SpecialMessagesPreprocessorMenu }\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport { AddToChatNewUserWindow } from '../components/AddToChatNewUserWindow'\nimport { SpecialMessagesPreprocessorMenu } from '../components/SpecialMessagesPreprocessorMenu'\nimport {\n  findUsers,\n  addNewUserToCurrentChat,\n  addNewSpecialMessagesPreprocessor,\n} from '../actions/chatSettingsActions'\nimport PropTypes from 'prop-types'\n\nclass CurrentChatSettings extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      showAddedUserMenu: false,\n      showSpecialMessagesPreprocessorMenu: false,\n    }\n  }\n\n  onAddUserButtonClick = () => {\n    this.setState({\n      showAddedUserMenu: true,\n    })\n  }\n\n  onAddSpecialMessagesPreprocessorButtonClick = () => {\n    this.setState({\n      showSpecialMessagesPreprocessorMenu: true,\n    })\n  }\n\n  addNewUserToCurrentChat = user => {\n    this.cancelUserAdding()\n    this.props.addNewUserToCurrentChat(user)\n  }\n\n  cancelUserAdding = () => {\n    this.setState({\n      showAddedUserMenu: false,\n    })\n  }\n\n  addNewSpecialMessagesPreprocessor = preprocessorFunctionString => {\n    this.cancelSpecialMessagesPreprocessorAdding()\n    this.props.addNewSpecialMessagesPreprocessor(preprocessorFunctionString)\n  }\n\n  cancelSpecialMessagesPreprocessorAdding = () => {\n    this.setState({\n      showSpecialMessagesPreprocessorMenu: false,\n    })\n  }\n\n  renderAddedUserWindow = () => {\n    const {\n      showAddedUserMenu,\n      showSpecialMessagesPreprocessorMenu,\n    } = this.state\n    const { currentChat, findUsers, usersList } = this.props\n\n    if (showAddedUserMenu) {\n      return (\n        <AddToChatNewUserWindow\n          findUsers={findUsers}\n          usersList={usersList}\n          onUserClick={this.addNewUserToCurrentChat}\n          onCancelClick={this.cancelUserAdding}\n        />\n      )\n    }\n\n    if (showSpecialMessagesPreprocessorMenu) {\n      return (\n        <SpecialMessagesPreprocessorMenu\n          currentChat={currentChat}\n          onSubmit={this.addNewSpecialMessagesPreprocessor}\n          onCancelClick={this.cancelSpecialMessagesPreprocessorAdding}\n        />\n      )\n    }\n\n    if (currentChat._id) {\n      return (\n        <React.Fragment>\n          <button onClick={this.onAddUserButtonClick}>\n            Add new user to chat\n          </button>\n          <button onClick={this.onAddSpecialMessagesPreprocessorButtonClick}>\n            Add special messages preprocessor\n          </button>\n        </React.Fragment>\n      )\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <span>Chat: {this.props.currentChat.name}</span>\n        {this.renderAddedUserWindow()}\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    currentChat: state.currentChat,\n    usersList: state.usersList,\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    findUsers: userSeekData => dispatch(findUsers(userSeekData)),\n    addNewUserToCurrentChat: user => dispatch(addNewUserToCurrentChat(user)),\n    addNewSpecialMessagesPreprocessor: file =>\n      dispatch(addNewSpecialMessagesPreprocessor(file)),\n  }\n}\n\nCurrentChatSettings.propTypes = {\n  usersList: PropTypes.arrayOf(\n    PropTypes.shape({\n      user: PropTypes.exact({\n        _id: PropTypes.number.isRequired,\n        name: PropTypes.string.isRequired,\n        email: PropTypes.string.isRequired,\n      }),\n    })\n  ),\n  currentChat: PropTypes.exact({\n    _id: PropTypes.string,\n    name: PropTypes.string,\n    users: PropTypes.arrayOf(\n      PropTypes.shape({\n        _id: PropTypes.string.isRequired,\n        name: PropTypes.string.isRequired,\n        email: PropTypes.string.isRequired,\n      })\n    ),\n    forwardPreprocessorFunction: PropTypes.func,\n    backwardPreprocessorFunction: PropTypes.func,\n  }),\n  findUsers: PropTypes.func.isRequired,\n  addNewUserToCurrentChat: PropTypes.func.isRequired,\n}\n\nexport { CurrentChatSettings }\nexport default connect(mapStateToProps, mapDispatchToProps)(CurrentChatSettings)\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nclass AuthenticationForm extends React.Component {\n  state = {\n    email: '',\n    password: '',\n  }\n\n  onSubmit = event => {\n    event.preventDefault()\n\n    this.props.onSubmit(this.state.email, this.state.password)\n\n    this.setState({\n      email: '',\n      password: '',\n    })\n  }\n\n  updateUserEmailValue = eventArg => {\n    this.setState({\n      email: eventArg.target.value,\n    })\n  }\n\n  updateUserPasswordValue = eventArg => {\n    this.setState({\n      password: eventArg.target.value,\n    })\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.onSubmit} className=\"reg-auth-form\">\n        <h3>Login</h3>\n        <label>User email</label>\n        <input\n          name=\"userEmail\"\n          placeholder=\"User email\"\n          type=\"text\"\n          value={this.state.email}\n          onChange={this.updateUserEmailValue}\n        />\n        <br />\n        <label>User password</label>\n        <input\n          name=\"userPassword\"\n          placeholder=\"User password\"\n          type=\"text\"\n          value={this.state.password}\n          onChange={this.updateUserPasswordValue}\n        />\n        <br />\n        <button type=\"submit\">Submit</button>\n      </form>\n    )\n  }\n}\n\nAuthenticationForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n}\n\nexport { AuthenticationForm }\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nclass RegistrationForm extends React.Component {\n  state = {\n    email: '',\n    name: '',\n    password: '',\n  }\n\n  onSubmit = eventArg => {\n    eventArg.preventDefault()\n\n    const { email, name, password } = this.state\n\n    const user = {\n      email,\n      name,\n      password,\n    }\n\n    this.props.onSubmit(user)\n\n    this.setState({\n      email: '',\n      name: '',\n      password: '',\n    })\n  }\n\n  updateUserEmailValue = eventArg => {\n    this.setState({\n      email: eventArg.target.value,\n    })\n  }\n\n  updateUserNameValue = eventArg => {\n    this.setState({\n      name: eventArg.target.value,\n    })\n  }\n\n  updateUserPasswordValue = eventArg => {\n    this.setState({\n      password: eventArg.target.value,\n    })\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.onSubmit} className=\"reg-auth-form\">\n        <h3>New user registration</h3>\n        <label>User email</label>\n        <input\n          name=\"userEmail\"\n          placeholder=\"User email\"\n          type=\"text\"\n          value={this.state.email}\n          onChange={this.updateUserEmailValue}\n        />\n        <br />\n        <label>User name</label>\n        <input\n          name=\"userName\"\n          placeholder=\"User name\"\n          type=\"text\"\n          value={this.state.name}\n          onChange={this.updateUserNameValue}\n        />\n        <br />\n        <label>User password</label>\n        <input\n          name=\"userPassword\"\n          placeholder=\"User password\"\n          type=\"text\"\n          value={this.state.password}\n          onChange={this.updateUserPasswordValue}\n        />\n        <br />\n        <button type=\"submit\">Send new user registration data</button>\n      </form>\n    )\n  }\n}\n\nRegistrationForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n}\n\nexport { RegistrationForm }\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nfunction SettingsPanel(props) {\n  return (\n    <div>\n      <button onClick={props.onSignOut}>Sign out</button>\n      <span>{props.currentUserName}</span>\n    </div>\n  )\n}\n\nSettingsPanel.propTypes = {\n  onSignOut: PropTypes.func.isRequired,\n  currentUserName: PropTypes.string,\n}\n\nexport { SettingsPanel }\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nfunction ErrorWindow(props) {\n  const { status, badStatusText, message } = props.lastError\n\n  let statusParagraph, badStatusTextParagraph, messageParagraph\n\n  if (status) {\n    statusParagraph = <p>Status: {status}</p>\n  }\n\n  if (status) {\n    badStatusTextParagraph = <p>Status text: {badStatusText}</p>\n  }\n\n  if (status) {\n    messageParagraph = <p>Message: {message}</p>\n  }\n\n  return (\n    <div className=\"moda-window\">\n      <div>\n        <h4>Error</h4>\n      </div>\n      <div>\n        {statusParagraph}\n        {badStatusTextParagraph}\n        {messageParagraph}\n      </div>\n      <button onClick={props.onOk}>Ok</button>\n    </div>\n  )\n}\n\nErrorWindow.propTypes = {\n  lastError: PropTypes.exact({\n    status: PropTypes.number,\n    badStatusText: PropTypes.string,\n    message: PropTypes.string,\n  }),\n}\n\nexport { ErrorWindow }\n","import React from 'react'\nimport { NewChatForm } from '../components/NewChatForm'\nimport MessageList from './MessageList'\nimport ChatList from './ChatList'\nimport CurrentChatSettings from './CurrentChatSettings'\nimport { AuthenticationForm } from '../components/AuthenticationForm'\nimport { RegistrationForm } from '../components/RegistrationForm'\nimport { SettingsPanel } from '../components/SettingsPanel'\nimport { ErrorWindow } from '../components/ErrorWindow'\nimport { connect } from 'react-redux'\nimport { encryptAndSendNewMessage } from '../actions/messageListActions'\nimport {\n  submitUserEmailAndPassword,\n  submitNewUser,\n  createNewChat,\n  resetAuthenticationResult,\n  clearLastError,\n} from '../actions/chatSettingsActions'\nimport './App.sass'\n\nclass App extends React.Component {\n  renderChatListNewChatForm() {\n    if (this.props.currentUser._id) {\n      return (\n        <div>\n          <ChatList />\n          <NewChatForm\n            onSubmitNewChat={this.props.createNewChat}\n            currentUserId={this.props.currentUser._id}\n          />\n        </div>\n      )\n    }\n  }\n\n  renderMessageList() {\n    if (!this.props.currentUser._id) return\n    if (!this.props.currentChat._id) return\n\n    return <MessageList sendNewMessage={this.props.sendNewMessage} />\n  }\n\n  renderErrorWindow() {\n    if (!this.props.lastError) return\n\n    return (\n      <div className=\"cover-div\">\n        <ErrorWindow\n          className=\"modal-window\"\n          onOk={this.props.clearLastError}\n          lastError={this.props.lastError}\n        />\n      </div>\n    )\n  }\n\n  onSignOut = () => {\n    this.props.resetAuthenticationResult()\n  }\n\n  renderMainContent() {\n    if (this.props.isUserAuthenticated) {\n      return (\n        <React.Fragment>\n          <div className=\"main-panel\">\n            <div className=\"user-chats-panel\">\n              {this.renderChatListNewChatForm()}\n            </div>\n            <div className=\"current-chat-panel\">{this.renderMessageList()}</div>\n          </div>\n          <div className=\"top-panel\">\n            <SettingsPanel\n              className=\"settings-panel\"\n              onSignOut={this.onSignOut}\n              currentUserName={this.props.currentUser.name}\n            />\n            <CurrentChatSettings className=\"current-chat-settings\" />\n          </div>\n        </React.Fragment>\n      )\n    }\n\n    return (\n      <React.Fragment>\n        {this.renderErrorWindow()}\n        <div className=\"reg-auth-forms-panel\">\n          <RegistrationForm onSubmit={this.props.submitNewUser} />\n          <AuthenticationForm\n            onSubmit={this.props.submitUserEmailAndPassword}\n          />\n        </div>\n      </React.Fragment>\n    )\n  }\n\n  render() {\n    return <div className=\"app-panel\">{this.renderMainContent()}</div>\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    currentUser: state.currentUser,\n    currentChat: state.currentChat,\n    wasMessageReceived: state.wasMessageReceived,\n    isUserAuthenticated: state.isUserAuthenticated,\n    lastError: state.lastError,\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    createNewChat: (chatName, usersIds) =>\n      dispatch(createNewChat(chatName, usersIds)),\n    sendNewMessage: message => dispatch(encryptAndSendNewMessage(message)),\n    submitUserEmailAndPassword: (userEmail, userPassword) =>\n      dispatch(submitUserEmailAndPassword(userEmail, userPassword)),\n    submitNewUser: user => dispatch(submitNewUser(user)),\n    resetAuthenticationResult: () => dispatch(resetAuthenticationResult()),\n    clearLastError: () => dispatch(clearLastError()),\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport configureStore from './store/configureStore'\nimport './index.css'\nimport App from './containers/App'\nimport * as serviceWorker from './serviceWorker'\n\nconst store = configureStore()\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","import { createStore, applyMiddleware } from 'redux'\nimport thunk from 'redux-thunk'\nimport rootReducer from '../reducers'\n\nexport default function configureStore(initialState) {\n\n    return createStore(\n        rootReducer,\n        applyMiddleware(thunk)\n    )\n}"],"sourceRoot":""}