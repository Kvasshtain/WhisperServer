{"version":3,"sources":["applicationSettings.js","actions/helper.js","actions/chatSettingsActions.js","actions/messageListActions.js","reducers/index.js","reducers/messageListData.js","reducers/chatSettings.js","components/NewChatForm.js","components/MessageTimestamp.js","components/MessageFrame.js","components/NewMessageInput.js","containers/MessageList.js","components/ChatFrame.js","containers/ChatList.js","components/UserFrame.js","components/UserSeekForm.js","components/AddToChatNewUserWindow.js","components/SpecialMessagesPreprocessorMenu.js","containers/CurrentChatSettings.js","components/AuthenticationForm.js","components/RegistrationForm.js","components/SettingsPanel.js","components/ErrorWindow.js","containers/App.js","serviceWorker.js","index.js","store/configureStore.js"],"names":["serverLocation","messageSendPath","messageGetPath","newMessageGetPath","submitNewChatPath","chatsListGetPath","submitUserEmailAndPasswordPath","submitNewUserPath","searchUsersPath","addNewUserToChatPath","fetchMessagesCount","updateInterval","httpHeadersWithoutToken","Accept","createHttpHeadersWithToken","token","Authorization","checkResponseAndCreateErrorIfBadStatus","response","ok","status","badStatusText","statusText","message","validateEmail","email","test","readTextFile","file","Promise","resolve","reject","reader","FileReader","onload","result","onerror","readAsText","convertMessages","messages","convertor","map","item","text","CHANGE_CURRENT_USER","CHANGE_CURRENT_CHAT","REFRESH_CHATS_LIST","SET_AUTHENTICATION_RESULT","SET_LAST_ERROR","FILL_FOUND_USERS_LIST","CLEAR_LAST_ERROR","ADD_NEW_SPECIAL_MESSAGES_PREPROCESSOR_FUNCTION","changeCurrentUser","user","type","payload","changeCurrentChat","chat","setAuthenticationResult","handleServerError","serverErrorData","dispatch","resetAuthenticationResult","setLastError","errorData","localStorage","removeItem","addNewSpecialMessagesPreprocessorFunction","forwardPreprocessorFunction","backwardPreprocessorFunction","tryGetPreprocessorAnd–°hangeCurrentChat","preprocessorString","getItem","_id","preprocessor","JSON","parse","Function","forward","backward","CLEAR_MESSAGES","fetchChatsList","userId","a","async","fetch","method","headers","data","json","console","log","ADD_NEW_MESSAGE","MESSAGE_WAS_RECEIVED","REFRESH_MESSAGES_LIST","UNSHIFT_PREVIOUS_MESSAGES","PUSH_NEW_MESSAGES","addNewMessage","messageWasReceived","bool","encryptAndSendNewMessage","getState","currentChat","time","Date","getTime","authorEmail","currentUser","authorName","name","chatId","body","stringify","wasMessageReceived","sendNewMessage","combineReducers","state","action","previousMessages","newMessages","chatsList","isUserAuthenticated","lastError","usersList","NewChatForm","users","onSubmit","event","preventDefault","props","onSubmitNewChat","currentUserId","setState","updateChatNameValue","eventArg","target","value","this","placeholder","onChange","React","Component","MessageTimestamp","date","hours","getHours","minutes","getMinutes","day","getDate","month","getMonth","year","getFullYear","MessageFrame","messageFrameClass","currentUserEmail","className","NewMessageInput","newMessage","onSubmitNewMessage","updateInputValue","MessageList","componentDidMount","fetchMessages","initializeMessagesListUpdateTimer","componentDidUpdate","current","messageListRef","suspendMessagesFetching","messagesLength","length","previousMessagesLength","scrollTop","scrollDownIfEnabled","tryLoadMessagesUntilScrollAppears","timerID","setInterval","fetchNewMessages","fetchMessagesForced","oldestMessageTime","fetchMessagesList","lastMessageIndex","enableScrollDown","scrollDown","scrollHeight","renderMessageList","index","key","onScrollDownClick","onScroll","createRef","clearInterval","offsetWidth","clientWidth","decodedString","DOMParser","parseFromString","textContent","onClick","ref","connect","newestMessageTime","ChatFrame","onSelectChat","renderUsersList","ChatList","renderChatList","UserFrame","onUserClick","UserSeekForm","userSeekData","onSubmitUserSeekData","searchQueryString","updateSearchQueryString","AddToChatNewUserWindow","findUsers","onCancelClick","SpecialMessagesPreprocessorMenu","filePath","updateMessagesPreprocessorFile","files","CurrentChatSettings","onAddUserButtonClick","showAddedUserMenu","onAddSpecialMessagesPreprocessorButtonClick","showSpecialMessagesPreprocessorMenu","addNewUserToCurrentChat","cancelUserAdding","addNewSpecialMessagesPreprocessor","preprocessorFunctionString","cancelSpecialMessagesPreprocessorAdding","renderAddedUserWindow","Fragment","newUserId","str","trim","setItem","AuthenticationForm","password","updateUserEmailValue","updateUserPasswordValue","RegistrationForm","updateUserNameValue","SettingsPanel","onSignOut","currentUserName","ErrorWindow","statusParagraph","badStatusTextParagraph","messageParagraph","onOk","App","createNewChat","clearLastError","renderChatListNewChatForm","renderErrorWindow","submitNewUser","submitUserEmailAndPassword","renderMainContent","chatName","usersIds","newChatData","userEmail","userPassword","userAuthenticationData","Boolean","window","location","hostname","match","store","createStore","rootReducer","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ca952eff.chunk.js","sourcesContent":["export const serverLocation = 'http://localhost:4000/'\n\nexport const messageSendPath = 'messages/new/'\nexport const messageGetPath = 'messages/listRequest/'\nexport const newMessageGetPath = 'messages/lastMessages/'\nexport const submitNewChatPath = 'chats/new/'\nexport const chatsListGetPath = 'chats/listRequest/'\nexport const submitUserEmailAndPasswordPath = 'users/login/'\nexport const submitNewUserPath = 'users/new/'\nexport const searchUsersPath = 'users/search/'\nexport const addNewUserToChatPath = 'chats/addNewUser/'\n\nexport const fetchMessagesCount = 3\nexport const updateInterval = 10000\n","export const httpHeadersWithoutToken = {\n  Accept: 'application/json',\n  'Content-Type': 'application/json',\n}\n\nexport function createHttpHeadersWithToken(token) {\n  return {\n    Accept: 'application/json',\n    'Content-Type': 'application/json',\n    Authorization: `Bearer ${token}`,\n  }\n}\n\nexport function checkResponseAndCreateErrorIfBadStatus(response) {\n  if (response.ok) {\n    return\n  } else {\n    const { status, statusText, message } = response\n\n    return {\n      status,\n      badStatusText: statusText,\n      message,\n    }\n  }\n}\n\nexport function validateEmail(email) {\n  const reg = /^([A-Za-z0-9_\\-\\.])+\\@([A-Za-z0-9_\\-\\.])+\\.([A-Za-z]{2,4})$/\n\n  return reg.test(email)\n}\n\nexport function readTextFile(file) {\n  return new Promise((resolve, reject) => {\n    var reader = new FileReader()\n    reader.onload = () => {\n      resolve(reader.result)\n    }\n    reader.onerror = reject\n    reader.readAsText(file)\n  })\n}\n\nexport function isStringNullOrEmpty(str) {\n  if (!str) return true\n\n  if (str.trim() == '') return true\n\n  return false\n}\n\nexport function convertMessages(messages, convertor) {\n  if (convertor) {\n    messages = messages.map(item => {\n      const text = convertor(item.text)\n      return { ...item, text }\n    })\n  }\n\n  return messages\n}\n","import {\n  serverLocation,\n  submitNewChatPath,\n  chatsListGetPath,\n  submitUserEmailAndPasswordPath,\n  submitNewUserPath,\n  searchUsersPath,\n  addNewUserToChatPath,\n} from '../applicationSettings'\n\nimport { clearMessages } from './messageListActions'\n\nimport {\n  createHttpHeadersWithToken,\n  httpHeadersWithoutToken,\n  checkResponseAndCreateErrorIfBadStatus,\n  validateEmail,\n  readTextFile,\n  isStringNullOrEmpty,\n} from './helper'\n\nexport const CHANGE_CURRENT_USER = 'CHANGE_CURRENT_USER'\nexport const CHANGE_CURRENT_CHAT = 'CHANGE_CURRENT_CHAT'\nexport const REFRESH_CHATS_LIST = 'REFRESH_CHATS_LIST'\nexport const SET_AUTHENTICATION_RESULT = 'SET_AUTHENTICATION_RESULT'\nexport const SET_LAST_ERROR = 'SET_LAST_ERROR'\nexport const FILL_FOUND_USERS_LIST = 'FILL_FOUND_USERS_LIST'\nexport const CLEAR_LAST_ERROR = 'CLEAR_LAST_ERROR'\nexport const ADD_NEW_SPECIAL_MESSAGES_PREPROCESSOR_FUNCTION =\n  'ADD_NEW_SPECIAL_MESSAGES_PREPROCESSOR_FUNCTION'\n\nexport function changeCurrentUser(user) {\n  return {\n    type: CHANGE_CURRENT_USER,\n    payload: user,\n  }\n}\n\nexport function changeCurrentChat(chat) {\n  return {\n    type: CHANGE_CURRENT_CHAT,\n    payload: chat,\n  }\n}\n\nexport function refreshChatsList(chats) {\n  return {\n    type: REFRESH_CHATS_LIST,\n    payload: chats,\n  }\n}\n\nexport function setAuthenticationResult(result) {\n  return {\n    type: SET_AUTHENTICATION_RESULT,\n    payload: result,\n  }\n}\n\nexport function handleServerError(serverErrorData) {\n  return dispatch => {\n    if (serverErrorData.status === 401) {\n      dispatch(resetAuthenticationResult())\n    }\n\n    dispatch(setLastError(serverErrorData))\n  }\n}\n\nexport function setLastError(errorData) {\n  return {\n    type: SET_LAST_ERROR,\n    payload: errorData,\n  }\n}\n\nexport function fillFoundUsersList(usersList) {\n  return {\n    type: FILL_FOUND_USERS_LIST,\n    payload: usersList,\n  }\n}\n\nexport function resetAuthenticationResult() {\n  return dispatch => {\n    localStorage.removeItem('token')\n    dispatch(setAuthenticationResult(false))\n  }\n}\n\nexport function clearLastError() {\n  return {\n    type: CLEAR_LAST_ERROR,\n  }\n}\n\nexport function addNewSpecialMessagesPreprocessorFunction(\n  forwardPreprocessorFunction,\n  backwardPreprocessorFunction\n) {\n  return {\n    type: ADD_NEW_SPECIAL_MESSAGES_PREPROCESSOR_FUNCTION,\n    payload: {\n      forwardPreprocessorFunction,\n      backwardPreprocessorFunction,\n    },\n  }\n}\n\nexport function addNewSpecialMessagesPreprocessor(file) {\n  return async (dispatch, getState) => {\n    if (!file) return\n\n    let preprocessorString = await readTextFile(file)\n\n    if (isStringNullOrEmpty(preprocessorString)) {\n      dispatch(setLastError({ message: 'File is empty or has wrong format' }))\n      return\n    }\n\n    const preprocessor = JSON.parse(preprocessorString)\n\n    if (!preprocessor.forward || !preprocessor.backward) {\n      dispatch(setLastError({ message: 'File has wrong format' }))\n      return\n    }\n\n    const forwardPreprocessorFunction = new Function(\n      'text',\n      preprocessor.forward\n    )\n    const backwardPreprocessorFunction = new Function(\n      'text',\n      preprocessor.backward\n    )\n\n    const { currentChat } = getState()\n\n    localStorage.setItem(currentChat._id, preprocessorString)\n\n    dispatch(\n      addNewSpecialMessagesPreprocessorFunction(\n        forwardPreprocessorFunction,\n        backwardPreprocessorFunction\n      )\n    )\n  }\n}\n\nexport function tryGetPreprocessorAnd–°hangeCurrentChat(chat) {\n  return dispatch => {\n    const preprocessorString = localStorage.getItem(chat._id)\n\n    let forwardPreprocessorFunction, backwardPreprocessorFunction\n\n    if (preprocessorString) {\n      const preprocessor = JSON.parse(preprocessorString)\n\n      forwardPreprocessorFunction = new Function('text', preprocessor.forward)\n      backwardPreprocessorFunction = new Function('text', preprocessor.backward)\n    }\n\n    dispatch(changeCurrentChat(chat))\n    dispatch(clearMessages())\n\n    if (forwardPreprocessorFunction && backwardPreprocessorFunction) {\n      dispatch(\n        addNewSpecialMessagesPreprocessorFunction(\n          forwardPreprocessorFunction,\n          backwardPreprocessorFunction\n        )\n      )\n    }\n  }\n}\n\nexport function createNewChat(name, users) {\n  return async (dispatch, getState) => {\n    try {\n      const { token } = localStorage\n\n      if (token) {\n        const newChatData = {\n          chat: {\n            name,\n            users,\n          },\n        }\n\n        const response = await fetch(serverLocation + submitNewChatPath, {\n          method: 'POST',\n          headers: createHttpHeadersWithToken(token),\n          body: JSON.stringify(newChatData),\n        })\n\n        let data = checkResponseAndCreateErrorIfBadStatus(response)\n\n        if (!data) {\n          data = await response.json()\n        }\n\n        if (data.status) {\n          dispatch(handleServerError(data))\n        } else {\n          const { currentUser } = getState()\n\n          dispatch(tryGetPreprocessorAnd–°hangeCurrentChat(data.chat))\n          dispatch(fetchChatsList(currentUser._id))\n        }\n      }\n    } catch (error) {\n      console.log('error', error)\n    }\n  }\n}\n\nexport function fetchChatsList(userId) {\n  return async dispatch => {\n    try {\n      const { token } = localStorage\n\n      if (token) {\n        const response = await fetch(\n          `${serverLocation}${chatsListGetPath}?user_id=${userId}`,\n          {\n            method: 'GET',\n            headers: createHttpHeadersWithToken(token),\n          }\n        )\n\n        let data = checkResponseAndCreateErrorIfBadStatus(response)\n\n        if (!data) {\n          data = await response.json()\n        }\n\n        if (data.badStatusText) {\n          dispatch(handleServerError(data))\n          localStorage.removeItem('token')\n        } else {\n          dispatch(refreshChatsList(data))\n        }\n      }\n    } catch (error) {\n      console.log('error', error)\n    }\n  }\n}\n\nexport function submitUserEmailAndPassword(email, password) {\n  return async dispatch => {\n    try {\n      if (!validateEmail(email)) {\n        dispatch(\n          setLastError({\n            message: `Bad email: ${email}`,\n          })\n        )\n        return\n      }\n\n      const userAuthenticationData = {\n        user: {\n          email,\n          name: '',\n          password,\n        },\n      }\n\n      const response = await fetch(\n        serverLocation + submitUserEmailAndPasswordPath,\n        {\n          method: 'POST',\n          headers: httpHeadersWithoutToken,\n          body: JSON.stringify(userAuthenticationData),\n        }\n      )\n\n      let data = checkResponseAndCreateErrorIfBadStatus(response)\n\n      if (!data) {\n        data = await response.json()\n      }\n\n      if (data.badStatusText) {\n        dispatch(handleServerError(data))\n        dispatch(setAuthenticationResult(false))\n      } else {\n        const { _id, token } = data.user\n\n        localStorage.setItem('token', token)\n\n        dispatch(changeCurrentUser(data.user))\n        dispatch(setAuthenticationResult(true))\n        dispatch(fetchChatsList(_id))\n      }\n    } catch (error) {\n      console.log('error', error)\n    }\n  }\n}\n\nexport function submitNewUser(user) {\n  return async dispatch => {\n    try {\n      if (!validateEmail(user.email)) {\n        dispatch(\n          setLastError({\n            message: `Bad email: ${user.email}`,\n          })\n        )\n\n        return\n      }\n\n      const response = await fetch(serverLocation + submitNewUserPath, {\n        method: 'POST',\n        headers: httpHeadersWithoutToken,\n        body: JSON.stringify({ user }),\n      })\n\n      let data = checkResponseAndCreateErrorIfBadStatus(response)\n\n      if (!data) {\n        data = await response.json()\n      }\n\n      if (data.badStatusText) {\n        dispatch(handleServerError(data))\n        dispatch(setAuthenticationResult(false))\n      } else {\n        const { _id, token } = data.user\n\n        localStorage.setItem('token', token)\n\n        dispatch(changeCurrentUser(data.user))\n        dispatch(changeCurrentChat({}))\n        dispatch(setAuthenticationResult(true))\n        dispatch(fetchChatsList(_id))\n      }\n    } catch (error) {\n      console.log('error', error)\n    }\n  }\n}\n\nexport function findUsers(userSeekData) {\n  return async dispatch => {\n    try {\n      const { token } = localStorage\n\n      if (token) {\n        const response = await fetch(\n          `${serverLocation}${searchUsersPath}?user_seek_data=${userSeekData}`,\n          {\n            method: 'GET',\n            headers: createHttpHeadersWithToken(token),\n          }\n        )\n\n        let data = checkResponseAndCreateErrorIfBadStatus(response)\n\n        if (!data) {\n          data = await response.json()\n        }\n\n        if (data.badStatusText) {\n          dispatch(handleServerError(data))\n\n          localStorage.removeItem('token')\n        } else {\n          dispatch(fillFoundUsersList(data))\n        }\n      }\n    } catch (error) {\n      console.log('error', error)\n    }\n  }\n}\n\nexport function addNewUserToCurrentChat(user) {\n  return async (dispatch, getState) => {\n    try {\n      const { token } = localStorage\n      if (token) {\n        const { currentChat } = getState()\n\n        const response = await fetch(serverLocation + addNewUserToChatPath, {\n          method: 'POST',\n          headers: createHttpHeadersWithToken(token),\n          body: JSON.stringify({\n            chatId: currentChat._id,\n            newUserId: user._id,\n          }),\n        })\n\n        let data = checkResponseAndCreateErrorIfBadStatus(response)\n\n        if (!data) {\n          data = await response.json()\n        }\n\n        if (data.badStatusText) {\n          dispatch(handleServerError(data))\n        } else {\n          dispatch(tryGetPreprocessorAnd–°hangeCurrentChat(data.chat))\n        }\n      }\n    } catch (error) {\n      console.log('error', error)\n    }\n  }\n}\n","import {\n  serverLocation,\n  messageSendPath,\n  messageGetPath,\n  newMessageGetPath,\n  fetchMessagesCount,\n} from '../applicationSettings'\n\nimport { handleServerError } from './chatSettingsActions'\n\nimport {\n  createHttpHeadersWithToken,\n  checkResponseAndCreateErrorIfBadStatus,\n  convertMessages,\n} from './helper'\n\nexport const ADD_NEW_MESSAGE = 'ADD_NEW_MESSAGE'\nexport const MESSAGE_WAS_RECEIVED = 'MESSAGE_WAS_RECEIVED'\nexport const REFRESH_MESSAGES_LIST = 'REFRESH_MESSAGES_LIST'\nexport const UNSHIFT_PREVIOUS_MESSAGES = 'UNSHIFT_PREVIOUS_MESSAGES'\nexport const PUSH_NEW_MESSAGES = 'PUSH_NEW_MESSAGES'\nexport const CLEAR_MESSAGES = 'CLEAR_MESSAGES'\n\nexport function clearMessages() {\n  return {\n    type: CLEAR_MESSAGES,\n  }\n}\n\nexport function addNewMessage(message) {\n  return {\n    type: ADD_NEW_MESSAGE,\n    payload: message,\n  }\n}\n\nexport function messageWasReceived(bool) {\n  return {\n    type: MESSAGE_WAS_RECEIVED,\n    payload: bool,\n  }\n}\n\nexport function refreshMessagesList(messages) {\n  return {\n    type: REFRESH_MESSAGES_LIST,\n    payload: messages,\n  }\n}\n\nexport function unshiftPreviousMessages(messages) {\n  return {\n    type: UNSHIFT_PREVIOUS_MESSAGES,\n    payload: messages,\n  }\n}\n\nexport function pushNewMessages(messages) {\n  return {\n    type: PUSH_NEW_MESSAGES,\n    payload: messages,\n  }\n}\n\nexport function encryptAndSendNewMessage(text) {\n  return (dispatch, getState) => {\n    const { forwardPreprocessorFunction } = getState().currentChat\n\n    if (forwardPreprocessorFunction) {\n      text = forwardPreprocessorFunction(text)\n    }\n\n    dispatch(sendNewMessage(text))\n  }\n}\n\nexport function sendNewMessage(text) {\n  return async (dispatch, getState) => {\n    try {\n      const token = localStorage.token\n\n      if (token) {\n        dispatch(messageWasReceived(false))\n\n        const time = new Date().getTime()\n        const authorEmail = getState().currentUser.email\n        const authorName = getState().currentUser.name\n        const chatId = getState().currentChat._id\n\n        const message = {\n          chatId,\n          time,\n          authorEmail,\n          authorName,\n          text,\n        }\n\n        const response = await fetch(serverLocation + messageSendPath, {\n          method: 'POST',\n          headers: createHttpHeadersWithToken(token),\n          body: JSON.stringify(message),\n        })\n\n        let data = checkResponseAndCreateErrorIfBadStatus(response)\n\n        if (!data) {\n          data = await response.json()\n        }\n\n        if (data.status) {\n          dispatch(handleServerError(data))\n          message.wasMessageReceived = false\n          dispatch(addNewMessage(message))\n          localStorage.removeItem('token')\n        } else {\n          message.wasMessageReceived = true\n          dispatch(addNewMessage(message))\n          dispatch(messageWasReceived(true))\n        }\n      }\n    } catch (error) {\n      console.log('error', error)\n    }\n  }\n}\n\nexport function fetchMessagesList(chatId, oldestMessageTime) {\n  return async (dispatch, getState) => {\n    try {\n      const token = localStorage.token\n\n      if (token) {\n        const response = await fetch(\n          `${serverLocation}${messageGetPath}?chat_id=${chatId}&oldest_message_time=${oldestMessageTime}&fetch_messages_count=${fetchMessagesCount}`,\n          {\n            method: 'GET',\n            headers: createHttpHeadersWithToken(token),\n          }\n        )\n\n        let data = checkResponseAndCreateErrorIfBadStatus(response)\n\n        if (!data) {\n          data = await response.json()\n        }\n\n        if (data.badStatusText) {\n          dispatch(handleServerError(data))\n          localStorage.removeItem('token')\n        } else {\n          const { backwardPreprocessorFunction } = getState().currentChat\n          data = convertMessages(data, backwardPreprocessorFunction)\n          dispatch(unshiftPreviousMessages(data))\n        }\n      }\n    } catch (error) {\n      console.log('error', error)\n    }\n  }\n}\n\nexport function fetchNewMessages(chatId, newestMessageTime) {\n  return async (dispatch, getState) => {\n    try {\n      const token = localStorage.token\n\n      if (token) {\n        const response = await fetch(\n          `${serverLocation}${newMessageGetPath}?chat_id=${chatId}&newest_message_time=${newestMessageTime}`,\n          {\n            method: 'GET',\n            headers: createHttpHeadersWithToken(token),\n          }\n        )\n\n        let data = checkResponseAndCreateErrorIfBadStatus(response)\n\n        if (!data) {\n          data = await response.json()\n        }\n\n        if (data.badStatusText) {\n          dispatch(handleServerError(data))\n          localStorage.removeItem('token')\n        } else {\n          const { backwardPreprocessorFunction } = getState().currentChat\n          data = convertMessages(data, backwardPreprocessorFunction)\n          dispatch(pushNewMessages(data))\n        }\n      }\n    } catch (error) {\n      console.log('error', error)\n    }\n  }\n}\n","import { combineReducers } from 'redux'\nimport { messages, wasMessageReceived } from './messageListData'\nimport {\n  currentUser,\n  currentChat,\n  chatsList,\n  isUserAuthenticated,\n  lastError,\n  usersList,\n} from './chatSettings'\n\nexport default combineReducers({\n  messages,\n  wasMessageReceived,\n  currentUser,\n  currentChat,\n  chatsList,\n  isUserAuthenticated,\n  lastError,\n  usersList,\n})\n","import {\n  ADD_NEW_MESSAGE,\n  MESSAGE_WAS_RECEIVED,\n  REFRESH_MESSAGES_LIST,\n  UNSHIFT_PREVIOUS_MESSAGES,\n  PUSH_NEW_MESSAGES,\n  CLEAR_MESSAGES,\n} from '../actions/messageListActions'\n\nexport function messages(state = [], action) {\n  switch (action.type) {\n    case CLEAR_MESSAGES:\n      return []\n    case ADD_NEW_MESSAGE:\n      return [...state, action.payload]\n    case REFRESH_MESSAGES_LIST:\n      return action.payload\n    case UNSHIFT_PREVIOUS_MESSAGES:\n      const previousMessages = action.payload\n      return [...previousMessages, ...state]\n    case PUSH_NEW_MESSAGES:\n      const newMessages = action.payload\n      return [...state, ...newMessages]\n    default:\n      return state\n  }\n}\n\nexport function wasMessageReceived(state = true, action) {\n  switch (action.type) {\n    case MESSAGE_WAS_RECEIVED:\n      return action.payload\n    default:\n      return state\n  }\n}\n","import {\n  CHANGE_CURRENT_USER,\n  CHANGE_CURRENT_CHAT,\n  REFRESH_CHATS_LIST,\n  SET_AUTHENTICATION_RESULT,\n  SET_LAST_ERROR,\n  FILL_FOUND_USERS_LIST,\n  CLEAR_LAST_ERROR,\n  ADD_NEW_SPECIAL_MESSAGES_PREPROCESSOR_FUNCTION,\n} from '../actions/chatSettingsActions'\n\nexport function currentUser(state = {}, action) {\n  switch (action.type) {\n    case CHANGE_CURRENT_USER:\n      return action.payload\n    default:\n      return state\n  }\n}\n\nexport function currentChat(state = {}, action) {\n  switch (action.type) {\n    case CHANGE_CURRENT_CHAT:\n      return action.payload\n    case ADD_NEW_SPECIAL_MESSAGES_PREPROCESSOR_FUNCTION:\n      return { ...state, ...action.payload }\n    default:\n      return state\n  }\n}\n\nexport function chatsList(state = [], action) {\n  switch (action.type) {\n    case REFRESH_CHATS_LIST:\n      return action.payload\n    default:\n      return state\n  }\n}\n\nexport function isUserAuthenticated(state = false, action) {\n  switch (action.type) {\n    case SET_AUTHENTICATION_RESULT:\n      return action.payload\n    default:\n      return state\n  }\n}\n\nexport function lastError(state = null, action) {\n  switch (action.type) {\n    case SET_LAST_ERROR:\n      return action.payload\n    case CLEAR_LAST_ERROR:\n      return null\n    default:\n      return state\n  }\n}\n\nexport function usersList(state = [], action) {\n  switch (action.type) {\n    case FILL_FOUND_USERS_LIST:\n      return action.payload\n    default:\n      return state\n  }\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nclass NewChatForm extends React.Component {\n  state = {\n    name: '',\n    users: [],\n  }\n\n  onSubmit = event => {\n    event.preventDefault()\n\n    this.props.onSubmitNewChat(this.state.name, [this.props.currentUserId])\n\n    this.setState({\n      name: '',\n      users: [],\n    })\n  }\n\n  updateChatNameValue = eventArg => {\n    this.setState({\n      name: eventArg.target.value,\n    })\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.onSubmit}>\n        <h4>+Chat</h4>\n        <input\n          name=\"chatName\"\n          placeholder=\"chat name\"\n          type=\"text\"\n          value={this.state.name}\n          onChange={this.updateChatNameValue}\n        />\n        <button type=\"submit\">Create new chat</button>\n      </form>\n    )\n  }\n}\n\nNewChatForm.propTypes = {\n  currentUserId: PropTypes.string.isRequired,\n  onSubmitNewChat: PropTypes.func.isRequired,\n}\n\nexport { NewChatForm }\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nfunction MessageTimestamp(props) {\n  const date = new Date(props.time)\n  const hours = date.getHours()\n  const minutes = date.getMinutes()\n  const day = date.getDate()\n  const month = date.getMonth() + 1\n  const year = date.getFullYear()\n\n  return (\n    <div>\n      <p>\n        {hours}:{minutes} {day}.{month}.{year}\n      </p>\n    </div>\n  )\n}\n\nMessageTimestamp.propTypes = {\n  time: PropTypes.oneOfType([\n    PropTypes.number,\n    PropTypes.string,\n    PropTypes.instanceOf(Date),\n  ]).isRequired,\n}\n\nexport { MessageTimestamp }\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { MessageTimestamp } from './MessageTimestamp'\n\nfunction MessageFrame(props) {\n  const { message, currentUserEmail } = props\n  let messageFrameClass\n\n  if (currentUserEmail === message.authorEmail) {\n    messageFrameClass = 'current_user_message'\n  } else {\n    messageFrameClass = 'another_user_message'\n  }\n\n  return (\n    <div className={messageFrameClass}>\n      <div>\n        <p>{message.authorName}</p>\n      </div>\n      <div>\n        <p>{message.authorEmail}</p>\n      </div>\n      <div>\n        <p>{message.text}</p>\n      </div>\n      <MessageTimestamp time={message.time} />\n    </div>\n  )\n}\n\nMessageFrame.propTypes = {\n  message: PropTypes.exact({\n    _id: PropTypes.string,\n    chatId: PropTypes.string.isRequired,\n    authorName: PropTypes.string.isRequired,\n    authorEmail: PropTypes.string.isRequired,\n    time: PropTypes.oneOfType([\n      PropTypes.number,\n      PropTypes.string,\n      PropTypes.instanceOf(Date),\n    ]).isRequired,\n    text: PropTypes.string.isRequired,\n    wasMessageReceived: PropTypes.bool,\n  }),\n}\n\nexport { MessageFrame }\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nclass NewMessageInput extends React.Component {\n  state = {\n    newMessage: '',\n  }\n\n  onSubmit = event => {\n    event.preventDefault()\n\n    this.props.onSubmitNewMessage(this.state.newMessage)\n\n    this.setState({\n      newMessage: '',\n    })\n  }\n\n  updateInputValue = eventArg => {\n    this.setState({\n      newMessage: eventArg.target.value,\n    })\n  }\n\n  render() {\n    return (\n      <form className=\"new-message-input\" onSubmit={this.onSubmit}>\n        <h4>+Message</h4>\n        <input\n          name=\"userMessage\"\n          placeholder=\"message text\"\n          type=\"text\"\n          value={this.state.newMessage}\n          onChange={this.updateInputValue}\n        />\n        <button type=\"submit\">Send message</button>\n      </form>\n    )\n  }\n}\n\nNewMessageInput.propTypes = {\n  onSubmitNewMessage: PropTypes.func.isRequired,\n}\n\nexport { NewMessageInput }\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport PropTypes from 'prop-types'\nimport { fetchMessagesList } from '../actions/messageListActions'\nimport { fetchNewMessages } from '../actions/messageListActions'\nimport { MessageFrame } from '../components/MessageFrame'\nimport { NewMessageInput } from '../components/NewMessageInput'\nimport { updateInterval } from '../applicationSettings'\nimport './MessageList.sass'\n\nclass MessageList extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.messageListRef = React.createRef()\n\n    this.state = {\n      enableScrollDown: true,\n      previousMessagesLength: 0,\n      suspendMessagesFetching: false,\n      currentChat: null,\n    }\n  }\n\n  componentDidMount = () => {\n    const { currentChat } = this.props\n    if (this.state.currentChat !== currentChat) {\n      this.setState({ currentChat })\n    }\n    this.fetchMessages()\n    this.initializeMessagesListUpdateTimer()\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerID)\n  }\n\n  componentDidUpdate = () => {\n    const { messages, currentChat } = this.props\n    const scrollDownShift = 30\n    const { current } = this.messageListRef\n\n    if (this.state.currentChat !== currentChat) {\n      this.setState({ currentChat })\n      this.fetchMessages()\n      this.setState({\n        suspendMessagesFetching: true,\n      })\n      return\n    }\n\n    if (!messages) return\n\n    const messagesLength = messages.length\n    const previousMessagesLength = this.state.previousMessagesLength\n\n    if (messagesLength === previousMessagesLength) return\n\n    this.setState({\n      previousMessagesLength: messagesLength,\n    })\n\n    this.setState({\n      suspendMessagesFetching: false,\n    })\n\n    current.scrollTop += scrollDownShift\n\n    this.scrollDownIfEnabled()\n\n    this.tryLoadMessagesUntilScrollAppears()\n  }\n\n  initializeMessagesListUpdateTimer = () => {\n    this.timerID = setInterval(() => this.fetchNewMessages(), updateInterval)\n  }\n\n  fetchMessages = () => {\n    if (this.state.suspendMessagesFetching) return\n\n    this.fetchMessagesForced()\n  }\n\n  fetchMessagesForced = () => {\n    const currentChat = this.props.currentChat\n    const messages = this.props.messages\n\n    if (!currentChat || !currentChat._id) return\n    if (!messages) return\n\n    const time = new Date().getTime()\n\n    const oldestMessageTime = messages.length ? messages[0].time : time\n\n    this.props.fetchMessagesList(currentChat._id, oldestMessageTime)\n  }\n\n  fetchNewMessages = () => {\n    const currentChat = this.props.currentChat\n    const messages = this.props.messages\n\n    if (!currentChat || !currentChat._id) return\n    if (!messages) return\n\n    const lastMessageIndex = messages.length - 1\n\n    if (lastMessageIndex < 0) {\n      this.fetchMessages()\n      return\n    }\n\n    this.props.fetchNewMessages(\n      currentChat._id,\n      messages[lastMessageIndex].time\n    )\n  }\n\n  scrollDownIfEnabled = () => {\n    if (this.state.enableScrollDown) {\n      this.setState({\n        enableScrollDown: false,\n      })\n\n      this.scrollDown()\n    }\n  }\n\n  tryLoadMessagesUntilScrollAppears() {\n    const { current } = this.messageListRef\n\n    if (current.offsetWidth <= current.clientWidth) {\n      this.fetchMessages()\n    }\n  }\n\n  scrollDown = () => {\n    const { current } = this.messageListRef\n\n    current.scrollTop = current.scrollHeight\n  }\n\n  renderMessageList = () => {\n    const { messages, currentUser } = this.props\n    const messagesLength = messages.length\n\n    if (messages && messagesLength) {\n      return messages.map(function(item, index) {\n        return (\n          <div key={index}>\n            <MessageFrame message={item} currentUserEmail={currentUser.email} />\n          </div>\n        )\n      })\n    }\n  }\n\n  onScrollDownClick = () => {\n    this.scrollDown()\n  }\n\n  onScroll = () => {\n    const minScrollTop = 30\n    const { current } = this.messageListRef\n\n    if (current.scrollTop < minScrollTop) {\n      this.setState({\n        suspendMessagesFetching: true,\n      })\n\n      this.fetchMessages()\n    }\n  }\n\n  sendNewMessage = newMessage => {\n    this.props.sendNewMessage(newMessage)\n\n    this.setState({\n      enableScrollDown: true,\n    })\n  }\n\n  render() {\n    const strToDecode = '&#11015'\n    const parser = new DOMParser()\n    const decodedString = parser.parseFromString(\n      `<!doctype html><body>${strToDecode}`,\n      'text/html'\n    ).body.textContent\n\n    return (\n      <div>\n        <div className=\"scroll-down-button\" onClick={this.onScrollDownClick}>\n          {decodedString}\n        </div>\n        <div\n          ref={this.messageListRef}\n          className=\"message-list\"\n          onScroll={this.onScroll}\n        >\n          {this.renderMessageList()}\n        </div>\n        <NewMessageInput onSubmitNewMessage={this.sendNewMessage} />\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    messages: state.messages,\n    currentChat: state.currentChat,\n    currentUser: state.currentUser,\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    fetchMessagesList: (chatId, oldestMessageTime) =>\n      dispatch(fetchMessagesList(chatId, oldestMessageTime)),\n    fetchNewMessages: (chatId, newestMessageTime) =>\n      dispatch(fetchNewMessages(chatId, newestMessageTime)),\n  }\n}\n\nMessageList.propTypes = {\n  messages: PropTypes.arrayOf(\n    PropTypes.shape({\n      message: PropTypes.exact({\n        chatId: PropTypes.number.isRequired,\n        authorName: PropTypes.string.isRequired,\n        authorEmail: PropTypes.string.isRequired,\n        time: PropTypes.oneOfType([\n          PropTypes.number,\n          PropTypes.string,\n          PropTypes.instanceOf(Date),\n        ]).isRequired,\n        text: PropTypes.string.isRequired,\n        wasMessageReceived: PropTypes.bool,\n      }),\n    })\n  ),\n}\n\nexport { MessageList }\nexport default connect(mapStateToProps, mapDispatchToProps)(MessageList)\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nclass ChatFrame extends React.Component {\n  onSelectChat = () => {\n    const { chat } = this.props\n\n    this.props.onSelectChat(chat)\n  }\n\n  renderUsersList = users => {\n    if (users && users.length) {\n      return users.map((item, index) => {\n        return (\n          <div key={index}>\n            <p>{item.name}</p>\n          </div>\n        )\n      })\n    }\n  }\n\n  render() {\n    const { chat } = this.props\n\n    return (\n      <div className=\"selected-item\" onClick={this.onSelectChat}>\n        <div>\n          <h4>{chat.name}</h4>\n        </div>\n        <div>\n          <p>Chat members:</p>\n          <div>{this.renderUsersList(chat.users)}</div>\n        </div>\n      </div>\n    )\n  }\n}\n\nChatFrame.propTypes = {\n  chat: PropTypes.exact({\n    _id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    users: PropTypes.arrayOf(\n      PropTypes.exact({\n        _id: PropTypes.string.isRequired,\n        name: PropTypes.string.isRequired,\n        email: PropTypes.string.isRequired,\n      })\n    ).isRequired,\n  }),\n  onSelectChat: PropTypes.func.isRequired,\n}\n\nexport { ChatFrame }\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport PropTypes from 'prop-types'\nimport {\n  fetchChatsList,\n  tryGetPreprocessorAnd–°hangeCurrentChat,\n} from '../actions/chatSettingsActions'\nimport { ChatFrame } from '../components/ChatFrame'\nimport './ChatList.sass'\n\nclass ChatList extends React.Component {\n  componentDidMount() {\n    let userId = this.props.currentUser._id\n\n    if (!userId) return\n\n    this.props.fetchChatsList(userId)\n  }\n\n  renderChatList = () => {\n    const { chatsList, changeCurrentChat } = this.props\n\n    if (chatsList && chatsList.length) {\n      return chatsList.map(function(item) {\n        return (\n          <ChatFrame\n            onSelectChat={changeCurrentChat}\n            key={item._id}\n            chat={item}\n          />\n        )\n      })\n    }\n  }\n\n  render() {\n    return <div className=\"—Åhat-list\">{this.renderChatList()}</div>\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    chatsList: state.chatsList,\n    currentUser: state.currentUser,\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    fetchChatsList: userId => dispatch(fetchChatsList(userId)),\n    changeCurrentChat: chat =>\n      dispatch(tryGetPreprocessorAnd–°hangeCurrentChat(chat)),\n  }\n}\n\nChatList.propTypes = {\n  chatsList: PropTypes.arrayOf(\n    PropTypes.shape({\n      chat: PropTypes.exact({\n        _id: PropTypes.string.isRequired,\n        name: PropTypes.string.isRequired,\n        users: PropTypes.arrayOf(\n          PropTypes.shape({\n            _id: PropTypes.string.isRequired,\n            name: PropTypes.string.isRequired,\n            email: PropTypes.string.isRequired,\n          })\n        ).isRequired,\n      }),\n    })\n  ),\n  changeCurrentChat: PropTypes.func.isRequired,\n}\n\nexport { ChatList }\nexport default connect(mapStateToProps, mapDispatchToProps)(ChatList)\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nclass UserFrame extends React.Component {\n  onUserClick = () => {\n    const { user } = this.props\n\n    this.props.onUserClick(user)\n  }\n\n  render() {\n    const { user } = this.props\n\n    return (\n      <div className=\"selected-item\" onClick={this.onUserClick}>\n        <p>{user.name}</p>\n        <p>{user.email}</p>\n      </div>\n    )\n  }\n}\n\nUserFrame.propTypes = {\n  chat: PropTypes.exact({\n    _id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    email: PropTypes.string.isRequired,\n  }),\n  onSelectUser: PropTypes.func,\n}\n\nexport { UserFrame }\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nclass UserSeekForm extends React.Component {\n  state = {\n    userSeekData: '',\n  }\n\n  onSubmit = eventArg => {\n    eventArg.preventDefault()\n\n    this.props.onSubmitUserSeekData(this.state.userSeekData)\n\n    this.setState({\n      searchQueryString: '',\n    })\n  }\n\n  updateSearchQueryString = eventArg => {\n    this.setState({\n      userSeekData: eventArg.target.value,\n    })\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.onSubmit}>\n        <h1>Search for a new member</h1>\n        <label>Enter email</label>\n        <input\n          name=\"userEmail\"\n          placeholder=\"User email\"\n          type=\"text\"\n          value={this.state.userSeekData}\n          onChange={this.updateSearchQueryString}\n        />\n        <button type=\"submit\">Find users</button>\n      </form>\n    )\n  }\n}\n\nUserSeekForm.propTypes = {\n  onSubmitUserSeekData: PropTypes.func.isRequired,\n}\n\nexport { UserSeekForm }\n","import React from 'react'\nimport { UserFrame } from './UserFrame'\nimport { UserSeekForm } from './UserSeekForm'\nimport PropTypes from 'prop-types'\n\nclass AddToChatNewUserWindow extends React.Component {\n  onSubmitUserSeekData = userSeekData => {\n    this.props.findUsers(userSeekData)\n  }\n\n  renderUsersList = () => {\n    const { usersList, onUserClick } = this.props\n\n    if (usersList && usersList.length) {\n      return usersList.map(function(item) {\n        return (\n          <UserFrame onUserClick={onUserClick} key={item._id} user={item} />\n        )\n      })\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"cover-div\">\n        <div className=\"modal-window\">\n          <UserSeekForm onSubmitUserSeekData={this.onSubmitUserSeekData} />\n          {this.renderUsersList()}\n          <button onClick={this.props.onCancelClick}>Cancel</button>\n        </div>\n      </div>\n    )\n  }\n}\n\nAddToChatNewUserWindow.propTypes = {\n  usersList: PropTypes.arrayOf(\n    PropTypes.shape({\n      user: PropTypes.exact({\n        _id: PropTypes.number.isRequired,\n        name: PropTypes.string.isRequired,\n        email: PropTypes.string.isRequired,\n      }),\n    })\n  ),\n  findUsers: PropTypes.func.isRequired,\n  onUserClick: PropTypes.func.isRequired,\n  cancelUserAdding: PropTypes.func.isRequired,\n}\n\nexport { AddToChatNewUserWindow }\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nclass SpecialMessagesPreprocessorMenu extends React.Component {\n  state = {\n    file: null,\n    filePath: '',\n  }\n\n  onSubmit = event => {\n    const { file } = this.state\n    const { onSubmit } = this.props\n\n    event.preventDefault()\n\n    if (file) {\n      onSubmit(file)\n    }\n  }\n\n  updateMessagesPreprocessorFile = eventArg => {\n    this.setState({\n      file: eventArg.target.files[0],\n      filePath: eventArg.target.value,\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"cover-div\">\n        <div className=\"modal-window\">\n          <form onSubmit={this.onSubmit}>\n            <h4>+Chat</h4>\n            <input\n              name=\"messagesPreprocessorFile\"\n              type=\"file\"\n              value={this.state.filePath}\n              onChange={this.updateMessagesPreprocessorFile}\n            />\n            <button type=\"submit\">Add special messages preprocessor</button>\n            <button onClick={this.props.onCancelClick}>Cancel</button>\n          </form>\n        </div>\n      </div>\n    )\n  }\n}\n\nSpecialMessagesPreprocessorMenu.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n  onCancelClick: PropTypes.string,\n}\n\nexport { SpecialMessagesPreprocessorMenu }\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport { AddToChatNewUserWindow } from '../components/AddToChatNewUserWindow'\nimport { SpecialMessagesPreprocessorMenu } from '../components/SpecialMessagesPreprocessorMenu'\nimport {\n  findUsers,\n  addNewUserToCurrentChat,\n  addNewSpecialMessagesPreprocessor,\n} from '../actions/chatSettingsActions'\nimport PropTypes from 'prop-types'\n\nclass CurrentChatSettings extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      showAddedUserMenu: false,\n      showSpecialMessagesPreprocessorMenu: false,\n    }\n  }\n\n  onAddUserButtonClick = () => {\n    this.setState({\n      showAddedUserMenu: true,\n    })\n  }\n\n  onAddSpecialMessagesPreprocessorButtonClick = () => {\n    this.setState({\n      showSpecialMessagesPreprocessorMenu: true,\n    })\n  }\n\n  addNewUserToCurrentChat = user => {\n    this.cancelUserAdding()\n    this.props.addNewUserToCurrentChat(user)\n  }\n\n  cancelUserAdding = () => {\n    this.setState({\n      showAddedUserMenu: false,\n    })\n  }\n\n  addNewSpecialMessagesPreprocessor = preprocessorFunctionString => {\n    this.cancelSpecialMessagesPreprocessorAdding()\n    this.props.addNewSpecialMessagesPreprocessor(preprocessorFunctionString)\n  }\n\n  cancelSpecialMessagesPreprocessorAdding = () => {\n    this.setState({\n      showSpecialMessagesPreprocessorMenu: false,\n    })\n  }\n\n  renderAddedUserWindow = () => {\n    const {\n      showAddedUserMenu,\n      showSpecialMessagesPreprocessorMenu,\n    } = this.state\n    const { currentChat, findUsers, usersList } = this.props\n\n    if (showAddedUserMenu) {\n      return (\n        <AddToChatNewUserWindow\n          findUsers={findUsers}\n          usersList={usersList}\n          onUserClick={this.addNewUserToCurrentChat}\n          onCancelClick={this.cancelUserAdding}\n        />\n      )\n    }\n\n    if (showSpecialMessagesPreprocessorMenu) {\n      return (\n        <SpecialMessagesPreprocessorMenu\n          currentChat={currentChat}\n          onSubmit={this.addNewSpecialMessagesPreprocessor}\n          onCancelClick={this.cancelSpecialMessagesPreprocessorAdding}\n        />\n      )\n    }\n\n    if (currentChat._id) {\n      return (\n        <React.Fragment>\n          <button onClick={this.onAddUserButtonClick}>\n            Add new user to chat\n          </button>\n          <button onClick={this.onAddSpecialMessagesPreprocessorButtonClick}>\n            Add special messages preprocessor\n          </button>\n        </React.Fragment>\n      )\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <span>Chat: {this.props.currentChat.name}</span>\n        {this.renderAddedUserWindow()}\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    currentChat: state.currentChat,\n    usersList: state.usersList,\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    findUsers: userSeekData => dispatch(findUsers(userSeekData)),\n    addNewUserToCurrentChat: user => dispatch(addNewUserToCurrentChat(user)),\n    addNewSpecialMessagesPreprocessor: file =>\n      dispatch(addNewSpecialMessagesPreprocessor(file)),\n  }\n}\n\nCurrentChatSettings.propTypes = {\n  usersList: PropTypes.arrayOf(\n    PropTypes.shape({\n      user: PropTypes.exact({\n        _id: PropTypes.number.isRequired,\n        name: PropTypes.string.isRequired,\n        email: PropTypes.string.isRequired,\n      }),\n    })\n  ),\n  currentChat: PropTypes.exact({\n    _id: PropTypes.string,\n    name: PropTypes.string,\n    users: PropTypes.arrayOf(\n      PropTypes.shape({\n        _id: PropTypes.string.isRequired,\n        name: PropTypes.string.isRequired,\n        email: PropTypes.string.isRequired,\n      })\n    ),\n    forwardPreprocessorFunction: PropTypes.func,\n    backwardPreprocessorFunction: PropTypes.func,\n  }),\n  findUsers: PropTypes.func.isRequired,\n  addNewUserToCurrentChat: PropTypes.func.isRequired,\n}\n\nexport { CurrentChatSettings }\nexport default connect(mapStateToProps, mapDispatchToProps)(CurrentChatSettings)\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nclass AuthenticationForm extends React.Component {\n  state = {\n    email: '',\n    password: '',\n  }\n\n  onSubmit = event => {\n    event.preventDefault()\n\n    this.props.onSubmit(this.state.email, this.state.password)\n\n    this.setState({\n      email: '',\n      password: '',\n    })\n  }\n\n  updateUserEmailValue = eventArg => {\n    this.setState({\n      email: eventArg.target.value,\n    })\n  }\n\n  updateUserPasswordValue = eventArg => {\n    this.setState({\n      password: eventArg.target.value,\n    })\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.onSubmit} className=\"reg-auth-form\">\n        <h3>Login</h3>\n        <label>User email</label>\n        <input\n          name=\"userEmail\"\n          placeholder=\"User email\"\n          type=\"text\"\n          value={this.state.email}\n          onChange={this.updateUserEmailValue}\n        />\n        <br />\n        <label>User password</label>\n        <input\n          name=\"userPassword\"\n          placeholder=\"User password\"\n          type=\"text\"\n          value={this.state.password}\n          onChange={this.updateUserPasswordValue}\n        />\n        <br />\n        <button type=\"submit\">Submit</button>\n      </form>\n    )\n  }\n}\n\nAuthenticationForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n}\n\nexport { AuthenticationForm }\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nclass RegistrationForm extends React.Component {\n  state = {\n    email: '',\n    name: '',\n    password: '',\n  }\n\n  onSubmit = eventArg => {\n    eventArg.preventDefault()\n\n    const { email, name, password } = this.state\n\n    const user = {\n      email,\n      name,\n      password,\n    }\n\n    this.props.onSubmit(user)\n\n    this.setState({\n      email: '',\n      name: '',\n      password: '',\n    })\n  }\n\n  updateUserEmailValue = eventArg => {\n    this.setState({\n      email: eventArg.target.value,\n    })\n  }\n\n  updateUserNameValue = eventArg => {\n    this.setState({\n      name: eventArg.target.value,\n    })\n  }\n\n  updateUserPasswordValue = eventArg => {\n    this.setState({\n      password: eventArg.target.value,\n    })\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.onSubmit} className=\"reg-auth-form\">\n        <h3>New user registration</h3>\n        <label>User email</label>\n        <input\n          name=\"userEmail\"\n          placeholder=\"User email\"\n          type=\"text\"\n          value={this.state.email}\n          onChange={this.updateUserEmailValue}\n        />\n        <br />\n        <label>User name</label>\n        <input\n          name=\"userName\"\n          placeholder=\"User name\"\n          type=\"text\"\n          value={this.state.name}\n          onChange={this.updateUserNameValue}\n        />\n        <br />\n        <label>User password</label>\n        <input\n          name=\"userPassword\"\n          placeholder=\"User password\"\n          type=\"text\"\n          value={this.state.password}\n          onChange={this.updateUserPasswordValue}\n        />\n        <br />\n        <button type=\"submit\">Send new user registration data</button>\n      </form>\n    )\n  }\n}\n\nRegistrationForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n}\n\nexport { RegistrationForm }\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nfunction SettingsPanel(props) {\n  return (\n    <div>\n      <button onClick={props.onSignOut}>Sign out</button>\n      <span>{props.currentUserName}</span>\n    </div>\n  )\n}\n\nSettingsPanel.propTypes = {\n  onSignOut: PropTypes.func.isRequired,\n  currentUserName: PropTypes.string,\n}\n\nexport { SettingsPanel }\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nfunction ErrorWindow(props) {\n  const { status, badStatusText, message } = props.lastError\n\n  let statusParagraph, badStatusTextParagraph, messageParagraph\n\n  if (status) {\n    statusParagraph = <p>Status: {status}</p>\n  }\n\n  if (status) {\n    badStatusTextParagraph = <p>Status text: {badStatusText}</p>\n  }\n\n  if (status) {\n    messageParagraph = <p>Message: {message}</p>\n  }\n\n  return (\n    <div className=\"moda-window\">\n      <div>\n        <h4>Error</h4>\n      </div>\n      <div>\n        {statusParagraph}\n        {badStatusTextParagraph}\n        {messageParagraph}\n      </div>\n      <button onClick={props.onOk}>Ok</button>\n    </div>\n  )\n}\n\nErrorWindow.propTypes = {\n  lastError: PropTypes.exact({\n    status: PropTypes.number,\n    badStatusText: PropTypes.string,\n    message: PropTypes.string,\n  }),\n}\n\nexport { ErrorWindow }\n","import React from 'react'\nimport { NewChatForm } from '../components/NewChatForm'\nimport MessageList from './MessageList'\nimport ChatList from './ChatList'\nimport CurrentChatSettings from './CurrentChatSettings'\nimport { AuthenticationForm } from '../components/AuthenticationForm'\nimport { RegistrationForm } from '../components/RegistrationForm'\nimport { SettingsPanel } from '../components/SettingsPanel'\nimport { ErrorWindow } from '../components/ErrorWindow'\nimport { connect } from 'react-redux'\nimport { encryptAndSendNewMessage } from '../actions/messageListActions'\nimport {\n  submitUserEmailAndPassword,\n  submitNewUser,\n  createNewChat,\n  resetAuthenticationResult,\n  clearLastError,\n} from '../actions/chatSettingsActions'\nimport './App.sass'\n\nclass App extends React.Component {\n  renderChatListNewChatForm() {\n    if (this.props.currentUser._id) {\n      return (\n        <div>\n          <ChatList />\n          <NewChatForm\n            onSubmitNewChat={this.props.createNewChat}\n            currentUserId={this.props.currentUser._id}\n          />\n        </div>\n      )\n    }\n  }\n\n  renderMessageList() {\n    if (!this.props.currentUser._id) return\n    if (!this.props.currentChat._id) return\n\n    return <MessageList sendNewMessage={this.props.sendNewMessage} />\n  }\n\n  renderErrorWindow() {\n    if (!this.props.lastError) return\n\n    return (\n      <div className=\"cover-div\">\n        <ErrorWindow\n          className=\"modal-window\"\n          onOk={this.props.clearLastError}\n          lastError={this.props.lastError}\n        />\n      </div>\n    )\n  }\n\n  onSignOut = () => {\n    this.props.resetAuthenticationResult()\n  }\n\n  renderMainContent() {\n    if (this.props.isUserAuthenticated) {\n      return (\n        <React.Fragment>\n          <div className=\"main-panel\">\n            <div className=\"user-chats-panel\">\n              {this.renderChatListNewChatForm()}\n            </div>\n            <div className=\"current-chat-panel\">{this.renderMessageList()}</div>\n          </div>\n          <div className=\"top-panel\">\n            <SettingsPanel\n              className=\"settings-panel\"\n              onSignOut={this.onSignOut}\n              currentUserName={this.props.currentUser.name}\n            />\n            <CurrentChatSettings className=\"current-chat-settings\" />\n          </div>\n        </React.Fragment>\n      )\n    }\n\n    return (\n      <React.Fragment>\n        {this.renderErrorWindow()}\n        <div className=\"reg-auth-forms-panel\">\n          <RegistrationForm onSubmit={this.props.submitNewUser} />\n          <AuthenticationForm\n            onSubmit={this.props.submitUserEmailAndPassword}\n          />\n        </div>\n      </React.Fragment>\n    )\n  }\n\n  render() {\n    return <div className=\"app-panel\">{this.renderMainContent()}</div>\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    currentUser: state.currentUser,\n    currentChat: state.currentChat,\n    wasMessageReceived: state.wasMessageReceived,\n    isUserAuthenticated: state.isUserAuthenticated,\n    lastError: state.lastError,\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    createNewChat: (chatName, usersIds) =>\n      dispatch(createNewChat(chatName, usersIds)),\n    sendNewMessage: message => dispatch(encryptAndSendNewMessage(message)),\n    submitUserEmailAndPassword: (userEmail, userPassword) =>\n      dispatch(submitUserEmailAndPassword(userEmail, userPassword)),\n    submitNewUser: user => dispatch(submitNewUser(user)),\n    resetAuthenticationResult: () => dispatch(resetAuthenticationResult()),\n    clearLastError: () => dispatch(clearLastError()),\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport configureStore from './store/configureStore'\nimport './index.css'\nimport App from './containers/App'\nimport * as serviceWorker from './serviceWorker'\n\nconst store = configureStore()\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","import { createStore, applyMiddleware } from 'redux'\nimport thunk from 'redux-thunk'\nimport rootReducer from '../reducers'\n\nexport default function configureStore(initialState) {\n\n    return createStore(\n        rootReducer,\n        applyMiddleware(thunk)\n    )\n}"],"sourceRoot":""}