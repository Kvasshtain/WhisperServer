{"version":3,"sources":["applicationSettings.js","actions/chatSettingsActions.js","actions/messageListActions.js","reducers/index.js","reducers/messageListData.js","reducers/chatSettings.js","components/NewChatForm.js","components/MessageTimestamp.js","components/MessageFrame.js","components/NewMessageInput.js","containers/MessageList.js","components/ChatFrame.js","containers/ChatList.js","components/AuthenticationForm.js","components/RegistrationForm.js","containers/App.js","serviceWorker.js","index.js","store/configureStore.js"],"names":["serverLocation","messageSendPath","messageGetPath","submitNewChatPath","chatsListGetPath","submitUserNameAndPasswordPath","submitNewUserPath","fetchMessagesCount","CHANGE_CURRENT_USER","CHANGE_CURRENT_CHAT","REFRESH_CHATS_LIST","SET_AUTHENTICATION_RESULT","SET_LAST_ERROR","changeCurrentUser","user","type","payload","changeCurrentChat","chat","refreshChatsList","chats","setAuthenticationResult","result","setLastError","status","message","fetchChatsList","userId","dispatch","token","localStorage","fetch","method","headers","then","response","ok","json","removeItem","statusText","data","catch","error","console","log","ADD_NEW_MESSAGE","MESSAGE_WAS_RECEIVED","REFRESH_MESSAGES_LIST","UNSHIFT_PREVIOUS_MESSAGES","addNewMessage","messageWasReceived","bool","fetchMessagesList","chatId","oldestMessageTime","combineReducers","messages","state","action","concat","unshift","wasMessageReceived","currentUser","currentChat","chatsList","isUserAuthenticated","lastError","NewChatForm","name","users","onSubmit","event","preventDefault","props","onSubmitNewChat","currentUserId","setState","updateChatNameValue","eventArg","target","value","this","placeholder","onChange","React","Component","MessageTimestamp","date","Date","time","hours","getHours","minutes","getMinutes","day","getDate","month","getMonth","year","getFullYear","MessageFrame","authorName","authorEmail","text","NewMessageInput","newMessage","onSubmitNewMessage","updateInputValue","MessageList","componentDidMount","fetchMessages","_id","getTime","length","scrollDownIfEnabled","enableScrollDown","scrollDown","current","messageListRef","scrollTop","scrollHeight","componentDidUpdate","messagesLength","previousMessagesLength","renderMessageList","map","item","index","key","onScrollDownClick","onScroll","sendNewMessage","createRef","Fragment","onClick","ref","className","connect","ChatFrame","onSelectChat","renderUsersList","ChatList","renderChatList","AuthenticationForm","email","password","updateUserEmailValue","updateUserPasswordValue","RegistrationForm","updateUserNameValue","App","createNewChat","renderChatListNewChatForm","renderMessageListNewMessageInput","submitUserNameAndPassword","submitNewUser","renderMainContent","chatName","usersIds","newChatData","body","JSON","stringify","getState","userEmail","userPassword","userAuthenticationData","setItem","userName","userRegistrationData","Boolean","window","location","hostname","match","store","createStore","rootReducer","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.60bdd8f7.chunk.js","sourcesContent":["export const serverLocation = 'http://localhost:4000/'\n\nexport const messageSendPath = 'messages/new/'\nexport const messageGetPath = 'messages/listRequest/'\nexport const submitNewChatPath = 'chats/new/'\nexport const chatsListGetPath = 'chats/listRequest/'\nexport const submitUserNameAndPasswordPath = 'users/login/'\nexport const submitNewUserPath = 'users/new/'\n\nexport const fetchMessagesCount = 3","import { serverLocation, submitNewChatPath, chatsListGetPath, submitUserNameAndPasswordPath, submitNewUserPath } from '../applicationSettings'\n\nexport const CHANGE_CURRENT_USER = 'CHANGE_CURRENT_USER'\nexport const CHANGE_CURRENT_CHAT = 'CHANGE_CURRENT_CHAT'\nexport const REFRESH_CHATS_LIST = 'REFRESH_CHATS_LIST'\nexport const SET_AUTHENTICATION_RESULT = 'SET_AUTHENTICATION_RESULT'\nexport const SET_LAST_ERROR = 'SET_LAST_ERROR'\n\nexport function changeCurrentUser(user) {\n    return {\n        type: CHANGE_CURRENT_USER,\n        payload: user\n    }\n}\n\nexport function changeCurrentChat(chat) {\n    return {\n        type: CHANGE_CURRENT_CHAT,\n        payload: chat\n    }\n}\n\nexport function refreshChatsList(chats) {\n    return {\n        type: REFRESH_CHATS_LIST,\n        payload: chats,\n    }\n}\n\nexport function setAuthenticationResult(result) {\n    return {\n        type: SET_AUTHENTICATION_RESULT,\n        payload: result,\n    }\n}\n\nexport function setLastError(status, message) {\n    return {\n        type: SET_LAST_ERROR,\n        payload: {\n            status,\n            message,\n        }\n    }\n}\n\nexport function createNewChat(name, users) {\n    return (dispatch) => {\n\n        const token = localStorage.token\n\n        if(token) {\n            let newChatData = {\n                chat: {\n                    name,\n                    users,\n                }\n            }\n    \n            fetch(serverLocation + submitNewChatPath, {\n                method: 'POST',\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json',\n                    'Authorization': `Bearer ${token}`,\n                },\n                body: JSON.stringify(\n                    newChatData\n                )\n            })\n                .then((response) => {\n                    \n                    if (!response.ok) {\n\n                        localStorage.removeItem('token')\n\n                        return {\n                            status: response.status,\n                            message: response.statusText,\n                        }\n                    }\n                    \n                    return response.json()\n                })\n                .then((data) => {\n    \n                    if (data.message) {\n                        dispatch(setLastError(data.status, data.message))\n                    } else {\n                        let { _id, name, users } = data.chat\n    \n                        dispatch(changeCurrentChat(_id, name, users))\n                        dispatch(refreshChatsList(data))\n                    }\n                })\n                .catch(function (error) {\n                    console.log('error', error)\n                })\n        }\n    }\n}\n\nexport function fetchChatsList(userId) {\n    return (dispatch) => {\n\n        const token = localStorage.token\n\n        if(token) {\n            fetch(`${serverLocation}${chatsListGetPath}?user_id=${userId}`, {\n                method: 'GET',\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json',\n                    'Authorization': `Bearer ${token}`,\n                }\n            })\n                .then(response => {\n\n                    if (!response.ok) {\n\n                        localStorage.removeItem('token')\n\n                        return {\n                            status: response.status,\n                            message: response.statusText,\n                        }\n                    }\n\n                    return response.json()\n                })\n                .then((data) => {\n                    if (data.message) {\n                        dispatch(setLastError(data.status, data.message))\n\n                        localStorage.removeItem('token')\n                    } else {\n                        dispatch(refreshChatsList(data))\n                    }\n                })\n                .catch(function (error) {\n                    console.log('error', error)\n                })\n        }\n    }\n}\n\nexport function submitUserNameAndPassword(email, password) {\n    return (dispatch) => {\n\n        let userAuthenticationData = {\n            user: {\n                email,\n                name: '',\n                password,\n            }\n        }\n\n        fetch(serverLocation + submitUserNameAndPasswordPath, {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(\n                userAuthenticationData\n            )\n        })\n            .then((response) => {\n                \n                if (!response.ok) {\n                    return {\n                        status: response.status,\n                        message: response.statusText,\n                    }\n                }\n                \n                return response.json()\n            })\n            .then((data) => {\n\n                if (data.message) {\n                    dispatch(setLastError(data.status, data.message))\n                    dispatch(setAuthenticationResult(false))\n                } else {\n                    let { _id, token } = data.user\n\n                    localStorage.setItem('token', token)\n\n                    dispatch(changeCurrentUser(data.user))\n                    dispatch(setAuthenticationResult(true))\n                    dispatch(fetchChatsList(_id))\n                }\n            })\n            .catch(function (error) {\n                console.log('error', error)\n            })\n    }\n}\n\nexport function submitNewUser(email, name, password) {\n    return (dispatch) => {\n\n        let userRegistrationData = {\n            user: {\n                email,\n                name,\n                password,\n            }\n        }\n\n        fetch(serverLocation + submitNewUserPath, {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(\n                userRegistrationData\n            )\n        })\n            .then((response) => {\n                \n                if (!response.ok) {\n                    return {\n                        status: response.status,\n                        message: response.statusText,\n                    }\n                }\n                \n                return response.json()\n            })\n            .then((data) => {\n\n                if (data.message) {\n                    dispatch(setLastError(data.status, data.message))\n                    dispatch(setAuthenticationResult(false))\n                } else {\n                    let { _id, token } = data.user\n\n                    localStorage.setItem('token', token)\n\n                    dispatch(changeCurrentUser(data.user))\n                    dispatch(changeCurrentChat({}))\n                    dispatch(setAuthenticationResult(true))\n                    dispatch(fetchChatsList(_id))\n                }\n            })\n            .catch(function (error) {\n                console.log('error', error)\n            })\n    }\n}\n","import { serverLocation, messageSendPath, messageGetPath, fetchMessagesCount } from '../applicationSettings'\n\nimport { setLastError } from './chatSettingsActions'\n\nexport const ADD_NEW_MESSAGE = 'ADD_NEW_MESSAGE'\nexport const MESSAGE_WAS_RECEIVED = 'MESSAGE_WAS_RECEIVED'\nexport const REFRESH_MESSAGES_LIST = 'REFRESH_MESSAGES_LIST'\nexport const UNSHIFT_PREVIOUS_MESSAGES = 'UNSHIFT_PREVIOUS_MESSAGES'\n\nexport function addNewMessage(message) {\n    return {\n        type: ADD_NEW_MESSAGE,\n        payload: message,\n    }\n}\n\nexport function messageWasReceived(bool) {\n    return {\n        type: MESSAGE_WAS_RECEIVED,\n        payload: bool,\n    };\n}\n\nexport function refreshMessagesList(messages) {\n    return {\n        type: REFRESH_MESSAGES_LIST,\n        payload: messages,\n    }\n}\n\nexport function unshiftPreviousMessages(messages) {\n    return {\n        type: UNSHIFT_PREVIOUS_MESSAGES,\n        payload: messages,\n    }\n}\n\nexport function sendNewMessage(text) {\n    return (dispatch, getState) => {\n\n        const token = localStorage.token\n\n        if(token){\n            dispatch(messageWasReceived(false))\n\n            let time = (new Date()).getTime();\n            let authorEmail = getState().currentUser.email\n            let authorName = getState().currentUser.name\n            let chatId = getState().currentChat._id\n    \n            let message = {\n                chatId,\n                time,\n                authorEmail,\n                authorName,\n                text,\n            }\n    \n            fetch(serverLocation + messageSendPath, {\n                method: 'POST',\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json',\n                    'Authorization': `Bearer ${token}`,\n                },\n                body: JSON.stringify(\n                    message\n                )\n            })\n                .then((response) => {\n                    \n                    if (!response.ok) {\n                        message.wasMessageReceived = false\n                        localStorage.removeItem('token')\n\n                        return {\n                            status: response.status,\n                            message: response.statusText,\n                        }\n                    }\n    \n                    return response.json()\n                })\n                .then((data) => {\n                    if (data.message) {\n                        dispatch(setLastError(data.status, data.message))\n                        message.wasMessageReceived = false\n                        dispatch(addNewMessage(message))\n                        localStorage.removeItem('token')\n                    } else {\n                        message.wasMessageReceived = true\n                        dispatch(addNewMessage(message))\n                        dispatch(messageWasReceived(true));\n                    }\n                })\n                .catch(function (error) {\n                    console.log('error', error)\n                })\n        }\n    };\n}\n\nexport function fetchMessagesList(chatId, oldestMessageTime) {\n    return (dispatch) => {\n\n        const token = localStorage.token\n\n        if(token){\n            fetch(`${serverLocation}${messageGetPath}?chat_id=${chatId}&oldest_message_time=${oldestMessageTime}&fetch_messages_count=${fetchMessagesCount}`, {\n                method: 'GET',\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json',\n                    'Authorization': `Bearer ${token}`,\n                }\n            })\n                .then(response => {\n\n                    if (!response.ok) {\n                        localStorage.removeItem('token')\n\n                        return {\n                            status: response.status,\n                            message: response.statusText,\n                        }\n                    }\n\n                    return response.json()\n                })\n                .then((data) => {\n\n                    if (data.message) {\n                        dispatch(setLastError(data.status, data.message))\n                        localStorage.removeItem('token')\n                    } else {\n                        dispatch(unshiftPreviousMessages(data))\n                    }\n                })\n                .catch(function (error) {\n                    console.log('error', error)\n                })\n        }\n    }\n}","import { combineReducers } from 'redux'\nimport { messages, wasMessageReceived } from './messageListData'\nimport { currentUser, currentChat, chatsList, isUserAuthenticated, lastError } from './chatSettings'\n\nexport default combineReducers({\n    messages,\n    wasMessageReceived,\n    currentUser,\n    currentChat,\n    chatsList,\n    isUserAuthenticated,\n    lastError,\n})","import { ADD_NEW_MESSAGE, MESSAGE_WAS_RECEIVED, REFRESH_MESSAGES_LIST, UNSHIFT_PREVIOUS_MESSAGES } from '../actions/messageListActions'\n\nexport function messages(state = [], action) {\n    switch (action.type) {\n        case ADD_NEW_MESSAGE:\n            return state.concat(action.payload)\n        case REFRESH_MESSAGES_LIST:\n            return action.payload\n        case UNSHIFT_PREVIOUS_MESSAGES:\n            return state.unshift(...action.payload)\n        default:\n            return state\n    }\n}\n\nexport function wasMessageReceived(state = true, action) {\n    switch (action.type) {\n        case MESSAGE_WAS_RECEIVED:\n            return action.payload\n        default:\n            return state\n    }\n}","import { \n    CHANGE_CURRENT_USER, \n    CHANGE_CURRENT_CHAT, \n    REFRESH_CHATS_LIST, \n    SET_AUTHENTICATION_RESULT, \n    SET_LAST_ERROR\n} from '../actions/chatSettingsActions'\n\nexport function currentUser(state = {}, action) {\n    switch (action.type) {\n        case CHANGE_CURRENT_USER:\n            return action.payload\n        default:\n            return state\n    }\n}\n\nexport function currentChat(state = {}, action) {\n    switch (action.type) {\n        case CHANGE_CURRENT_CHAT:\n            return action.payload\n        default:\n            return state\n    }\n}\n\nexport function chatsList(state = [], action) {\n    switch (action.type) {\n        case REFRESH_CHATS_LIST:\n            return action.payload\n        default:\n            return state\n    }\n}\n\nexport function isUserAuthenticated(state = false, action) {\n    switch (action.type) {\n        case SET_AUTHENTICATION_RESULT:\n            return action.payload\n        default:\n            return state\n    }\n}\n\nexport function lastError(state = {}, action) {\n    switch (action.type) {\n        case SET_LAST_ERROR:\n            return action.payload\n        default:\n            return state\n    }\n}","import React from 'react'\nimport PropTypes from 'prop-types'\n\nclass NewChatForm extends React.Component {\n\n    state = {\n        name: '',\n        users: [],\n    }\n\n    onSubmit = (event) => {\n        event.preventDefault()\n\n        this.props.onSubmitNewChat(this.state.name, [this.props.currentUserId])\n\n        this.setState({\n            name: '',\n            users: [],\n        })\n    }\n\n    updateChatNameValue = (eventArg) => {\n        this.setState({\n            name: eventArg.target.value\n        })\n    }\n\n    render() {\n        return (\n            <form onSubmit={this.onSubmit}>\n                <h1>Create new chat</h1>\n                <input\n                    name = 'chatName'\n                    placeholder = 'chat name'\n                    type = 'text'\n                    value = { this.state.name }\n                    onChange = { this.updateChatNameValue }\n                />\n                <button type = \"submit\">\n                    Create\n                </button>\n            </form>\n        )\n    }\n}\n\nNewChatForm.propTypes = {\n    currentUserId: PropTypes.string.isRequired,\n    onSubmitNewChat: PropTypes.func.isRequired,\n}\n\nexport { NewChatForm }","import React from 'react'\nimport PropTypes from 'prop-types'\n\nfunction MessageTimestamp(props) {\n\n    let date = new Date(props.time)\n    let hours = date.getHours()\n    let minutes = date.getMinutes()\n    let day = date.getDate()\n    let month = date.getMonth() + 1\n    let year = date.getFullYear()\n\n    return (\n        <div>\n            <p>{hours}:{minutes} {day}.{month}.{year}</p>\n        </div>\n    )\n}\n\nMessageTimestamp.propTypes = {\n    time: PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.instanceOf(Date)]).isRequired\n}\n\nexport { MessageTimestamp }","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { MessageTimestamp } from './MessageTimestamp'\n\nfunction MessageFrame(props) {\n\n    let message = props.message\n\n    return (\n        <div>\n            <div>\n                <p>{ message.authorName }</p>\n            </div>\n            <div>\n                <p>{ message.authorEmail }</p>\n            </div>\n            <div>\n                <p>{ message.text }</p>\n            </div>\n            <MessageTimestamp time = { message.time } />\n        </div>\n    )\n}\n\nMessageFrame.propTypes = {\n    message: PropTypes.exact({\n        _id: PropTypes.string,\n        chatId: PropTypes.string.isRequired,\n        authorName: PropTypes.string.isRequired,\n        authorEmail: PropTypes.string.isRequired,\n        time: PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.instanceOf(Date)]).isRequired,\n        text: PropTypes.string.isRequired,\n        wasMessageReceived: PropTypes.bool,\n    })\n}\n\nexport { MessageFrame }","import React from 'react'\nimport PropTypes from 'prop-types'\n\nclass NewMessageInput extends React.Component {\n\n    state = {\n        newMessage: ''\n    }\n\n    onSubmit = (event) => {\n        event.preventDefault()\n        \n        this.props.onSubmitNewMessage(this.state.newMessage)\n\n        this.setState({\n            newMessage: ''\n        })\n    }\n\n    updateInputValue = (eventArg) => {\n        this.setState({\n            newMessage: eventArg.target.value\n        })\n    }\n\n    render() {\n        return (\n            <form onSubmit = { this.onSubmit }>\n                <h1>Send new message</h1>\n                <input\n                    name = 'userMessage'\n                    placeholder = 'message text'\n                    type = 'text'\n                    value = { this.state.newMessage }\n                    onChange = { this.updateInputValue }\n                />\n                <button type = 'submit'>\n                    Send message\n                </button>\n            </form>\n        )\n    }\n}\n\nNewMessageInput.propTypes = {\n    onSubmitNewMessage: PropTypes.func.isRequired\n}\n\nexport { NewMessageInput }","import React from 'react'\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types'\nimport { fetchMessagesList } from '../actions/messageListActions';\nimport { MessageFrame } from '../components/MessageFrame'\nimport { NewMessageInput } from '../components/NewMessageInput'\n\nclass MessageList extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.messageListRef = React.createRef()\n        this.state = {\n            enableScrollDown: true,\n            scrollTop: 0,\n            previousMessagesLength: 0,\n        }\n    }\n\n    componentDidMount = () => {\n        this.fetchMessages()\n    }\n\n    fetchMessages = () => {\n        let currentChat = this.props.currentChat\n        let messages = this.props.messages\n\n        if(!currentChat || !currentChat._id) return\n        if(!messages) return\n\n        let time = (new Date()).getTime();\n\n        let oldestMessageTime = messages.length ? messages[0].time : time\n\n        this.props.fetchMessagesList(currentChat._id, oldestMessageTime)\n    }\n\n    scrollDownIfEnabled = () => {\n        if (this.state.enableScrollDown) {\n\n            this.setState({\n                enableScrollDown: false,\n            })\n\n            this.scrollDown()\n        }\n    }\n\n    scrollDown = () => {\n        const { current } = this.messageListRef\n\n        current.scrollTop = current.scrollHeight\n    }\n\n    componentDidUpdate = () => {\n        const { messages } = this.props;\n        \n        if (!messages) return\n        \n        let messagesLength = messages.length\n        let previousMessagesLength = this.state.previousMessagesLength\n        \n        if (messagesLength === previousMessagesLength) return\n\n        this.setState({\n            previousMessagesLength: messagesLength,\n        })\n\n        this.scrollDownIfEnabled()\n    }\n\n    renderMessageList = () => {\n        const { messages } = this.props;\n        let messagesLength = messages.length\n\n        if (messages && messagesLength) {\n            return messages.map(function (item, index) {\n                return (\n                    <MessageFrame key = { index } message = { item } />\n                    )\n                })\n        }\n    }\n\n    onScrollDownClick = () => {\n        this.scrollDown()\n    }\n\n    onScroll = () => {\n        const minScrollTop = 10\n        const { current } = this.messageListRef\n\n        if (current.scrollTop < minScrollTop) {\n            this.fetchMessages()\n        }\n        //  = current.scrollHeight\n    }\n\n    sendNewMessage = (newMessage) => {\n        this.props.sendNewMessage(newMessage)\n        \n        this.setState({\n            enableScrollDown: true,\n        })\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <button onClick = { this.onScrollDownClick}>\n                    Scroll down\n                </button>\n                <div ref={this.messageListRef} className=\"messageList\" onScroll = { this.onScroll }>\n                    {this.renderMessageList()}\n                </div>\n                <NewMessageInput\n                    onSubmitNewMessage = { this.sendNewMessage }\n                />\n            </React.Fragment>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        messages: state.messages,\n        currentChat: state.currentChat,\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        fetchMessagesList: (chatId, oldestMessageTime) => dispatch(fetchMessagesList(chatId, oldestMessageTime)),\n    }\n}\n\nMessageList.propTypes = {\n    messages: PropTypes.arrayOf(PropTypes.shape({\n        message: PropTypes.exact({\n            chatId: PropTypes.number.isRequired,\n            authorName: PropTypes.string.isRequired,\n            authorEmail: PropTypes.string.isRequired,\n            time: PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.instanceOf(Date)]).isRequired,\n            text: PropTypes.string.isRequired,\n            wasMessageReceived: PropTypes.bool,\n        })\n    })\n    )\n}\n\nexport { MessageList }\nexport default connect(mapStateToProps, mapDispatchToProps)(MessageList);","import React from 'react'\nimport PropTypes from 'prop-types'\n\nclass ChatFrame extends React.Component {\n\n    onSelectChat = () => {\n        \n        let chat = this.props.chat\n        \n        this.props.onSelectChat(chat)\n    }\n\n    renderUsersList = (users) => {\n        \n        if (users && users.length) {\n\n            return users.map((item, index) => {\n                return (\n                    <div key = { index }>\n                        <p>{ item.name }</p>\n                    </div>  \n                )\n            })\n        }\n    }\n\n    render() {\n        let chat = this.props.chat\n\n        return (\n            <div onClick = { this.onSelectChat }>\n                <div>\n                    <p>{ chat.name }</p>\n                </div>\n                <div>\n                    <h3>Chat users:</h3><br />\n                        <div>\n                            { this.renderUsersList(chat.users) }\n                        </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nChatFrame.propTypes = {\n    chat: PropTypes.exact({\n        _id: PropTypes.string.isRequired,\n        name: PropTypes.string.isRequired,\n        users: PropTypes.arrayOf(PropTypes.exact({\n            _id: PropTypes.string.isRequired,\n            name: PropTypes.string.isRequired,\n            email: PropTypes.string.isRequired,\n        })).isRequired,\n    }),\n    onSelectChat: PropTypes.func.isRequired,\n}\n\nexport { ChatFrame }","import React from 'react'\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types'\nimport { fetchChatsList, changeCurrentChat } from '../actions/chatSettingsActions';\nimport { ChatFrame } from '../components/ChatFrame'\n\nclass ChatList extends React.Component {\n\n    componentDidMount() {\n\n        let userId = this.props.currentUser._id\n\n        if (!userId) return\n\n        this.props.fetchChatsList(userId)\n    }\n\n    renderChatList = () => {\n        const { chatsList, changeCurrentChat } = this.props;\n\n        if (chatsList && chatsList.length) {\n            return chatsList.map(function (item) {\n                return (\n                    <ChatFrame onSelectChat = { changeCurrentChat } key = { item._id } chat = { item } />\n                )\n            })\n        }\n    }\n\n    render() {\n        return (\n            <div className = \"сhatList\">\n                {this.renderChatList()}\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        chatsList: state.chatsList,\n        currentUser: state.currentUser,\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        fetchChatsList: (userId) => dispatch(fetchChatsList(userId)),\n        changeCurrentChat: (chat) => dispatch(changeCurrentChat(chat)),\n    }\n}\n\nChatList.propTypes = {\n    chatsList: PropTypes.arrayOf(PropTypes.shape({\n        chat: PropTypes.exact({\n            _id: PropTypes.string.isRequired,\n            name: PropTypes.string.isRequired,\n            users: PropTypes.arrayOf(PropTypes.shape({\n                _id: PropTypes.string.isRequired,\n                name: PropTypes.string.isRequired,\n                email: PropTypes.string.isRequired,\n            })).isRequired,\n        })\n    })),\n    changeCurrentChat: PropTypes.func.isRequired,\n}\n\nexport { ChatList }\nexport default connect(mapStateToProps, mapDispatchToProps)(ChatList);","import React from 'react'\nimport PropTypes from 'prop-types'\n\nclass AuthenticationForm extends React.Component {\n\n    state = {\n        email: '',\n        password: ''\n    }\n\n    onSubmit = (event) => {\n        event.preventDefault()\n\n        this.props.onSubmit(this.state.email, this.state.password)\n\n        this.setState({\n            email: '',\n            password: '',\n        })\n    }\n\n    updateUserEmailValue = (eventArg) => {\n        this.setState({\n            email: eventArg.target.value\n        })\n    }\n\n    updateUserPasswordValue = (eventArg) => {\n        this.setState({\n            password: eventArg.target.value\n        })\n    }\n\n    render() {\n        return (\n            <form onSubmit={this.onSubmit}>\n                <h1>Login</h1>\n                <label>User email</label>\n                <input\n                    name='userEmail'\n                    placeholder='User email'\n                    type='text'\n                    value={this.state.email}\n                    onChange={this.updateUserEmailValue}\n                /><br />\n                <label>User password</label>\n                <input\n                    name='userPassword'\n                    placeholder='User password'\n                    type='text'\n                    value={this.state.password}\n                    onChange={this.updateUserPasswordValue}\n                /><br />\n                <button type=\"submit\">\n                    Submit\n                </button>\n            </form>\n        )\n    }\n}\n\nAuthenticationForm.propTypes = {\n    onSubmit: PropTypes.func.isRequired\n}\n\nexport { AuthenticationForm }","import React from 'react'\nimport PropTypes from 'prop-types'\n\nclass RegistrationForm extends React.Component {\n\n    state = {\n        email: '',\n        name: '',\n        password: '',\n    }\n\n    onSubmit = (eventArg) => {\n        eventArg.preventDefault()\n\n        this.props.onSubmit(this.state.email, this.state.name, this.state.password)\n\n        this.setState({\n            email: '',\n            name: '',\n            password: '',\n        })\n    }\n\n    updateUserEmailValue = (eventArg) => {\n        this.setState({\n            email: eventArg.target.value\n        })\n    }\n\n    updateUserNameValue = (eventArg) => {\n        this.setState({\n            name: eventArg.target.value\n        })\n    }\n\n    updateUserPasswordValue = (eventArg) => {\n        this.setState({\n            password: eventArg.target.value\n        })\n    }\n\n    render() {\n        return (\n            <form onSubmit={this.onSubmit}>\n                <h1>New user registration</h1>\n                <label>User email</label>\n                <input\n                    name = \"userEmail\"\n                    placeholder = 'User email'\n                    type = 'text'\n                    value = { this.state.email }\n                    onChange = { this.updateUserEmailValue }\n                /><br />\n                <label>User name</label>\n                <input\n                    name = 'userName'\n                    placeholder = 'User name'\n                    type = 'text'\n                    value = { this.state.name }\n                    onChange = { this.updateUserNameValue }\n                /><br />\n                <label>User password</label>\n                <input\n                    name = 'userPassword'\n                    placeholder = 'User password'\n                    type = 'text'\n                    value = { this.state.password }\n                    onChange = { this.updateUserPasswordValue }\n                /><br />\n                <button type = 'submit'>\n                    Send new user registration data\n                </button>\n            </form>\n        )\n    }\n}\n\nRegistrationForm.propTypes = {\n    onSubmit: PropTypes.func.isRequired\n}\n\nexport { RegistrationForm }","import React from 'react'\nimport { NewChatForm } from '../components/NewChatForm'\nimport MessageList from './MessageList'\nimport ChatList from './ChatList'\nimport { AuthenticationForm } from '../components/AuthenticationForm'\nimport { RegistrationForm } from '../components/RegistrationForm'\nimport { connect } from 'react-redux'\nimport { sendNewMessage } from '../actions/messageListActions'\nimport { submitUserNameAndPassword, submitNewUser, createNewChat } from '../actions/chatSettingsActions'\nimport '../App.css'\n\nclass App extends React.Component {\n\n  renderChatListNewChatForm() {\n    if (this.props.currentUser._id) {\n      return (\n        <React.Fragment>\n          <ChatList />\n          <NewChatForm\n            onSubmitNewChat = { this.props.createNewChat }\n            currentUserId = { this.props.currentUser._id }\n          />\n        </React.Fragment>\n      ) \n    }\n  }\n\n  renderMessageListNewMessageInput() {\n    if (!this.props.currentUser._id) return\n    if (!this.props.currentChat._id) return\n\n    return (\n        <MessageList sendNewMessage = { this.props.sendNewMessage } />\n    )\n  }\n\n  renderMainContent() {\n    if (this.props.isUserAuthenticated) {\n      return (\n        <React.Fragment>\n          <h1>Curret user: { this.props.currentUser.name }</h1>\n          <h1>Curret chat: { this.props.currentChat.name }</h1>\n          {this.renderChatListNewChatForm()}\n          {this.renderMessageListNewMessageInput()}\n        </React.Fragment>\n      )\n    }\n\n    return (\n      <AuthenticationForm\n        onSubmit = { this.props.submitUserNameAndPassword }\n      />\n    )\n  }\n\n  render() {\n\n    return (\n      <React.Fragment>\n        <RegistrationForm \n          onSubmit = { this.props.submitNewUser }\n        />\n        {this.renderMainContent()}\n      </React.Fragment>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    currentUser: state.currentUser,\n    currentChat: state.currentChat,\n    wasMessageReceived: state.wasMessageReceived,\n    isUserAuthenticated: state.isUserAuthenticated,\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    createNewChat: (chatName, usersIds) => dispatch(createNewChat(chatName, usersIds)),\n    sendNewMessage: (message) => dispatch(sendNewMessage(message)),\n    submitUserNameAndPassword: (userEmail, userPassword) => dispatch(submitUserNameAndPassword(userEmail, userPassword)),\n    submitNewUser: (userEmail, userName, userPassword) => dispatch(submitNewUser(userEmail, userName, userPassword)),\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport configureStore from './store/configureStore';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = configureStore()\n\nReactDOM.render(\n    <Provider store = {store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers';\n\nexport default function configureStore(initialState) {\n\n    return createStore(\n        rootReducer,\n        applyMiddleware(thunk)\n    );\n}"],"sourceRoot":""}