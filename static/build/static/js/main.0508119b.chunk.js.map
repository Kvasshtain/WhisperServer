{"version":3,"sources":["applicationSettings.js","actions/helper.js","actions/chatSettingsActions.js","actions/messageListActions.js","reducers/index.js","reducers/messageListData.js","reducers/chatSettings.js","components/NewChatForm.js","components/MessageTimestamp.js","components/MessageFrame.js","components/NewMessageInput.js","containers/MessageList.js","components/ChatFrame.js","containers/ChatList.js","components/UserFrame.js","components/UserSeekForm.js","components/AddToChatNewUserWindow.js","containers/CurrentChatSettings.js","components/AuthenticationForm.js","components/RegistrationForm.js","components/SettingsPanel.js","components/ErrorWindow.js","containers/App.js","serviceWorker.js","index.js","store/configureStore.js"],"names":["serverLocation","messageSendPath","messageGetPath","newMessageGetPath","submitNewChatPath","chatsListGetPath","submitUserEmailAndPasswordPath","submitNewUserPath","searchUsersPath","addNewUserToChatPath","fetchMessagesCount","updateInterval","httpHeadersWithoutToken","Accept","createHttpHeadersWithToken","token","Authorization","checkResponseAndCreateErrorIfBadStatus","response","ok","status","badStatusText","statusText","message","validateEmail","email","test","CHANGE_CURRENT_USER","CHANGE_CURRENT_CHAT","REFRESH_CHATS_LIST","SET_AUTHENTICATION_RESULT","SET_LAST_ERROR","FILL_FOUND_USERS_LIST","CLEAR_LAST_ERROR","changeCurrentUser","user","type","payload","changeCurrentChat","chat","setAuthenticationResult","result","handleServerError","serverErrorData","dispatch","resetAuthenticationResult","setLastError","errorData","localStorage","removeItem","fetchChatsList","userId","fetch","method","headers","then","serverError","json","data","catch","error","console","log","findUsers","userSeekData","ADD_NEW_MESSAGE","MESSAGE_WAS_RECEIVED","REFRESH_MESSAGES_LIST","UNSHIFT_PREVIOUS_MESSAGES","PUSH_NEW_MESSAGES","addNewMessage","messageWasReceived","bool","encryptAndSendNewMessage","text","setItem","encryptFuncString","encryptFunc","getState","time","Date","getTime","authorEmail","currentUser","authorName","name","chatId","currentChat","_id","body","JSON","stringify","wasMessageReceived","sendNewMessage","Function","fetchMessagesList","oldestMessageTime","fetchNewMessages","newestMessageTime","combineReducers","messages","state","action","concat","previousMessages","newMessages","chatsList","isUserAuthenticated","lastError","usersList","NewChatForm","users","onSubmit","event","preventDefault","props","onSubmitNewChat","currentUserId","setState","updateChatNameValue","eventArg","target","value","this","placeholder","onChange","React","Component","MessageTimestamp","date","hours","getHours","minutes","getMinutes","day","getDate","month","getMonth","year","getFullYear","MessageFrame","messageFrameClass","currentUserEmail","className","NewMessageInput","newMessage","onSubmitNewMessage","updateInputValue","MessageList","componentDidMount","fetchMessages","initializeMessagesListUpdateTimer","componentDidUpdate","current","messageListRef","messagesLength","length","previousMessagesLength","scrollTop","scrollDownIfEnabled","tryLoadMessagesUntilScrollAppears","timerID","setInterval","lastMessageIndex","enableScrollDown","scrollDown","scrollHeight","renderMessageList","map","item","index","key","onScrollDownClick","onScroll","createRef","clearInterval","offsetWidth","clientWidth","decodedString","DOMParser","parseFromString","textContent","onClick","ref","connect","ChatFrame","onSelectChat","renderUsersList","ChatList","renderChatList","UserFrame","onUserClick","UserSeekForm","onSubmitUserSeekData","searchQueryString","updateSearchQueryString","AddToChatNewUserWindow","cancelUserAdding","CurrentChatSettings","onAddUserButtonClick","showAddedUserMenu","addNewUserToCurrentChat","renderAddedUserWindow","newUserId","AuthenticationForm","password","updateUserEmailValue","updateUserPasswordValue","RegistrationForm","updateUserNameValue","SettingsPanel","onSignOut","currentUserName","ErrorWindow","statusParagraph","badStatusTextParagraph","messageParagraph","onOk","App","createNewChat","clearLastError","Fragment","renderChatListNewChatForm","renderErrorWindow","submitNewUser","submitUserEmailAndPassword","renderMainContent","chatName","usersIds","newChatData","userEmail","userPassword","userAuthenticationData","Boolean","window","location","hostname","match","store","createStore","rootReducer","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0508119b.chunk.js","sourcesContent":["export const serverLocation = 'http://localhost:4000/'\n\nexport const messageSendPath = 'messages/new/'\nexport const messageGetPath = 'messages/listRequest/'\nexport const newMessageGetPath = 'messages/lastMessages/'\nexport const submitNewChatPath = 'chats/new/'\nexport const chatsListGetPath = 'chats/listRequest/'\nexport const submitUserEmailAndPasswordPath = 'users/login/'\nexport const submitNewUserPath = 'users/new/'\nexport const searchUsersPath = 'users/search/'\nexport const addNewUserToChatPath = 'chats/addNewUser/'\n\nexport const fetchMessagesCount = 3\nexport const updateInterval = 10000\n","export const httpHeadersWithoutToken = {\n  Accept: 'application/json',\n  'Content-Type': 'application/json',\n}\n\nexport function createHttpHeadersWithToken(token) {\n  return {\n    Accept: 'application/json',\n    'Content-Type': 'application/json',\n    Authorization: `Bearer ${token}`,\n  }\n}\n\nexport function checkResponseAndCreateErrorIfBadStatus(response) {\n  if (response.ok) {\n    return\n  } else {\n    const { status, statusText, message } = response\n\n    return {\n      status,\n      badStatusText: statusText,\n      message,\n    }\n  }\n}\n\nexport function validateEmail(email) {\n  const reg = /^([A-Za-z0-9_\\-\\.])+\\@([A-Za-z0-9_\\-\\.])+\\.([A-Za-z]{2,4})$/\n\n  return reg.test(email)\n}\n","import {\n  serverLocation,\n  submitNewChatPath,\n  chatsListGetPath,\n  submitUserEmailAndPasswordPath,\n  submitNewUserPath,\n  searchUsersPath,\n  addNewUserToChatPath,\n} from '../applicationSettings'\n\nimport {\n  createHttpHeadersWithToken,\n  httpHeadersWithoutToken,\n  checkResponseAndCreateErrorIfBadStatus,\n  validateEmail,\n} from './helper'\n\nexport const CHANGE_CURRENT_USER = 'CHANGE_CURRENT_USER'\nexport const CHANGE_CURRENT_CHAT = 'CHANGE_CURRENT_CHAT'\nexport const REFRESH_CHATS_LIST = 'REFRESH_CHATS_LIST'\nexport const SET_AUTHENTICATION_RESULT = 'SET_AUTHENTICATION_RESULT'\nexport const SET_LAST_ERROR = 'SET_LAST_ERROR'\nexport const FILL_FOUND_USERS_LIST = 'FILL_FOUND_USERS_LIST'\nexport const CLEAR_LAST_ERROR = 'CLEAR_LAST_ERROR'\n\nexport function changeCurrentUser(user) {\n  return {\n    type: CHANGE_CURRENT_USER,\n    payload: user,\n  }\n}\n\nexport function changeCurrentChat(chat) {\n  return {\n    type: CHANGE_CURRENT_CHAT,\n    payload: chat,\n  }\n}\n\nexport function refreshChatsList(chats) {\n  return {\n    type: REFRESH_CHATS_LIST,\n    payload: chats,\n  }\n}\n\nexport function setAuthenticationResult(result) {\n  return {\n    type: SET_AUTHENTICATION_RESULT,\n    payload: result,\n  }\n}\n\nexport function handleServerError(serverErrorData) {\n  return dispatch => {\n    if (serverErrorData.status === 401) {\n      dispatch(resetAuthenticationResult())\n    }\n\n    dispatch(setLastError(serverErrorData))\n  }\n}\n\nexport function setLastError(errorData) {\n  return {\n    type: SET_LAST_ERROR,\n    payload: errorData,\n  }\n}\n\nexport function fillFoundUsersList(usersList) {\n  return {\n    type: FILL_FOUND_USERS_LIST,\n    payload: usersList,\n  }\n}\n\nexport function resetAuthenticationResult() {\n  return dispatch => {\n    localStorage.removeItem('token')\n    dispatch(setAuthenticationResult(false))\n  }\n}\n\nexport function clearLastError() {\n  return {\n    type: CLEAR_LAST_ERROR,\n  }\n}\n\nexport function createNewChat(name, users) {\n  return (dispatch, getState) => {\n    const { token } = localStorage\n\n    if (token) {\n      const newChatData = {\n        chat: {\n          name,\n          users,\n        },\n      }\n\n      fetch(serverLocation + submitNewChatPath, {\n        method: 'POST',\n        headers: createHttpHeadersWithToken(token),\n        body: JSON.stringify(newChatData),\n      })\n        .then(response => {\n          const serverError = checkResponseAndCreateErrorIfBadStatus(response)\n          return serverError ? serverError : response.json()\n        })\n        .then(data => {\n          if (data.status) {\n            dispatch(handleServerError(data))\n          } else {\n            const { _id, name, users } = data.chat\n            const { currentUser } = getState()\n\n            dispatch(changeCurrentChat(_id, name, users))\n            dispatch(fetchChatsList(currentUser._id))\n          }\n        })\n        .catch(function(error) {\n          console.log('error', error)\n        })\n    }\n  }\n}\n\nexport function fetchChatsList(userId) {\n  return dispatch => {\n    const { token } = localStorage\n\n    if (token) {\n      fetch(`${serverLocation}${chatsListGetPath}?user_id=${userId}`, {\n        method: 'GET',\n        headers: createHttpHeadersWithToken(token),\n      })\n        .then(response => {\n          const serverError = checkResponseAndCreateErrorIfBadStatus(response)\n          return serverError ? serverError : response.json()\n        })\n        .then(data => {\n          if (data.badStatusText) {\n            dispatch(handleServerError(data))\n            localStorage.removeItem('token')\n          } else {\n            dispatch(refreshChatsList(data))\n          }\n        })\n        .catch(function(error) {\n          console.log('error', error)\n        })\n    }\n  }\n}\n\nexport function submitUserEmailAndPassword(email, password) {\n  return dispatch => {\n    if (!validateEmail(email)) {\n      dispatch(\n        setLastError({\n          message: `Bad email: ${email}`,\n        })\n      )\n      return\n    }\n\n    const userAuthenticationData = {\n      user: {\n        email,\n        name: '',\n        password,\n      },\n    }\n\n    fetch(serverLocation + submitUserEmailAndPasswordPath, {\n      method: 'POST',\n      headers: httpHeadersWithoutToken,\n      body: JSON.stringify(userAuthenticationData),\n    })\n      .then(response => {\n        const serverError = checkResponseAndCreateErrorIfBadStatus(response)\n        return serverError ? serverError : response.json()\n      })\n      .then(data => {\n        if (data.badStatusText) {\n          dispatch(handleServerError(data))\n          dispatch(setAuthenticationResult(false))\n        } else {\n          const { _id, token } = data.user\n\n          localStorage.setItem('token', token)\n\n          dispatch(changeCurrentUser(data.user))\n          dispatch(setAuthenticationResult(true))\n          dispatch(fetchChatsList(_id))\n        }\n      })\n      .catch(function(error) {\n        console.log('error', error)\n      })\n  }\n}\n\nexport function submitNewUser(user) {\n  return dispatch => {\n    if (!validateEmail(user.email)) {\n      dispatch(\n        setLastError({\n          message: `Bad email: ${user.email}`,\n        })\n      )\n\n      return\n    }\n\n    fetch(serverLocation + submitNewUserPath, {\n      method: 'POST',\n      headers: httpHeadersWithoutToken,\n      body: JSON.stringify({ user }),\n    })\n      .then(response => {\n        const serverError = checkResponseAndCreateErrorIfBadStatus(response)\n        return serverError ? serverError : response.json()\n      })\n      .then(data => {\n        if (data.badStatusText) {\n          dispatch(handleServerError(data))\n          dispatch(setAuthenticationResult(false))\n        } else {\n          const { _id, token } = data.user\n\n          localStorage.setItem('token', token)\n\n          dispatch(changeCurrentUser(data.user))\n          dispatch(changeCurrentChat({}))\n          dispatch(setAuthenticationResult(true))\n          dispatch(fetchChatsList(_id))\n        }\n      })\n      .catch(function(error) {\n        console.log('error', error)\n      })\n  }\n}\n\nexport function findUsers(userSeekData) {\n  return dispatch => {\n    const { token } = localStorage\n\n    if (token) {\n      fetch(\n        `${serverLocation}${searchUsersPath}?user_seek_data=${userSeekData}`,\n        {\n          method: 'GET',\n          headers: createHttpHeadersWithToken(token),\n        }\n      )\n        .then(response => {\n          const serverError = checkResponseAndCreateErrorIfBadStatus(response)\n          return serverError ? serverError : response.json()\n        })\n        .then(data => {\n          if (data.badStatusText) {\n            dispatch(handleServerError(data))\n\n            localStorage.removeItem('token')\n          } else {\n            dispatch(fillFoundUsersList(data))\n          }\n        })\n        .catch(function(error) {\n          console.log('error', error)\n        })\n    }\n  }\n}\n\nexport function addNewUserToCurrentChat(user) {\n  return (dispatch, getState) => {\n    const { token } = localStorage\n    if (token) {\n      const { currentChat } = getState()\n\n      fetch(serverLocation + addNewUserToChatPath, {\n        method: 'POST',\n        headers: createHttpHeadersWithToken(token),\n        body: JSON.stringify({\n          chatId: currentChat._id,\n          newUserId: user._id,\n        }),\n      })\n        .then(response => {\n          const serverError = checkResponseAndCreateErrorIfBadStatus(response)\n          return serverError ? serverError : response.json()\n        })\n        .then(data => {\n          if (data.badStatusText) {\n            dispatch(handleServerError(data))\n          } else {\n            const { _id, name, users } = data.chat\n\n            dispatch(changeCurrentChat(_id, name, users))\n          }\n        })\n        .catch(function(error) {\n          console.log('error', error)\n        })\n    }\n  }\n}\n","import {\n  serverLocation,\n  messageSendPath,\n  messageGetPath,\n  newMessageGetPath,\n  fetchMessagesCount,\n} from '../applicationSettings'\n\nimport { handleServerError } from './chatSettingsActions'\n\nimport {\n  createHttpHeadersWithToken,\n  checkResponseAndCreateErrorIfBadStatus,\n} from './helper'\n\nexport const ADD_NEW_MESSAGE = 'ADD_NEW_MESSAGE'\nexport const MESSAGE_WAS_RECEIVED = 'MESSAGE_WAS_RECEIVED'\nexport const REFRESH_MESSAGES_LIST = 'REFRESH_MESSAGES_LIST'\nexport const UNSHIFT_PREVIOUS_MESSAGES = 'UNSHIFT_PREVIOUS_MESSAGES'\nexport const PUSH_NEW_MESSAGES = 'PUSH_NEW_MESSAGES'\n\nexport function addNewMessage(message) {\n  return {\n    type: ADD_NEW_MESSAGE,\n    payload: message,\n  }\n}\n\nexport function messageWasReceived(bool) {\n  return {\n    type: MESSAGE_WAS_RECEIVED,\n    payload: bool,\n  }\n}\n\nexport function refreshMessagesList(messages) {\n  return {\n    type: REFRESH_MESSAGES_LIST,\n    payload: messages,\n  }\n}\n\nexport function unshiftPreviousMessages(messages) {\n  return {\n    type: UNSHIFT_PREVIOUS_MESSAGES,\n    payload: messages,\n  }\n}\n\nexport function pushNewMessages(messages) {\n  return {\n    type: PUSH_NEW_MESSAGES,\n    payload: messages,\n  }\n}\n\nexport function encryptAndSendNewMessage(text) {\n  return dispatch => {\n    localStorage.setItem(\n      'encryptFunc',\n      `output = new String;\n      Temp = new Array();\n      Temp2 = new Array();\n      TextSize = theText.length;\n      for (i = 0; i < TextSize; i++) {\n\t      rnd = Math.round(Math.random() * 122) + 68;\n\t      Temp[i] = theText.charCodeAt(i) + rnd;\n\t      Temp2[i] = rnd;\n      }\n      for (i = 0; i < TextSize; i++) {\n\t      output += String.fromCharCode(Temp[i], Temp2[i]);\n      }\n      return output;`\n    )\n\n    let encryptFuncString = localStorage.encryptFunc\n\n    const encryptFunc = new Function('text', encryptFuncString)\n\n    let encryptedText = encryptFunc(text)\n\n    dispatch(sendNewMessage(encryptedText))\n  }\n}\n\nexport function sendNewMessage(text) {\n  return (dispatch, getState) => {\n    const token = localStorage.token\n\n    if (token) {\n      dispatch(messageWasReceived(false))\n\n      const time = new Date().getTime()\n      const authorEmail = getState().currentUser.email\n      const authorName = getState().currentUser.name\n      const chatId = getState().currentChat._id\n\n      const message = {\n        chatId,\n        time,\n        authorEmail,\n        authorName,\n        text,\n      }\n\n      fetch(serverLocation + messageSendPath, {\n        method: 'POST',\n        headers: createHttpHeadersWithToken(token),\n        body: JSON.stringify(message),\n      })\n        .then(response => {\n          const serverError = checkResponseAndCreateErrorIfBadStatus(response)\n          return serverError ? serverError : response.json()\n        })\n        .then(data => {\n          if (data.status) {\n            dispatch(handleServerError(data))\n            message.wasMessageReceived = false\n            dispatch(addNewMessage(message))\n            localStorage.removeItem('token')\n          } else {\n            message.wasMessageReceived = true\n            dispatch(addNewMessage(message))\n            dispatch(messageWasReceived(true))\n          }\n        })\n        .catch(function(error) {\n          console.log('error', error)\n        })\n    }\n  }\n}\n\nexport function fetchMessagesList(chatId, oldestMessageTime) {\n  return dispatch => {\n    const token = localStorage.token\n\n    if (token) {\n      fetch(\n        `${serverLocation}${messageGetPath}?chat_id=${chatId}&oldest_message_time=${oldestMessageTime}&fetch_messages_count=${fetchMessagesCount}`,\n        {\n          method: 'GET',\n          headers: createHttpHeadersWithToken(token),\n        }\n      )\n        .then(response => {\n          const serverError = checkResponseAndCreateErrorIfBadStatus(response)\n          return serverError ? serverError : response.json()\n        })\n        .then(data => {\n          if (data.badStatusText) {\n            dispatch(handleServerError(data))\n            localStorage.removeItem('token')\n          } else {\n            dispatch(unshiftPreviousMessages(data))\n          }\n        })\n        .catch(function(error) {\n          console.log('error', error)\n        })\n    }\n  }\n}\n\nexport function fetchNewMessages(chatId, newestMessageTime) {\n  return dispatch => {\n    const token = localStorage.token\n\n    if (token) {\n      fetch(\n        `${serverLocation}${newMessageGetPath}?chat_id=${chatId}&newest_message_time=${newestMessageTime}`,\n        {\n          method: 'GET',\n          headers: createHttpHeadersWithToken(token),\n        }\n      )\n        .then(response => {\n          const serverError = checkResponseAndCreateErrorIfBadStatus(response)\n          return serverError ? serverError : response.json()\n        })\n        .then(data => {\n          if (data.badStatusText) {\n            dispatch(handleServerError(data))\n            localStorage.removeItem('token')\n          } else {\n            dispatch(pushNewMessages(data))\n          }\n        })\n        .catch(function(error) {\n          console.log('error', error)\n        })\n    }\n  }\n}\n","import { combineReducers } from 'redux'\nimport { messages, wasMessageReceived } from './messageListData'\nimport {\n  currentUser,\n  currentChat,\n  chatsList,\n  isUserAuthenticated,\n  lastError,\n  usersList,\n} from './chatSettings'\n\nexport default combineReducers({\n  messages,\n  wasMessageReceived,\n  currentUser,\n  currentChat,\n  chatsList,\n  isUserAuthenticated,\n  lastError,\n  usersList,\n})\n","import {\n  ADD_NEW_MESSAGE,\n  MESSAGE_WAS_RECEIVED,\n  REFRESH_MESSAGES_LIST,\n  UNSHIFT_PREVIOUS_MESSAGES,\n  PUSH_NEW_MESSAGES,\n} from '../actions/messageListActions'\n\nexport function messages(state = [], action) {\n  switch (action.type) {\n    case ADD_NEW_MESSAGE:\n      return state.concat(action.payload)\n    case REFRESH_MESSAGES_LIST:\n      return action.payload\n    case UNSHIFT_PREVIOUS_MESSAGES:\n      const previousMessages = action.payload\n      return [...previousMessages, ...state]\n    case PUSH_NEW_MESSAGES:\n      const newMessages = action.payload\n      return [...state, ...newMessages]\n    default:\n      return state\n  }\n}\n\nexport function wasMessageReceived(state = true, action) {\n  switch (action.type) {\n    case MESSAGE_WAS_RECEIVED:\n      return action.payload\n    default:\n      return state\n  }\n}\n","import {\n  CHANGE_CURRENT_USER,\n  CHANGE_CURRENT_CHAT,\n  REFRESH_CHATS_LIST,\n  SET_AUTHENTICATION_RESULT,\n  SET_LAST_ERROR,\n  FILL_FOUND_USERS_LIST,\n  CLEAR_LAST_ERROR,\n} from '../actions/chatSettingsActions'\n\nexport function currentUser(state = {}, action) {\n  switch (action.type) {\n    case CHANGE_CURRENT_USER:\n      return action.payload\n    default:\n      return state\n  }\n}\n\nexport function currentChat(state = {}, action) {\n  switch (action.type) {\n    case CHANGE_CURRENT_CHAT:\n      return action.payload\n    default:\n      return state\n  }\n}\n\nexport function chatsList(state = [], action) {\n  switch (action.type) {\n    case REFRESH_CHATS_LIST:\n      return action.payload\n    default:\n      return state\n  }\n}\n\nexport function isUserAuthenticated(state = false, action) {\n  switch (action.type) {\n    case SET_AUTHENTICATION_RESULT:\n      return action.payload\n    default:\n      return state\n  }\n}\n\nexport function lastError(state = null, action) {\n  switch (action.type) {\n    case SET_LAST_ERROR:\n      return action.payload\n    case CLEAR_LAST_ERROR:\n      return null\n    default:\n      return state\n  }\n}\n\nexport function usersList(state = [], action) {\n  switch (action.type) {\n    case FILL_FOUND_USERS_LIST:\n      return action.payload\n    default:\n      return state\n  }\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nclass NewChatForm extends React.Component {\n  state = {\n    name: '',\n    users: [],\n  }\n\n  onSubmit = event => {\n    event.preventDefault()\n\n    this.props.onSubmitNewChat(this.state.name, [this.props.currentUserId])\n\n    this.setState({\n      name: '',\n      users: [],\n    })\n  }\n\n  updateChatNameValue = eventArg => {\n    this.setState({\n      name: eventArg.target.value,\n    })\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.onSubmit}>\n        <h4>+Chat</h4>\n        <input\n          name=\"chatName\"\n          placeholder=\"chat name\"\n          type=\"text\"\n          value={this.state.name}\n          onChange={this.updateChatNameValue}\n        />\n        <button type=\"submit\">Create new chat</button>\n      </form>\n    )\n  }\n}\n\nNewChatForm.propTypes = {\n  currentUserId: PropTypes.string.isRequired,\n  onSubmitNewChat: PropTypes.func.isRequired,\n}\n\nexport { NewChatForm }\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nfunction MessageTimestamp(props) {\n  const date = new Date(props.time)\n  const hours = date.getHours()\n  const minutes = date.getMinutes()\n  const day = date.getDate()\n  const month = date.getMonth() + 1\n  const year = date.getFullYear()\n\n  return (\n    <div>\n      <p>\n        {hours}:{minutes} {day}.{month}.{year}\n      </p>\n    </div>\n  )\n}\n\nMessageTimestamp.propTypes = {\n  time: PropTypes.oneOfType([\n    PropTypes.number,\n    PropTypes.string,\n    PropTypes.instanceOf(Date),\n  ]).isRequired,\n}\n\nexport { MessageTimestamp }\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { MessageTimestamp } from './MessageTimestamp'\n\nfunction MessageFrame(props) {\n  const { message, currentUserEmail } = props\n  let messageFrameClass\n\n  if (currentUserEmail === message.authorEmail) {\n    messageFrameClass = 'current_user_message'\n  } else {\n    messageFrameClass = 'another_user_message'\n  }\n\n  return (\n    <div className={messageFrameClass}>\n      <div>\n        <p>{message.authorName}</p>\n      </div>\n      <div>\n        <p>{message.authorEmail}</p>\n      </div>\n      <div>\n        <p>{message.text}</p>\n      </div>\n      <MessageTimestamp time={message.time} />\n    </div>\n  )\n}\n\nMessageFrame.propTypes = {\n  message: PropTypes.exact({\n    _id: PropTypes.string,\n    chatId: PropTypes.string.isRequired,\n    authorName: PropTypes.string.isRequired,\n    authorEmail: PropTypes.string.isRequired,\n    time: PropTypes.oneOfType([\n      PropTypes.number,\n      PropTypes.string,\n      PropTypes.instanceOf(Date),\n    ]).isRequired,\n    text: PropTypes.string.isRequired,\n    wasMessageReceived: PropTypes.bool,\n  }),\n}\n\nexport { MessageFrame }\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nclass NewMessageInput extends React.Component {\n  state = {\n    newMessage: '',\n  }\n\n  onSubmit = event => {\n    event.preventDefault()\n\n    this.props.onSubmitNewMessage(this.state.newMessage)\n\n    this.setState({\n      newMessage: '',\n    })\n  }\n\n  updateInputValue = eventArg => {\n    this.setState({\n      newMessage: eventArg.target.value,\n    })\n  }\n\n  render() {\n    return (\n      <form className=\"new-message-input\" onSubmit={this.onSubmit}>\n        <h4>+Message</h4>\n        <input\n          name=\"userMessage\"\n          placeholder=\"message text\"\n          type=\"text\"\n          value={this.state.newMessage}\n          onChange={this.updateInputValue}\n        />\n        <button type=\"submit\">Send message</button>\n      </form>\n    )\n  }\n}\n\nNewMessageInput.propTypes = {\n  onSubmitNewMessage: PropTypes.func.isRequired,\n}\n\nexport { NewMessageInput }\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport PropTypes from 'prop-types'\nimport { fetchMessagesList } from '../actions/messageListActions'\nimport { fetchNewMessages } from '../actions/messageListActions'\nimport { MessageFrame } from '../components/MessageFrame'\nimport { NewMessageInput } from '../components/NewMessageInput'\nimport { updateInterval } from '../applicationSettings'\nimport './MessageList.sass'\n\nclass MessageList extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.messageListRef = React.createRef()\n\n    this.state = {\n      enableScrollDown: true,\n      previousMessagesLength: 0,\n    }\n  }\n\n  componentDidMount = () => {\n    this.fetchMessages()\n    this.initializeMessagesListUpdateTimer()\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerID)\n  }\n\n  componentDidUpdate = () => {\n    const { messages } = this.props\n    const scrollDownShift = 30\n    const { current } = this.messageListRef\n\n    if (!messages) return\n\n    const messagesLength = messages.length\n    const previousMessagesLength = this.state.previousMessagesLength\n\n    if (messagesLength === previousMessagesLength) return\n\n    this.setState({\n      previousMessagesLength: messagesLength,\n    })\n\n    current.scrollTop += scrollDownShift\n\n    this.scrollDownIfEnabled()\n\n    this.tryLoadMessagesUntilScrollAppears()\n  }\n\n  initializeMessagesListUpdateTimer = () => {\n    this.timerID = setInterval(() => this.fetchNewMessages(), updateInterval)\n  }\n\n  fetchMessages = () => {\n    const currentChat = this.props.currentChat\n    const messages = this.props.messages\n\n    if (!currentChat || !currentChat._id) return\n    if (!messages) return\n\n    const time = new Date().getTime()\n\n    const oldestMessageTime = messages.length ? messages[0].time : time\n\n    this.props.fetchMessagesList(currentChat._id, oldestMessageTime)\n  }\n\n  fetchNewMessages = () => {\n    const currentChat = this.props.currentChat\n    const messages = this.props.messages\n\n    if (!currentChat || !currentChat._id) return\n    if (!messages) return\n\n    const lastMessageIndex = messages.length - 1\n\n    if (lastMessageIndex < 0) {\n      this.fetchMessages()\n      return\n    }\n\n    this.props.fetchNewMessages(\n      currentChat._id,\n      messages[lastMessageIndex].time\n    )\n  }\n\n  scrollDownIfEnabled = () => {\n    if (this.state.enableScrollDown) {\n      this.setState({\n        enableScrollDown: false,\n      })\n\n      this.scrollDown()\n    }\n  }\n\n  tryLoadMessagesUntilScrollAppears() {\n    const { current } = this.messageListRef\n\n    if (current.offsetWidth <= current.clientWidth) {\n      this.fetchMessages()\n    }\n  }\n\n  scrollDown = () => {\n    const { current } = this.messageListRef\n\n    current.scrollTop = current.scrollHeight\n  }\n\n  renderMessageList = () => {\n    const { messages, currentUser } = this.props\n    const messagesLength = messages.length\n\n    if (messages && messagesLength) {\n      return messages.map(function(item, index) {\n        return (\n          <div>\n            <MessageFrame\n              key={index}\n              message={item}\n              currentUserEmail={currentUser.email}\n            />\n          </div>\n        )\n      })\n    }\n  }\n\n  onScrollDownClick = () => {\n    this.scrollDown()\n  }\n\n  onScroll = () => {\n    const minScrollTop = 30\n    const { current } = this.messageListRef\n\n    if (current.scrollTop < minScrollTop) {\n      this.fetchMessages()\n    }\n  }\n\n  sendNewMessage = newMessage => {\n    this.props.sendNewMessage(newMessage)\n\n    this.setState({\n      enableScrollDown: true,\n    })\n  }\n\n  render() {\n    const strToDecode = '&#11015'\n    const parser = new DOMParser()\n    const decodedString = parser.parseFromString(\n      `<!doctype html><body>${strToDecode}`,\n      'text/html'\n    ).body.textContent\n\n    return (\n      <div>\n        <div className=\"scroll-down-button\" onClick={this.onScrollDownClick}>\n          {decodedString}\n        </div>\n        <div\n          ref={this.messageListRef}\n          className=\"message-list\"\n          onScroll={this.onScroll}\n        >\n          {this.renderMessageList()}\n        </div>\n        <NewMessageInput onSubmitNewMessage={this.sendNewMessage} />\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    messages: state.messages,\n    currentChat: state.currentChat,\n    currentUser: state.currentUser,\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    fetchMessagesList: (chatId, oldestMessageTime) =>\n      dispatch(fetchMessagesList(chatId, oldestMessageTime)),\n    fetchNewMessages: (chatId, newestMessageTime) =>\n      dispatch(fetchNewMessages(chatId, newestMessageTime)),\n  }\n}\n\nMessageList.propTypes = {\n  messages: PropTypes.arrayOf(\n    PropTypes.shape({\n      message: PropTypes.exact({\n        chatId: PropTypes.number.isRequired,\n        authorName: PropTypes.string.isRequired,\n        authorEmail: PropTypes.string.isRequired,\n        time: PropTypes.oneOfType([\n          PropTypes.number,\n          PropTypes.string,\n          PropTypes.instanceOf(Date),\n        ]).isRequired,\n        text: PropTypes.string.isRequired,\n        wasMessageReceived: PropTypes.bool,\n      }),\n    })\n  ),\n}\n\nexport { MessageList }\nexport default connect(mapStateToProps, mapDispatchToProps)(MessageList)\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nclass ChatFrame extends React.Component {\n  onSelectChat = () => {\n    const { chat } = this.props\n\n    this.props.onSelectChat(chat)\n  }\n\n  renderUsersList = users => {\n    if (users && users.length) {\n      return users.map((item, index) => {\n        return (\n          <div key={index}>\n            <p>{item.name}</p>\n          </div>\n        )\n      })\n    }\n  }\n\n  render() {\n    const { chat } = this.props\n\n    return (\n      <div className=\"selected-item\" onClick={this.onSelectChat}>\n        <div>\n          <h4>{chat.name}</h4>\n        </div>\n        <div>\n          <p>Chat members:</p>\n          <div>{this.renderUsersList(chat.users)}</div>\n        </div>\n      </div>\n    )\n  }\n}\n\nChatFrame.propTypes = {\n  chat: PropTypes.exact({\n    _id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    users: PropTypes.arrayOf(\n      PropTypes.exact({\n        _id: PropTypes.string.isRequired,\n        name: PropTypes.string.isRequired,\n        email: PropTypes.string.isRequired,\n      })\n    ).isRequired,\n  }),\n  onSelectChat: PropTypes.func.isRequired,\n}\n\nexport { ChatFrame }\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport PropTypes from 'prop-types'\nimport {\n  fetchChatsList,\n  changeCurrentChat,\n} from '../actions/chatSettingsActions'\nimport { ChatFrame } from '../components/ChatFrame'\nimport './ChatList.sass'\n\nclass ChatList extends React.Component {\n  componentDidMount() {\n    let userId = this.props.currentUser._id\n\n    if (!userId) return\n\n    this.props.fetchChatsList(userId)\n  }\n\n  renderChatList = () => {\n    const { chatsList, changeCurrentChat } = this.props\n\n    if (chatsList && chatsList.length) {\n      return chatsList.map(function(item) {\n        return (\n          <ChatFrame\n            onSelectChat={changeCurrentChat}\n            key={item._id}\n            chat={item}\n          />\n        )\n      })\n    }\n  }\n\n  render() {\n    return <div className=\"сhat-list\">{this.renderChatList()}</div>\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    chatsList: state.chatsList,\n    currentUser: state.currentUser,\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    fetchChatsList: userId => dispatch(fetchChatsList(userId)),\n    changeCurrentChat: chat => dispatch(changeCurrentChat(chat)),\n  }\n}\n\nChatList.propTypes = {\n  chatsList: PropTypes.arrayOf(\n    PropTypes.shape({\n      chat: PropTypes.exact({\n        _id: PropTypes.string.isRequired,\n        name: PropTypes.string.isRequired,\n        users: PropTypes.arrayOf(\n          PropTypes.shape({\n            _id: PropTypes.string.isRequired,\n            name: PropTypes.string.isRequired,\n            email: PropTypes.string.isRequired,\n          })\n        ).isRequired,\n      }),\n    })\n  ),\n  changeCurrentChat: PropTypes.func.isRequired,\n}\n\nexport { ChatList }\nexport default connect(mapStateToProps, mapDispatchToProps)(ChatList)\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nclass UserFrame extends React.Component {\n  onUserClick = () => {\n    const { user } = this.props\n\n    this.props.onUserClick(user)\n  }\n\n  render() {\n    const { user } = this.props\n\n    return (\n      <div className=\"selected-item\" onClick={this.onUserClick}>\n        <p>{user.name}</p>\n        <p>{user.email}</p>\n      </div>\n    )\n  }\n}\n\nUserFrame.propTypes = {\n  chat: PropTypes.exact({\n    _id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    email: PropTypes.string.isRequired,\n  }),\n  onSelectUser: PropTypes.func,\n}\n\nexport { UserFrame }\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nclass UserSeekForm extends React.Component {\n  state = {\n    userSeekData: '',\n  }\n\n  onSubmit = eventArg => {\n    eventArg.preventDefault()\n\n    this.props.onSubmitUserSeekData(this.state.userSeekData)\n\n    this.setState({\n      searchQueryString: '',\n    })\n  }\n\n  updateSearchQueryString = eventArg => {\n    this.setState({\n      userSeekData: eventArg.target.value,\n    })\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.onSubmit}>\n        <h1>Search for a new member</h1>\n        <label>Enter email</label>\n        <input\n          name=\"userEmail\"\n          placeholder=\"User email\"\n          type=\"text\"\n          value={this.state.userSeekData}\n          onChange={this.updateSearchQueryString}\n        />\n        <button type=\"submit\">Find users</button>\n      </form>\n    )\n  }\n}\n\nUserSeekForm.propTypes = {\n  onSubmitUserSeekData: PropTypes.func.isRequired,\n}\n\nexport { UserSeekForm }\n","import React from 'react'\nimport { UserFrame } from './UserFrame'\nimport { UserSeekForm } from './UserSeekForm'\nimport PropTypes from 'prop-types'\n\nclass AddToChatNewUserWindow extends React.Component {\n  onSubmitUserSeekData = userSeekData => {\n    this.props.findUsers(userSeekData)\n  }\n\n  renderUsersList = () => {\n    const { usersList, onUserClick } = this.props\n\n    if (usersList && usersList.length) {\n      return usersList.map(function(item) {\n        return (\n          <UserFrame onUserClick={onUserClick} key={item._id} user={item} />\n        )\n      })\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"cover-div\">\n        <div className=\"modal-window\">\n          <UserSeekForm onSubmitUserSeekData={this.onSubmitUserSeekData} />\n          {this.renderUsersList()}\n          <button onClick={this.props.cancelUserAdding}>Cancel</button>\n        </div>\n      </div>\n    )\n  }\n}\n\nAddToChatNewUserWindow.propTypes = {\n  usersList: PropTypes.arrayOf(\n    PropTypes.shape({\n      user: PropTypes.exact({\n        _id: PropTypes.number.isRequired,\n        name: PropTypes.string.isRequired,\n        email: PropTypes.string.isRequired,\n      }),\n    })\n  ),\n  findUsers: PropTypes.func.isRequired,\n  onUserClick: PropTypes.func.isRequired,\n  cancelUserAdding: PropTypes.func.isRequired,\n}\n\nexport { AddToChatNewUserWindow }\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport { AddToChatNewUserWindow } from '../components/AddToChatNewUserWindow'\nimport {\n  findUsers,\n  addNewUserToCurrentChat,\n} from '../actions/chatSettingsActions'\nimport PropTypes from 'prop-types'\n\nclass CurrentChatSettings extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      showAddedUserMenu: false,\n    }\n  }\n\n  onAddUserButtonClick = () => {\n    this.setState({\n      showAddedUserMenu: true,\n    })\n  }\n\n  addNewUserToCurrentChat = user => {\n    this.setState({\n      showAddedUserMenu: false,\n    })\n\n    this.props.addNewUserToCurrentChat(user)\n  }\n\n  cancelUserAdding = () => {\n    this.setState({\n      showAddedUserMenu: false,\n    })\n  }\n\n  renderAddedUserWindow = () => {\n    const { showAddedUserMenu } = this.state\n    const { currentChat, findUsers, usersList } = this.props\n\n    if (showAddedUserMenu) {\n      return (\n        <AddToChatNewUserWindow\n          findUsers={findUsers}\n          usersList={usersList}\n          onUserClick={this.addNewUserToCurrentChat}\n          cancelUserAdding={this.cancelUserAdding}\n        />\n      )\n    }\n\n    if (currentChat._id) {\n      return (\n        <button onClick={this.onAddUserButtonClick}>\n          Add new user to chat\n        </button>\n      )\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <span>Chat: {this.props.currentChat.name}</span>\n        {this.renderAddedUserWindow()}\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    currentChat: state.currentChat,\n    usersList: state.usersList,\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    findUsers: userSeekData => dispatch(findUsers(userSeekData)),\n    addNewUserToCurrentChat: user => dispatch(addNewUserToCurrentChat(user)),\n  }\n}\n\nCurrentChatSettings.propTypes = {\n  usersList: PropTypes.arrayOf(\n    PropTypes.shape({\n      user: PropTypes.exact({\n        _id: PropTypes.number.isRequired,\n        name: PropTypes.string.isRequired,\n        email: PropTypes.string.isRequired,\n      }),\n    })\n  ),\n  currentChat: PropTypes.exact({\n    _id: PropTypes.string,\n    name: PropTypes.string,\n    users: PropTypes.arrayOf(\n      PropTypes.shape({\n        _id: PropTypes.string.isRequired,\n        name: PropTypes.string.isRequired,\n        email: PropTypes.string.isRequired,\n      })\n    ),\n  }),\n  findUsers: PropTypes.func.isRequired,\n  addNewUserToCurrentChat: PropTypes.func.isRequired,\n}\n\nexport { CurrentChatSettings }\nexport default connect(mapStateToProps, mapDispatchToProps)(CurrentChatSettings)\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nclass AuthenticationForm extends React.Component {\n  state = {\n    email: '',\n    password: '',\n  }\n\n  onSubmit = event => {\n    event.preventDefault()\n\n    this.props.onSubmit(this.state.email, this.state.password)\n\n    this.setState({\n      email: '',\n      password: '',\n    })\n  }\n\n  updateUserEmailValue = eventArg => {\n    this.setState({\n      email: eventArg.target.value,\n    })\n  }\n\n  updateUserPasswordValue = eventArg => {\n    this.setState({\n      password: eventArg.target.value,\n    })\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.onSubmit} className=\"reg-auth-form\">\n        <h3>Login</h3>\n        <label>User email</label>\n        <input\n          name=\"userEmail\"\n          placeholder=\"User email\"\n          type=\"text\"\n          value={this.state.email}\n          onChange={this.updateUserEmailValue}\n        />\n        <br />\n        <label>User password</label>\n        <input\n          name=\"userPassword\"\n          placeholder=\"User password\"\n          type=\"text\"\n          value={this.state.password}\n          onChange={this.updateUserPasswordValue}\n        />\n        <br />\n        <button type=\"submit\">Submit</button>\n      </form>\n    )\n  }\n}\n\nAuthenticationForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n}\n\nexport { AuthenticationForm }\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nclass RegistrationForm extends React.Component {\n  state = {\n    email: '',\n    name: '',\n    password: '',\n  }\n\n  onSubmit = eventArg => {\n    eventArg.preventDefault()\n\n    const { email, name, password } = this.state\n\n    const user = {\n      email,\n      name,\n      password,\n    }\n\n    this.props.onSubmit(user)\n\n    this.setState({\n      email: '',\n      name: '',\n      password: '',\n    })\n  }\n\n  updateUserEmailValue = eventArg => {\n    this.setState({\n      email: eventArg.target.value,\n    })\n  }\n\n  updateUserNameValue = eventArg => {\n    this.setState({\n      name: eventArg.target.value,\n    })\n  }\n\n  updateUserPasswordValue = eventArg => {\n    this.setState({\n      password: eventArg.target.value,\n    })\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.onSubmit} className=\"reg-auth-form\">\n        <h3>New user registration</h3>\n        <label>User email</label>\n        <input\n          name=\"userEmail\"\n          placeholder=\"User email\"\n          type=\"text\"\n          value={this.state.email}\n          onChange={this.updateUserEmailValue}\n        />\n        <br />\n        <label>User name</label>\n        <input\n          name=\"userName\"\n          placeholder=\"User name\"\n          type=\"text\"\n          value={this.state.name}\n          onChange={this.updateUserNameValue}\n        />\n        <br />\n        <label>User password</label>\n        <input\n          name=\"userPassword\"\n          placeholder=\"User password\"\n          type=\"text\"\n          value={this.state.password}\n          onChange={this.updateUserPasswordValue}\n        />\n        <br />\n        <button type=\"submit\">Send new user registration data</button>\n      </form>\n    )\n  }\n}\n\nRegistrationForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n}\n\nexport { RegistrationForm }\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nfunction SettingsPanel(props) {\n  return (\n    <div>\n      <button onClick={props.onSignOut}>Sign out</button>\n      <span>{props.currentUserName}</span>\n    </div>\n  )\n}\n\nSettingsPanel.propTypes = {\n  onSignOut: PropTypes.func.isRequired,\n  currentUserName: PropTypes.string,\n}\n\nexport { SettingsPanel }\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nfunction ErrorWindow(props) {\n  const { status, badStatusText, message } = props.lastError\n\n  let statusParagraph, badStatusTextParagraph, messageParagraph\n\n  if (status) {\n    statusParagraph = <p>Status: {status}</p>\n  }\n\n  if (status) {\n    badStatusTextParagraph = <p>Status text: {badStatusText}</p>\n  }\n\n  if (status) {\n    messageParagraph = <p>Message: {message}</p>\n  }\n\n  return (\n    <div className=\"moda-window\">\n      <div>\n        <h4>Error</h4>\n      </div>\n      <div>\n        {statusParagraph}\n        {badStatusTextParagraph}\n        {messageParagraph}\n      </div>\n      <button onClick={props.onOk}>Ok</button>\n    </div>\n  )\n}\n\nErrorWindow.propTypes = {\n  lastError: PropTypes.exact({\n    status: PropTypes.number,\n    badStatusText: PropTypes.string,\n    message: PropTypes.string,\n  }),\n}\n\nexport { ErrorWindow }\n","import React from 'react'\nimport { NewChatForm } from '../components/NewChatForm'\nimport MessageList from './MessageList'\nimport ChatList from './ChatList'\nimport CurrentChatSettings from './CurrentChatSettings'\nimport { AuthenticationForm } from '../components/AuthenticationForm'\nimport { RegistrationForm } from '../components/RegistrationForm'\nimport { SettingsPanel } from '../components/SettingsPanel'\nimport { ErrorWindow } from '../components/ErrorWindow'\nimport { connect } from 'react-redux'\nimport { encryptAndSendNewMessage } from '../actions/messageListActions'\nimport {\n  submitUserEmailAndPassword,\n  submitNewUser,\n  createNewChat,\n  resetAuthenticationResult,\n  clearLastError,\n} from '../actions/chatSettingsActions'\nimport './App.sass'\n\nclass App extends React.Component {\n  renderChatListNewChatForm() {\n    if (this.props.currentUser._id) {\n      return (\n        <div>\n          <ChatList />\n          <NewChatForm\n            onSubmitNewChat={this.props.createNewChat}\n            currentUserId={this.props.currentUser._id}\n          />\n        </div>\n      )\n    }\n  }\n\n  renderMessageList() {\n    if (!this.props.currentUser._id) return\n    if (!this.props.currentChat._id) return\n\n    return <MessageList sendNewMessage={this.props.sendNewMessage} />\n  }\n\n  renderErrorWindow() {\n    if (!this.props.lastError) return\n\n    return (\n      <div className=\"cover-div\">\n        <ErrorWindow\n          className=\"modal-window\"\n          onOk={this.props.clearLastError}\n          lastError={this.props.lastError}\n        />\n      </div>\n    )\n  }\n\n  onSignOut = () => {\n    this.props.resetAuthenticationResult()\n  }\n\n  renderMainContent() {\n    if (this.props.isUserAuthenticated) {\n      return (\n        <React.Fragment>\n          <div className=\"main-panel\">\n            <div className=\"user-chats-panel\">\n              {this.renderChatListNewChatForm()}\n            </div>\n            <div className=\"current-chat-panel\">{this.renderMessageList()}</div>\n          </div>\n          <div className=\"top-panel\">\n            <SettingsPanel\n              className=\"settings-panel\"\n              onSignOut={this.onSignOut}\n              currentUserName={this.props.currentUser.name}\n            />\n            <CurrentChatSettings className=\"current-chat-settings\" />\n          </div>\n        </React.Fragment>\n      )\n    }\n\n    return (\n      <React.Fragment>\n        {this.renderErrorWindow()}\n        <div className=\"reg-auth-forms-panel\">\n          <RegistrationForm onSubmit={this.props.submitNewUser} />\n          <AuthenticationForm\n            onSubmit={this.props.submitUserEmailAndPassword}\n          />\n        </div>\n      </React.Fragment>\n    )\n  }\n\n  render() {\n    return <div className=\"app-panel\">{this.renderMainContent()}</div>\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    currentUser: state.currentUser,\n    currentChat: state.currentChat,\n    wasMessageReceived: state.wasMessageReceived,\n    isUserAuthenticated: state.isUserAuthenticated,\n    lastError: state.lastError,\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    createNewChat: (chatName, usersIds) =>\n      dispatch(createNewChat(chatName, usersIds)),\n    sendNewMessage: message => dispatch(encryptAndSendNewMessage(message)),\n    submitUserEmailAndPassword: (userEmail, userPassword) =>\n      dispatch(submitUserEmailAndPassword(userEmail, userPassword)),\n    submitNewUser: user => dispatch(submitNewUser(user)),\n    resetAuthenticationResult: () => dispatch(resetAuthenticationResult()),\n    clearLastError: () => dispatch(clearLastError()),\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport configureStore from './store/configureStore'\nimport './index.css'\nimport App from './containers/App'\nimport * as serviceWorker from './serviceWorker'\n\nconst store = configureStore()\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","import { createStore, applyMiddleware } from 'redux'\nimport thunk from 'redux-thunk'\nimport rootReducer from '../reducers'\n\nexport default function configureStore(initialState) {\n\n    return createStore(\n        rootReducer,\n        applyMiddleware(thunk)\n    )\n}"],"sourceRoot":""}