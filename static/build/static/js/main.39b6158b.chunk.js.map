{"version":3,"sources":["applicationSettings.js","actions/helper.js","actions/chatSettingsActions.js","actions/messageListActions.js","reducers/index.js","reducers/messageListData.js","reducers/chatSettings.js","components/NewChatForm.js","components/MessageTimestamp.js","components/MessageFrame.js","components/NewMessageInput.js","containers/MessageList.js","components/ChatFrame.js","containers/ChatList.js","components/UserFrame.js","components/UserSeekForm.js","containers/CurrentChatSettings.js","components/AuthenticationForm.js","components/RegistrationForm.js","components/SettingsPanel.js","containers/App.js","serviceWorker.js","index.js","store/configureStore.js"],"names":["serverLocation","messageSendPath","messageGetPath","newMessageGetPath","submitNewChatPath","chatsListGetPath","submitUserEmailAndPasswordPath","submitNewUserPath","searchUsersPath","addNewUserToChatPath","fetchMessagesCount","updateInterval","httpHeadersWithoutToken","createHttpHeadersWithToken","token","checkResponseAndCreateErrorIfBadStatus","response","ok","status","badStatusText","statusText","message","CHANGE_CURRENT_USER","CHANGE_CURRENT_CHAT","REFRESH_CHATS_LIST","SET_AUTHENTICATION_RESULT","SET_LAST_ERROR","FILL_FOUND_USERS_LIST","changeCurrentUser","user","type","payload","changeCurrentChat","chat","setAuthenticationResult","result","handleServerError","serverErrorData","dispatch","resetAuthenticationResult","setLastError","localStorage","removeItem","fetchChatsList","userId","fetch","method","headers","then","serverError","json","data","catch","error","console","log","findUsers","userSeekData","ADD_NEW_MESSAGE","MESSAGE_WAS_RECEIVED","REFRESH_MESSAGES_LIST","UNSHIFT_PREVIOUS_MESSAGES","PUSH_NEW_MESSAGES","addNewMessage","messageWasReceived","bool","fetchMessagesList","chatId","oldestMessageTime","fetchNewMessages","newestMessageTime","combineReducers","messages","state","action","concat","previousMessages","newMessages","wasMessageReceived","currentUser","currentChat","chatsList","isUserAuthenticated","lastError","usersList","NewChatForm","name","users","onSubmit","event","preventDefault","props","onSubmitNewChat","currentUserId","setState","updateChatNameValue","eventArg","target","value","this","placeholder","onChange","React","Component","MessageTimestamp","date","Date","time","hours","getHours","minutes","getMinutes","day","getDate","month","getMonth","year","getFullYear","MessageFrame","authorName","authorEmail","text","NewMessageInput","newMessage","onSubmitNewMessage","updateInputValue","MessageList","componentDidMount","fetchMessages","initializeMessagesListUpdateTimer","componentDidUpdate","messagesLength","length","previousMessagesLength","messageListRef","current","scrollTop","scrollDownIfEnabled","timerID","setInterval","_id","getTime","lastMessageIndex","enableScrollDown","scrollDown","scrollHeight","renderMessageList","map","item","index","key","onScrollDownClick","onScroll","sendNewMessage","createRef","clearInterval","onClick","ref","className","connect","ChatFrame","onSelectChat","renderUsersList","ChatList","renderChatList","UserFrame","onUserClick","email","UserSeekForm","onSubmitUserSeekData","searchQueryString","updateSearchQueryString","CurrentChatSettings","onAddUserButtonClick","showAddedUserMenu","addNewUserToCurrentChat","renderAddedUserMenu","div","getState","body","JSON","stringify","newUserId","AuthenticationForm","password","updateUserEmailValue","updateUserPasswordValue","RegistrationForm","updateUserNameValue","SettingsPanel","onSignOut","App","createNewChat","renderChatListNewChatForm","submitNewUser","submitUserEmailAndPassword","renderMainContent","chatName","usersIds","newChatData","userEmail","userPassword","userAuthenticationData","setItem","Boolean","window","location","hostname","match","store","createStore","rootReducer","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.39b6158b.chunk.js","sourcesContent":["export const serverLocation = 'http://localhost:4000/'\n\nexport const messageSendPath = 'messages/new/'\nexport const messageGetPath = 'messages/listRequest/'\nexport const newMessageGetPath = 'messages/lastMessages/'\nexport const submitNewChatPath = 'chats/new/'\nexport const chatsListGetPath = 'chats/listRequest/'\nexport const submitUserEmailAndPasswordPath = 'users/login/'\nexport const submitNewUserPath = 'users/new/'\nexport const searchUsersPath = 'users/search/'\nexport const addNewUserToChatPath = 'chats/addNewUser/'\n\nexport const fetchMessagesCount = 3\nexport const updateInterval = 10000","export const httpHeadersWithoutToken = {\n    'Accept': 'application/json',\n    'Content-Type': 'application/json',\n}\n\nexport function createHttpHeadersWithToken(token) {\n    return {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`,\n    }\n}\n\nexport function checkResponseAndCreateErrorIfBadStatus(response) {\n\n    if (response.ok) return\n\n    const { status, statusText, message } = response\n\n    return {\n        status,\n        badStatusText: statusText,\n        message\n    }\n}\n\n// localStorage.removeItem('token')","import { serverLocation,\n         submitNewChatPath,\n         chatsListGetPath,\n         submitUserEmailAndPasswordPath,\n         submitNewUserPath,\n         searchUsersPath,\n         addNewUserToChatPath, } from '../applicationSettings'\n\nimport { createHttpHeadersWithToken, httpHeadersWithoutToken, checkResponseAndCreateErrorIfBadStatus } from './helper'\n\nexport const CHANGE_CURRENT_USER = 'CHANGE_CURRENT_USER'\nexport const CHANGE_CURRENT_CHAT = 'CHANGE_CURRENT_CHAT'\nexport const REFRESH_CHATS_LIST = 'REFRESH_CHATS_LIST'\nexport const SET_AUTHENTICATION_RESULT = 'SET_AUTHENTICATION_RESULT'\nexport const SET_LAST_ERROR = 'SET_LAST_ERROR'\nexport const FILL_FOUND_USERS_LIST = 'FILL_FOUND_USERS_LIST'\n\nexport function changeCurrentUser(user) {\n    return {\n        type: CHANGE_CURRENT_USER,\n        payload: user\n    }\n}\n\nexport function changeCurrentChat(chat) {\n    return {\n        type: CHANGE_CURRENT_CHAT,\n        payload: chat\n    }\n}\n\nexport function refreshChatsList(chats) {\n    return {\n        type: REFRESH_CHATS_LIST,\n        payload: chats,\n    }\n}\n\nexport function setAuthenticationResult(result) {\n    return {\n        type: SET_AUTHENTICATION_RESULT,\n        payload: result,\n    }\n}\n\nexport function handleServerError(serverErrorData) {\n    return (dispatch) => {\n        if (serverErrorData.status === 401) {\n            dispatch(resetAuthenticationResult())\n        }\n\n        dispatch(setLastError(serverErrorData))\n    }\n}\n\nexport function setLastError(serverErrorData) {\n    return {\n        type: SET_LAST_ERROR,\n        payload: serverErrorData\n    }\n}\n\nexport function fillFoundUsersList(usersList) {\n    return {\n        type: FILL_FOUND_USERS_LIST,\n        payload: usersList,\n    }\n}\n\nexport function resetAuthenticationResult() {\n    return (dispatch) => {\n        localStorage.removeItem('token')\n        dispatch(setAuthenticationResult(false))\n    }\n}\n\nexport function createNewChat(name, users) {\n    return (dispatch, getState) => {\n\n        const { token } = localStorage\n\n        if(token) {\n            const newChatData = {\n                chat: {\n                    name,\n                    users,\n                }\n            }\n    \n            fetch(serverLocation + submitNewChatPath, {\n                method: 'POST',\n                headers: createHttpHeadersWithToken(token),\n                body: JSON.stringify(\n                    newChatData\n                )\n            })\n                .then((response) => {\n                    const serverError = checkResponseAndCreateErrorIfBadStatus(response)\n                    return serverError ? serverError : response.json()\n                })\n                .then((data) => {\n    \n                    if (data.status) {\n                        dispatch(handleServerError(data))\n                    } else {\n                        const { _id, name, users } = data.chat\n                        const { currentUser } = getState()\n    \n                        dispatch(changeCurrentChat(_id, name, users))\n                        dispatch(fetchChatsList(currentUser._id))\n                    }\n                })\n                .catch(function (error) {\n                    console.log('error', error)\n                })\n        }\n    }\n}\n\nexport function fetchChatsList(userId) {\n    return (dispatch) => {\n\n        const { token } = localStorage\n\n        if(token) {\n            fetch(`${serverLocation}${chatsListGetPath}?user_id=${userId}`, {\n                method: 'GET',\n                headers: createHttpHeadersWithToken(token),\n            })\n                .then(response => {\n                    const serverError = checkResponseAndCreateErrorIfBadStatus(response)\n                    return serverError ? serverError : response.json()\n                })\n                .then((data) => {\n                    if (data.message) {\n                        dispatch(handleServerError(data))\n\n                        localStorage.removeItem('token')\n                    } else {\n                        dispatch(refreshChatsList(data))\n                    }\n                })\n                .catch(function (error) {\n                    console.log('error', error)\n                })\n        }\n    }\n}\n\nexport function submitUserEmailAndPassword(email, password) {\n    return (dispatch) => {\n\n        const userAuthenticationData = {\n            user: {\n                email,\n                name: '',\n                password,\n            }\n        }\n\n        fetch(serverLocation + submitUserEmailAndPasswordPath, {\n            method: 'POST',\n            headers: httpHeadersWithoutToken,\n            body: JSON.stringify(\n                userAuthenticationData\n            )\n        })\n            .then((response) => {\n                const serverError = checkResponseAndCreateErrorIfBadStatus(response)\n                return serverError ? serverError : response.json()\n            })\n            .then((data) => {\n\n                if (data.message) {\n                    dispatch(handleServerError(data))\n                    dispatch(setAuthenticationResult(false))\n                } else {\n                    const { _id, token } = data.user\n\n                    localStorage.setItem('token', token)\n\n                    dispatch(changeCurrentUser(data.user))\n                    dispatch(setAuthenticationResult(true))\n                    dispatch(fetchChatsList(_id))\n                }\n            })\n            .catch(function (error) {\n                console.log('error', error)\n            })\n    }\n}\n\nexport function submitNewUser(user) {\n    return (dispatch) => {\n\n        fetch(serverLocation + submitNewUserPath, {\n            method: 'POST',\n            headers: httpHeadersWithoutToken,\n            body: JSON.stringify({ user })\n        })\n            .then((response) => {\n                const serverError = checkResponseAndCreateErrorIfBadStatus(response)\n                return serverError ? serverError : response.json()\n            })\n            .then((data) => {\n\n                if (data.message) {\n                    dispatch(handleServerError(data))\n                    dispatch(setAuthenticationResult(false))\n                } else {\n                    const { _id, token } = data.user\n\n                    localStorage.setItem('token', token)\n\n                    dispatch(changeCurrentUser(data.user))\n                    dispatch(changeCurrentChat({}))\n                    dispatch(setAuthenticationResult(true))\n                    dispatch(fetchChatsList(_id))\n                }\n            })\n            .catch(function (error) {\n                console.log('error', error)\n            })\n    }\n}\n\nexport function findUsers(userSeekData) {\n    return (dispatch) => {\n        const { token } = localStorage\n\n        if(token) {\n            fetch(`${serverLocation}${searchUsersPath}?user_seek_data=${userSeekData}`, {\n                method: 'GET',\n                headers: createHttpHeadersWithToken(token),\n            })\n                .then(response => {\n                    const serverError = checkResponseAndCreateErrorIfBadStatus(response)\n                    return serverError ? serverError : response.json()\n                })\n                .then((data) => {\n                    if (data.message) {\n                        dispatch(handleServerError(data))\n\n                        localStorage.removeItem('token')\n                    } else {\n                        dispatch(fillFoundUsersList(data))\n                    }\n                })\n                .catch(function (error) {\n                    console.log('error', error)\n                })\n        }\n    }\n}\n\nexport function addNewUserToCurrentChat(user) {\n    return (dispatch, getState) => {\n        const { token } = localStorage\n        if(token) {\n            const { currentChat } = getState()\n    \n            fetch(serverLocation + addNewUserToChatPath, {\n                method: 'POST',\n                headers: createHttpHeadersWithToken(token),\n                body: JSON.stringify({\n                        chatId: currentChat._id,\n                        newUserId: user._id,\n                    }\n                )\n            })\n                .then((response) => {\n                    const serverError = checkResponseAndCreateErrorIfBadStatus(response)\n                    return serverError ? serverError : response.json()\n                })\n                .then((data) => {\n    \n                    if (data.message) {\n                        dispatch(handleServerError(data))\n                    } else {\n                        const { _id, name, users } = data.chat\n    \n                        dispatch(changeCurrentChat(_id, name, users))\n                    }\n                })\n                .catch(function (error) {\n                    console.log('error', error)\n                })\n        }\n    }\n}\n","import { serverLocation, messageSendPath, messageGetPath, newMessageGetPath, fetchMessagesCount } from '../applicationSettings'\n\nimport { handleServerError } from './chatSettingsActions'\n\nimport { createHttpHeadersWithToken, checkResponseAndCreateErrorIfBadStatus } from './helper'\n\nexport const ADD_NEW_MESSAGE = 'ADD_NEW_MESSAGE'\nexport const MESSAGE_WAS_RECEIVED = 'MESSAGE_WAS_RECEIVED'\nexport const REFRESH_MESSAGES_LIST = 'REFRESH_MESSAGES_LIST'\nexport const UNSHIFT_PREVIOUS_MESSAGES = 'UNSHIFT_PREVIOUS_MESSAGES'\nexport const PUSH_NEW_MESSAGES = 'PUSH_NEW_MESSAGES'\n\nexport function addNewMessage(message) {\n    return {\n        type: ADD_NEW_MESSAGE,\n        payload: message,\n    }\n}\n\nexport function messageWasReceived(bool) {\n    return {\n        type: MESSAGE_WAS_RECEIVED,\n        payload: bool,\n    };\n}\n\nexport function refreshMessagesList(messages) {\n    return {\n        type: REFRESH_MESSAGES_LIST,\n        payload: messages,\n    }\n}\n\nexport function unshiftPreviousMessages(messages) {\n    return {\n        type: UNSHIFT_PREVIOUS_MESSAGES,\n        payload: messages,\n    }\n}\n\nexport function pushNewMessages(messages) {\n    return {\n        type: PUSH_NEW_MESSAGES,\n        payload: messages,\n    }\n}\n\nexport function sendNewMessage(text) {\n    return (dispatch, getState) => {\n\n        const token = localStorage.token\n\n        if(token){\n            dispatch(messageWasReceived(false))\n\n            const time = (new Date()).getTime();\n            const authorEmail = getState().currentUser.email\n            const authorName = getState().currentUser.name\n            const chatId = getState().currentChat._id\n    \n            const message = {\n                chatId,\n                time,\n                authorEmail,\n                authorName,\n                text,\n            }\n    \n            fetch(serverLocation + messageSendPath, {\n                method: 'POST',\n                headers: createHttpHeadersWithToken(token),\n                body: JSON.stringify(\n                    message\n                )\n            })\n                .then((response) => {\n                    const serverError = checkResponseAndCreateErrorIfBadStatus(response)\n                    return serverError ? serverError : response.json()\n                })\n                .then((data) => {\n                    \n                    if (data.status) {\n                        dispatch(handleServerError(data))\n                        message.wasMessageReceived = false\n                        dispatch(addNewMessage(message))\n                        localStorage.removeItem('token')\n                    } else {\n                        message.wasMessageReceived = true\n                        dispatch(addNewMessage(message))\n                        dispatch(messageWasReceived(true));\n                    }\n                })\n                .catch(function (error) {\n                    console.log('error', error)\n                })\n        }\n    };\n}\n\nexport function fetchMessagesList(chatId, oldestMessageTime) {\n    return (dispatch) => {\n\n        const token = localStorage.token\n\n        if(token){\n            fetch(`${serverLocation}${messageGetPath}?chat_id=${chatId}&oldest_message_time=${oldestMessageTime}&fetch_messages_count=${fetchMessagesCount}`, {\n                method: 'GET',\n                headers: createHttpHeadersWithToken(token),\n            })\n                .then(response => {\n                    const serverError = checkResponseAndCreateErrorIfBadStatus(response)\n                    return serverError ? serverError : response.json()\n                })\n                .then((data) => {\n\n                    if (data.message) {\n                        dispatch(handleServerError(data))\n                        localStorage.removeItem('token')\n                    } else {\n                        dispatch(unshiftPreviousMessages(data))\n                    }\n                })\n                .catch(function (error) {\n                    console.log('error', error)\n                })\n        }\n    }\n}\n\nexport function fetchNewMessages(chatId, newestMessageTime) {\n    return (dispatch) => {\n\n        const token = localStorage.token\n\n        if(token){\n            fetch(`${serverLocation}${newMessageGetPath}?chat_id=${chatId}&newest_message_time=${newestMessageTime}`, {\n                method: 'GET',\n                headers: createHttpHeadersWithToken(token),\n            })\n                .then(response => {\n                    const serverError = checkResponseAndCreateErrorIfBadStatus(response)\n                    return serverError ? serverError : response.json()\n                })\n                .then((data) => {\n\n                    if (data.message) {\n                        dispatch(handleServerError(data))\n                        localStorage.removeItem('token')\n                    } else {\n                        dispatch(pushNewMessages(data))\n                    }\n                })\n                .catch(function (error) {\n                    console.log('error', error)\n                })\n        }\n    }\n}","import { combineReducers } from 'redux'\nimport { messages, wasMessageReceived } from './messageListData'\nimport { currentUser, currentChat, chatsList, isUserAuthenticated, lastError, usersList } from './chatSettings'\n\nexport default combineReducers({\n    messages,\n    wasMessageReceived,\n    currentUser,\n    currentChat,\n    chatsList,\n    isUserAuthenticated,\n    lastError,\n    usersList,\n})","import { ADD_NEW_MESSAGE,\n         MESSAGE_WAS_RECEIVED,\n         REFRESH_MESSAGES_LIST,\n         UNSHIFT_PREVIOUS_MESSAGES,\n         PUSH_NEW_MESSAGES, } from '../actions/messageListActions'\n\nexport function messages(state = [], action) {\n    switch (action.type) {\n        case ADD_NEW_MESSAGE:\n            return state.concat(action.payload)\n        case REFRESH_MESSAGES_LIST:\n            return action.payload\n        case UNSHIFT_PREVIOUS_MESSAGES:\n            const previousMessages = action.payload\n            return [...previousMessages, ...state]\n        case PUSH_NEW_MESSAGES:\n            const newMessages = action.payload\n            return [...state, ...newMessages]\n        default:\n            return state\n    }\n}\n\nexport function wasMessageReceived(state = true, action) {\n    switch (action.type) {\n        case MESSAGE_WAS_RECEIVED:\n            return action.payload\n        default:\n            return state\n    }\n}","import { \n    CHANGE_CURRENT_USER, \n    CHANGE_CURRENT_CHAT, \n    REFRESH_CHATS_LIST, \n    SET_AUTHENTICATION_RESULT, \n    SET_LAST_ERROR,\n    FILL_FOUND_USERS_LIST,\n} from '../actions/chatSettingsActions'\n\nexport function currentUser(state = {}, action) {\n    switch (action.type) {\n        case CHANGE_CURRENT_USER:\n            return action.payload\n        default:\n            return state\n    }\n}\n\nexport function currentChat(state = {}, action) {\n    switch (action.type) {\n        case CHANGE_CURRENT_CHAT:\n            return action.payload\n        default:\n            return state\n    }\n}\n\nexport function chatsList(state = [], action) {\n    switch (action.type) {\n        case REFRESH_CHATS_LIST:\n            return action.payload\n        default:\n            return state\n    }\n}\n\nexport function isUserAuthenticated(state = false, action) {\n    switch (action.type) {\n        case SET_AUTHENTICATION_RESULT:\n            return action.payload\n        default:\n            return state\n    }\n}\n\nexport function lastError(state = {}, action) {\n    switch (action.type) {\n        case SET_LAST_ERROR:\n            return action.payload\n        default:\n            return state\n    }\n}\n\nexport function usersList(state = [], action) {\n     switch (action.type) {\n        case FILL_FOUND_USERS_LIST:\n            return action.payload\n        default:\n            return state\n    }\n}","import React from 'react'\nimport PropTypes from 'prop-types'\n\nclass NewChatForm extends React.Component {\n\n    state = {\n        name: '',\n        users: [],\n    }\n\n    onSubmit = (event) => {\n        event.preventDefault()\n\n        this.props.onSubmitNewChat(this.state.name, [this.props.currentUserId])\n\n        this.setState({\n            name: '',\n            users: [],\n        })\n    }\n\n    updateChatNameValue = (eventArg) => {\n        this.setState({\n            name: eventArg.target.value\n        })\n    }\n\n    render() {\n        return (\n            <form onSubmit = { this.onSubmit }>\n                <h1>Create new chat</h1>\n                <input\n                    name = 'chatName'\n                    placeholder = 'chat name'\n                    type = 'text'\n                    value = { this.state.name }\n                    onChange = { this.updateChatNameValue }\n                />\n                <button type = \"submit\">\n                    Create\n                </button>\n            </form>\n        )\n    }\n}\n\nNewChatForm.propTypes = {\n    currentUserId: PropTypes.string.isRequired,\n    onSubmitNewChat: PropTypes.func.isRequired,\n}\n\nexport { NewChatForm }","import React from 'react'\nimport PropTypes from 'prop-types'\n\nfunction MessageTimestamp(props) {\n\n    const date = new Date(props.time)\n    const hours = date.getHours()\n    const minutes = date.getMinutes()\n    const day = date.getDate()\n    const month = date.getMonth() + 1\n    const year = date.getFullYear()\n\n    return (\n        <div>\n            <p>{hours}:{minutes} {day}.{month}.{year}</p>\n        </div>\n    )\n}\n\nMessageTimestamp.propTypes = {\n    time: PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.instanceOf(Date)]).isRequired\n}\n\nexport { MessageTimestamp }","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { MessageTimestamp } from './MessageTimestamp'\n\nfunction MessageFrame(props) {\n\n    const { message } = props\n\n    return (\n        <div>\n            <div>\n                <p>{ message.authorName }</p>\n            </div>\n            <div>\n                <p>{ message.authorEmail }</p>\n            </div>\n            <div>\n                <p>{ message.text }</p>\n            </div>\n            <MessageTimestamp time = { message.time } />\n        </div>\n    )\n}\n\nMessageFrame.propTypes = {\n    message: PropTypes.exact({\n        _id: PropTypes.string,\n        chatId: PropTypes.string.isRequired,\n        authorName: PropTypes.string.isRequired,\n        authorEmail: PropTypes.string.isRequired,\n        time: PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.instanceOf(Date)]).isRequired,\n        text: PropTypes.string.isRequired,\n        wasMessageReceived: PropTypes.bool,\n    })\n}\n\nexport { MessageFrame }","import React from 'react'\nimport PropTypes from 'prop-types'\n\nclass NewMessageInput extends React.Component {\n\n    state = {\n        newMessage: ''\n    }\n\n    onSubmit = (event) => {\n        event.preventDefault()\n        \n        this.props.onSubmitNewMessage(this.state.newMessage)\n\n        this.setState({\n            newMessage: ''\n        })\n    }\n\n    updateInputValue = (eventArg) => {\n        this.setState({\n            newMessage: eventArg.target.value\n        })\n    }\n\n    render() {\n        return (\n            <form onSubmit = { this.onSubmit }>\n                <h1>Send new message</h1>\n                <input\n                    name = 'userMessage'\n                    placeholder = 'message text'\n                    type = 'text'\n                    value = { this.state.newMessage }\n                    onChange = { this.updateInputValue }\n                />\n                <button type = 'submit'>\n                    Send message\n                </button>\n            </form>\n        )\n    }\n}\n\nNewMessageInput.propTypes = {\n    onSubmitNewMessage: PropTypes.func.isRequired\n}\n\nexport { NewMessageInput }","import React from 'react'\nimport { connect } from 'react-redux'\nimport PropTypes from 'prop-types'\nimport { fetchMessagesList } from '../actions/messageListActions'\nimport { fetchNewMessages } from '../actions/messageListActions'\nimport { MessageFrame } from '../components/MessageFrame'\nimport { NewMessageInput } from '../components/NewMessageInput'\nimport { updateInterval } from '../applicationSettings'\nimport './MessageList.sass'\n\nclass MessageList extends React.Component {\n\n    constructor(props) {\n        super(props)\n        \n        this.messageListRef = React.createRef()\n\n        this.state = {\n            enableScrollDown: true,\n            previousMessagesLength: 0,\n        }\n    }\n\n    componentDidMount = () => {\n        this.fetchMessages()\n        this.initializeMessagesListUpdateTimer()\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.timerID)\n      }\n\n    componentDidUpdate = () => {\n        const { messages } = this.props;\n        const scrollDownShift = 30\n        \n        if (!messages) return\n        \n        const messagesLength = messages.length\n        const previousMessagesLength = this.state.previousMessagesLength\n        \n        if (messagesLength === previousMessagesLength) return\n\n        this.setState({\n            previousMessagesLength: messagesLength,\n        })\n\n        const { current } = this.messageListRef\n\n        current.scrollTop += scrollDownShift\n\n        this.scrollDownIfEnabled()\n    }\n\n    initializeMessagesListUpdateTimer = () => {\n        this.timerID = setInterval(() => this.fetchNewMessages(), updateInterval)\n    }\n    \n    fetchMessages = () => {\n        const currentChat = this.props.currentChat\n        const messages = this.props.messages\n\n        if(!currentChat || !currentChat._id) return\n        if(!messages) return\n\n        const time = (new Date()).getTime();\n\n        const oldestMessageTime = messages.length ? messages[0].time : time\n\n        this.props.fetchMessagesList(currentChat._id, oldestMessageTime)\n    }\n\n    fetchNewMessages = () => {\n        const currentChat = this.props.currentChat\n        const messages = this.props.messages\n\n        if(!currentChat || !currentChat._id) return\n        if(!messages) return\n\n        const lastMessageIndex = messages.length - 1\n\n        if (lastMessageIndex < 0) {\n            this.fetchMessages()\n            return\n        }\n\n        this.props.fetchNewMessages(currentChat._id, messages[lastMessageIndex].time)\n    }\n\n    scrollDownIfEnabled = () => {\n        if (this.state.enableScrollDown) {\n\n            this.setState({\n                enableScrollDown: false,\n            })\n\n            this.scrollDown()\n        }\n    }\n\n    scrollDown = () => {\n        const { current } = this.messageListRef\n\n        current.scrollTop = current.scrollHeight\n    }\n\n    renderMessageList = () => {\n        const { messages } = this.props;\n        const messagesLength = messages.length\n\n        if (messages && messagesLength) {\n            return messages.map(function (item, index) {\n                return (\n                    <MessageFrame key = { index } message = { item } />\n                    )\n                })\n        }\n    }\n\n    onScrollDownClick = () => {\n        this.scrollDown()\n    }\n\n    onScroll = () => {\n        const minScrollTop = 30\n        const { current } = this.messageListRef\n\n        if (current.scrollTop < minScrollTop) {\n            this.fetchMessages()\n        }\n    }\n\n    sendNewMessage = (newMessage) => {\n        this.props.sendNewMessage(newMessage)\n        \n        this.setState({\n            enableScrollDown: true,\n        })\n    }\n\n    render() {\n        return (\n            <div>\n                <button onClick = { this.onScrollDownClick}>\n                    Scroll down\n                </button>\n                <div ref = { this.messageListRef } className=\"messageList\" onScroll = { this.onScroll }>\n                    {this.renderMessageList()}\n                </div>\n                <NewMessageInput\n                    onSubmitNewMessage = { this.sendNewMessage }\n                />\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        messages: state.messages,\n        currentChat: state.currentChat,\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        fetchMessagesList: (chatId, oldestMessageTime) => dispatch(fetchMessagesList(chatId, oldestMessageTime)),\n        fetchNewMessages: (chatId, newestMessageTime) => dispatch(fetchNewMessages(chatId, newestMessageTime)),\n    }\n}\n\nMessageList.propTypes = {\n    messages: PropTypes.arrayOf(PropTypes.shape({\n        message: PropTypes.exact({\n            chatId: PropTypes.number.isRequired,\n            authorName: PropTypes.string.isRequired,\n            authorEmail: PropTypes.string.isRequired,\n            time: PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.instanceOf(Date)]).isRequired,\n            text: PropTypes.string.isRequired,\n            wasMessageReceived: PropTypes.bool,\n        })\n    }))\n}\n\nexport { MessageList }\nexport default connect(mapStateToProps, mapDispatchToProps)(MessageList);","import React from 'react'\nimport PropTypes from 'prop-types'\n\nclass ChatFrame extends React.Component {\n\n    onSelectChat = () => {\n        \n        const { chat } = this.props\n        \n        this.props.onSelectChat(chat)\n    }\n\n    renderUsersList = (users) => {\n        \n        if (users && users.length) {\n\n            return users.map((item, index) => {\n                return (\n                    <div key = { index }>\n                        <p>{ item.name }</p>\n                    </div>  \n                )\n            })\n        }\n    }\n\n    render() {\n        const { chat } = this.props\n\n        return (\n            <div className = \"selectedItem\" onClick = { this.onSelectChat }>\n                <div>\n                    <p>{ chat.name }</p>\n                </div>\n                <div>\n                    <h3>Chat users:</h3><br />\n                        <div>\n                            { this.renderUsersList(chat.users) }\n                        </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nChatFrame.propTypes = {\n    chat: PropTypes.exact({\n        _id: PropTypes.string.isRequired,\n        name: PropTypes.string.isRequired,\n        users: PropTypes.arrayOf(PropTypes.exact({\n            _id: PropTypes.string.isRequired,\n            name: PropTypes.string.isRequired,\n            email: PropTypes.string.isRequired,\n        })).isRequired,\n    }),\n    onSelectChat: PropTypes.func.isRequired,\n}\n\nexport { ChatFrame }","import React from 'react'\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types'\nimport { fetchChatsList, changeCurrentChat } from '../actions/chatSettingsActions';\nimport { ChatFrame } from '../components/ChatFrame'\n\nclass ChatList extends React.Component {\n\n    componentDidMount() {\n\n        let userId = this.props.currentUser._id\n\n        if (!userId) return\n\n        this.props.fetchChatsList(userId)\n    }\n\n    renderChatList = () => {\n        const { chatsList, changeCurrentChat } = this.props;\n\n        if (chatsList && chatsList.length) {\n            return chatsList.map(function (item) {\n                return (\n                    <ChatFrame onSelectChat = { changeCurrentChat } key = { item._id } chat = { item } />\n                )\n            })\n        }\n    }\n\n    render() {\n        return (\n            <div className = \"сhatList\">\n                {this.renderChatList()}\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        chatsList: state.chatsList,\n        currentUser: state.currentUser,\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        fetchChatsList: (userId) => dispatch(fetchChatsList(userId)),\n        changeCurrentChat: (chat) => dispatch(changeCurrentChat(chat)),\n    }\n}\n\nChatList.propTypes = {\n    chatsList: PropTypes.arrayOf(PropTypes.shape({\n        chat: PropTypes.exact({\n            _id: PropTypes.string.isRequired,\n            name: PropTypes.string.isRequired,\n            users: PropTypes.arrayOf(PropTypes.shape({\n                _id: PropTypes.string.isRequired,\n                name: PropTypes.string.isRequired,\n                email: PropTypes.string.isRequired,\n            })).isRequired,\n        })\n    })),\n    changeCurrentChat: PropTypes.func.isRequired,\n}\n\nexport { ChatList }\nexport default connect(mapStateToProps, mapDispatchToProps)(ChatList);","import React from 'react'\nimport PropTypes from 'prop-types'\n\nclass UserFrame extends React.Component {\n\n    onUserClick = () => {\n        \n        const { user } = this.props\n        \n        this.props.onUserClick(user)\n    }\n\n    render() {\n        const { user } = this.props\n\n        return (\n            <div className = \"selectedItem\" onClick = { this.onUserClick }>\n                <p>{user.name}</p>\n                <p>{user.email}</p>\n            </div>\n        )\n    }\n}\n\nUserFrame.propTypes = {\n    chat: PropTypes.exact({\n        _id: PropTypes.string.isRequired,\n        name: PropTypes.string.isRequired,\n        email: PropTypes.string.isRequired,\n    }),\n    onSelectUser: PropTypes.func.isRequired,\n}\n\nexport { UserFrame }","import React from 'react'\nimport PropTypes from 'prop-types'\n\nclass UserSeekForm extends React.Component {\n\n    state = {\n        userSeekData: '',\n    }\n\n    onSubmit = (eventArg) => {\n        eventArg.preventDefault()\n\n        this.props.onSubmitUserSeekData(this.state.userSeekData)\n\n        this.setState({\n            searchQueryString: '',\n        })\n    }\n\n    updateSearchQueryString = (eventArg) => {\n        this.setState({\n            userSeekData: eventArg.target.value\n        })\n    }\n\n    render() {\n        return (\n            <form onSubmit = { this.onSubmit }>\n                <h1>Search for a new member</h1>\n                <label>Enter email</label>\n                <input\n                    name = \"userEmail\"\n                    placeholder = 'User email'\n                    type = 'text'\n                    value = { this.state.userSeekData }\n                    onChange = { this.updateSearchQueryString }\n                /><br />\n                <button type = 'submit'>\n                    Find users\n                </button>\n            </form>\n        )\n    }\n}\n\nUserSeekForm.propTypes = {\n    onSubmitUserSeekData: PropTypes.func.isRequired\n}\n\nexport { UserSeekForm }","import React from 'react'\nimport { connect } from 'react-redux'\nimport { UserFrame } from '../components/UserFrame'\nimport { UserSeekForm } from '../components/UserSeekForm'\nimport { findUsers, addNewUserToCurrentChat } from '../actions/chatSettingsActions'\nimport PropTypes from 'prop-types'\n\nclass CurrentChatSettings extends React.Component {\n\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            showAddedUserMenu: false,\n        }\n    }\n\n    onSubmitUserSeekData = (userSeekData) => {\n        this.props.findUsers(userSeekData)\n    }\n\n    onAddUserButtonClick = () => {\n        this.setState({\n            showAddedUserMenu: true,\n        })\n    }\n\n    onUserClick = (user) => {\n        this.setState({\n            showAddedUserMenu: false,\n        })\n\n        this.props.addNewUserToCurrentChat(user)\n    }\n\n    renderUsersList = () => {\n        const { usersList } = this.props\n        const onUserClick = this.onUserClick\n\n        if (usersList && usersList.length) {\n            return usersList.map(function (item) {\n                return (\n                    <UserFrame onUserClick = { onUserClick } key = { item._id } user = { item } />\n                )\n            })\n        }\n    }\n\n    renderAddedUserMenu = () => {\n\n        const { showAddedUserMenu } = this.state\n        const { currentChat } = this.props\n\n        if (showAddedUserMenu) {\n            return (\n                <React.div>\n                    <UserSeekForm onSubmitUserSeekData = { this.onSubmitUserSeekData } />\n                    {this.renderUsersList()}\n                </React.div>\n            )\n        }\n\n        if (currentChat._id) {\n            return (\n                <button onClick = { this.onAddUserButtonClick }>\n                    Add new user to chat\n                </button>\n            )\n        }\n    }\n\n    render() {\n        return (\n            <div className = \"chatSettings\">\n                <h1>Curret chat: { this.props.currentChat.name }</h1>\n                { this.renderAddedUserMenu() }\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        currentChat: state.currentChat,\n        usersList: state.usersList,\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        findUsers: (userSeekData) => dispatch(findUsers(userSeekData)),\n        addNewUserToCurrentChat: (user) => dispatch(addNewUserToCurrentChat(user)),\n    }\n}\n\nCurrentChatSettings.propTypes = {\n    usersList: PropTypes.arrayOf(PropTypes.shape({\n        user: PropTypes.exact({\n            _id: PropTypes.number.isRequired,\n            name: PropTypes.string.isRequired,\n            email: PropTypes.string.isRequired,\n        })\n    })),\n    currentChat: PropTypes.exact({\n        _id: PropTypes.string,\n        name: PropTypes.string,\n        users: PropTypes.arrayOf(PropTypes.shape({\n            _id: PropTypes.string.isRequired,\n            name: PropTypes.string.isRequired,\n            email: PropTypes.string.isRequired,\n        })),\n    }),\n    findUsers: PropTypes.func.isRequired,\n    addNewUserToCurrentChat: PropTypes.func.isRequired,\n}\n\nexport { CurrentChatSettings }\nexport default connect(mapStateToProps, mapDispatchToProps)(CurrentChatSettings)","import React from 'react'\nimport PropTypes from 'prop-types'\n\nclass AuthenticationForm extends React.Component {\n\n    state = {\n        email: '',\n        password: ''\n    }\n\n    onSubmit = (event) => {\n        event.preventDefault()\n\n        this.props.onSubmit(this.state.email, this.state.password)\n\n        this.setState({\n            email: '',\n            password: '',\n        })\n    }\n\n    updateUserEmailValue = (eventArg) => {\n        this.setState({\n            email: eventArg.target.value\n        })\n    }\n\n    updateUserPasswordValue = (eventArg) => {\n        this.setState({\n            password: eventArg.target.value\n        })\n    }\n\n    render() {\n        return (\n            <form onSubmit = { this.onSubmit } className = \"regAuthForm\">\n                <h3>Login</h3>\n                <label>User email</label>\n                <input\n                    name='userEmail'\n                    placeholder='User email'\n                    type='text'\n                    value={this.state.email}\n                    onChange={this.updateUserEmailValue}\n                /><br />\n                <label>User password</label>\n                <input\n                    name='userPassword'\n                    placeholder='User password'\n                    type='text'\n                    value={this.state.password}\n                    onChange={this.updateUserPasswordValue}\n                /><br />\n                <button type=\"submit\">\n                    Submit\n                </button>\n            </form>\n        )\n    }\n}\n\nAuthenticationForm.propTypes = {\n    onSubmit: PropTypes.func.isRequired\n}\n\nexport { AuthenticationForm }","import React from 'react'\nimport PropTypes from 'prop-types'\n\nclass RegistrationForm extends React.Component {\n\n    state = {\n        email: '',\n        name: '',\n        password: '',\n    }\n\n    onSubmit = (eventArg) => {\n        eventArg.preventDefault()\n\n        const { email, name, password } = this.state\n\n        const user = {\n            email,\n            name,\n            password,\n        }\n\n        this.props.onSubmit(user)\n\n        this.setState({\n            email: '',\n            name: '',\n            password: '',\n        })\n    }\n\n    updateUserEmailValue = (eventArg) => {\n        this.setState({\n            email: eventArg.target.value\n        })\n    }\n\n    updateUserNameValue = (eventArg) => {\n        this.setState({\n            name: eventArg.target.value\n        })\n    }\n\n    updateUserPasswordValue = (eventArg) => {\n        this.setState({\n            password: eventArg.target.value\n        })\n    }\n\n    render() {\n        return (\n            <form onSubmit = { this.onSubmit } className = \"regAuthForm\">\n                <h3>New user registration</h3>\n                <label>User email</label>\n                <input\n                    name = \"userEmail\"\n                    placeholder = 'User email'\n                    type = 'text'\n                    value = { this.state.email }\n                    onChange = { this.updateUserEmailValue }\n                /><br />\n                <label>User name</label>\n                <input\n                    name = 'userName'\n                    placeholder = 'User name'\n                    type = 'text'\n                    value = { this.state.name }\n                    onChange = { this.updateUserNameValue }\n                /><br />\n                <label>User password</label>\n                <input\n                    name = 'userPassword'\n                    placeholder = 'User password'\n                    type = 'text'\n                    value = { this.state.password }\n                    onChange = { this.updateUserPasswordValue }\n                /><br />\n                <button type = 'submit'>\n                    Send new user registration data\n                </button>\n            </form>\n        )\n    }\n}\n\nRegistrationForm.propTypes = {\n    onSubmit: PropTypes.func.isRequired\n}\n\nexport { RegistrationForm }","import React from 'react'\nimport PropTypes from 'prop-types'\n\nfunction SettingsPanel(props) {\n\n    return (\n        <div onClick = { props.onSignOut }>\n            <button >\n                Sign out\n            </button>\n        </div>\n    )\n}\n\nSettingsPanel.propTypes = {\n    onSignOut: PropTypes.func.isRequired,\n}\n\nexport { SettingsPanel }","import React from 'react'\nimport { NewChatForm } from '../components/NewChatForm'\nimport MessageList from './MessageList'\nimport ChatList from './ChatList'\nimport CurrentChatSettings from './CurrentChatSettings'\nimport { AuthenticationForm } from '../components/AuthenticationForm'\nimport { RegistrationForm } from '../components/RegistrationForm'\nimport { SettingsPanel } from '../components/SettingsPanel'\nimport { connect } from 'react-redux'\nimport { sendNewMessage } from '../actions/messageListActions'\nimport { submitUserEmailAndPassword, submitNewUser, createNewChat, resetAuthenticationResult } from '../actions/chatSettingsActions'\nimport './App.sass'\n\nclass App extends React.Component {\n\n  renderChatListNewChatForm() {\n    if (this.props.currentUser._id) {\n      return (\n        <div>\n          <NewChatForm\n            onSubmitNewChat = { this.props.createNewChat }\n            currentUserId = { this.props.currentUser._id }\n          />\n          <ChatList />\n        </div>\n      )\n    }\n  }\n\n  renderMessageList() {\n    if (!this.props.currentUser._id) return\n    if (!this.props.currentChat._id) return\n\n    return (\n      <MessageList sendNewMessage = { this.props.sendNewMessage } />\n    )\n  }\n\n  onSignOut = () => {\n    this.props.resetAuthenticationResult()\n  }\n\n  renderMainContent() {\n    if (this.props.isUserAuthenticated) {\n      return (\n        <div className = \"mainPanel\">\n          <div className = \"userChatsPanel\">\n            <SettingsPanel\n              onSignOut={this.onSignOut}\n            />\n            <div>\n              <h1>Curret user: {this.props.currentUser.name}</h1>\n              {this.renderChatListNewChatForm()}\n            </div>\n          </div>\n          <div className=\"currentChatPanel\">\n            <CurrentChatSettings />\n            {this.renderMessageList()}\n          </div>\n        </div>\n      )\n    }\n\n    return (\n      <div className = \"regAuthFormsPanel\">\n        <RegistrationForm\n          onSubmit = { this.props.submitNewUser }\n        />\n        <AuthenticationForm\n          onSubmit = { this.props.submitUserEmailAndPassword }\n        />\n      </div>\n    )\n  }\n\n  render() {\n    return (\n      <div className = \"appPanel\">\n        { this.renderMainContent() }\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    currentUser: state.currentUser,\n    currentChat: state.currentChat,\n    wasMessageReceived: state.wasMessageReceived,\n    isUserAuthenticated: state.isUserAuthenticated,\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    createNewChat: (chatName, usersIds) => dispatch(createNewChat(chatName, usersIds)),\n    sendNewMessage: (message) => dispatch(sendNewMessage(message)),\n    submitUserEmailAndPassword: (userEmail, userPassword) => dispatch(submitUserEmailAndPassword(userEmail, userPassword)),\n    submitNewUser: (user) => dispatch(submitNewUser(user)),\n    resetAuthenticationResult: () => dispatch(resetAuthenticationResult()),\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport configureStore from './store/configureStore';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = configureStore()\n\nReactDOM.render(\n    <Provider store = {store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers';\n\nexport default function configureStore(initialState) {\n\n    return createStore(\n        rootReducer,\n        applyMiddleware(thunk)\n    );\n}"],"sourceRoot":""}