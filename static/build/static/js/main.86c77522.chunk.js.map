{"version":3,"sources":["applicationSettings.js","actions/helper.js","actions/chatSettingsActions.js","actions/messageListActions.js","reducers/index.js","reducers/messageListData.js","reducers/chatSettings.js","middleware/webSocketMiddleware.js","actions/webSocketActions.js","components/NewChatForm.js","components/helper.js","components/MessageTimestamp.js","components/MessageFrame.js","components/NewMessageInput.js","containers/MessageList.js","components/ChatFrame.js","containers/ChatList.js","components/UserFrame.js","components/UserSeekForm.js","components/AddToChatNewUserWindow.js","components/SpecialMessagesPreprocessorMenu.js","containers/CurrentChatSettings.js","components/AuthenticationForm.js","components/RegistrationForm.js","components/SettingsPanel.js","components/ErrorWindow.js","containers/App.js","serviceWorker.js","index.js","store/configureStore.js"],"names":["serverLocation","messageSendPath","messageGetPath","newMessageGetPath","submitNewChatPath","chatsListGetPath","submitUserEmailAndPasswordPath","submitNewUserPath","searchUsersPath","addNewUserToChatPath","fetchMessagesCount","updateInterval","httpHeadersWithoutToken","Accept","createHttpHeadersWithToken","token","Authorization","checkResponseAndCreateErrorIfBadStatus","response","ok","status","badStatusText","statusText","message","validateEmail","email","test","readTextFile","file","Promise","resolve","reject","reader","FileReader","onload","result","onerror","readAsText","convertMessages","messages","convertor","map","item","text","getUserToken","a","async","localStorage","userJson","JSON","parse","user","CHANGE_CURRENT_USER","CHANGE_CURRENT_CHAT","REFRESH_CHATS_LIST","SET_AUTHENTICATION_RESULT","SET_LAST_ERROR","FILL_FOUND_USERS_LIST","CLEAR_LAST_ERROR","ADD_NEW_SPECIAL_MESSAGES_PREPROCESSOR_FUNCTION","changeCurrentUser","type","payload","changeCurrentChat","chat","setAuthenticationResult","handleServerError","serverErrorData","dispatch","resetAuthenticationResult","setLastError","errorData","removeItem","addNewSpecialMessagesPreprocessorFunction","forwardPreprocessorFunction","backwardPreprocessorFunction","tryGetPreprocessorAnd–°hangeCurrentChat","preprocessorString","getItem","_id","preprocessor","Function","forward","backward","CLEAR_MESSAGES","fetchChatsList","userId","fetch","method","headers","data","json","console","log","ADD_NEW_MESSAGE","MESSAGE_WAS_RECEIVED","REFRESH_MESSAGES_LIST","UNSHIFT_PREVIOUS_MESSAGES","PUSH_NEW_MESSAGES","addNewMessage","messageWasReceived","bool","encryptAndSendNewMessage","getState","currentChat","time","Date","getTime","authorEmail","currentUser","authorName","name","chatId","body","stringify","wasMessageReceived","sendNewMessage","applyBackwardPreprocessorFunctionAndPushMessage","pushNewMessages","combineReducers","state","action","previousMessages","newMessages","chatsList","isUserAuthenticated","lastError","usersList","webSocketMiddleware","socket","store","next","close","WebSocket","host","onmessage","event","actionType","onMessage","onclose","onClose","onopen","target","url","onOpen","NewChatForm","users","onSubmit","preventDefault","props","onSubmitNewChat","currentUserId","setState","updateChatNameValue","eventArg","value","this","placeholder","onChange","React","Component","addLeadZero","number","MessageTimestamp","date","hours","getHours","minutes","getMinutes","day","getDate","month","getMonth","year","getFullYear","MessageFrame","messageFrameClass","currentUserEmail","className","NewMessageInput","newMessage","onSubmitNewMessage","updateInputValue","MessageList","componentDidMount","fetchMessages","initializeMessagesListUpdateTimer","componentDidUpdate","current","messageListRef","messagesLength","length","previousMessagesLength","suspendMessagesFetching","scrollTop","scrollDownIfEnabled","reloadMessagesList","fetchMessagesForced","timerID","setInterval","fetchNewMessages","tryLoadMessagesUntilScrollAppears","oldestMessageTime","fetchMessagesList","lastMessageIndex","enableScrollDown","scrollDown","scrollHeight","renderMessageList","index","key","onScrollDownClick","onScroll","createRef","clearInterval","offsetWidth","clientWidth","decodedString","DOMParser","parseFromString","textContent","onClick","ref","connect","newestMessageTime","ChatFrame","onSelectChat","renderUsersList","ChatList","renderChatList","UserFrame","onUserClick","UserSeekForm","userSeekData","onSubmitUserSeekData","searchQueryString","updateSearchQueryString","AddToChatNewUserWindow","findUsers","onCancelClick","SpecialMessagesPreprocessorMenu","filePath","updateMessagesPreprocessorFile","files","CurrentChatSettings","onAddUserButtonClick","showAddedUserMenu","onAddSpecialMessagesPreprocessorButtonClick","showSpecialMessagesPreprocessorMenu","addNewUserToCurrentChat","cancelUserAdding","addNewSpecialMessagesPreprocessor","preprocessorFunctionString","cancelSpecialMessagesPreprocessorAdding","renderAddedUserWindow","Fragment","newUserId","str","trim","setItem","AuthenticationForm","password","updateUserEmailValue","updateUserPasswordValue","RegistrationForm","updateUserNameValue","SettingsPanel","onSignOut","currentUserName","ErrorWindow","statusParagraph","badStatusTextParagraph","messageParagraph","onOk","App","checkIsUserAuthenticated","createNewChat","clearLastError","renderChatListNewChatForm","renderErrorWindow","submitNewUser","submitUserEmailAndPassword","renderMainContent","chatName","usersIds","newChatData","userEmail","userPassword","userAuthenticationData","Boolean","window","location","hostname","match","createStore","rootReducer","applyMiddleware","thunk","wsMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.86c77522.chunk.js","sourcesContent":["export const serverLocation = 'http://localhost:4000/'\n\nexport const messageSendPath = 'messages/new/'\nexport const messageGetPath = 'messages/listRequest/'\nexport const newMessageGetPath = 'messages/lastMessages/'\nexport const submitNewChatPath = 'chats/new/'\nexport const chatsListGetPath = 'chats/listRequest/'\nexport const submitUserEmailAndPasswordPath = 'users/login/'\nexport const submitNewUserPath = 'users/new/'\nexport const searchUsersPath = 'users/search/'\nexport const addNewUserToChatPath = 'chats/addNewUser/'\n\nexport const fetchMessagesCount = 15\nexport const updateInterval = 10000\n","export const httpHeadersWithoutToken = {\n  Accept: 'application/json',\n  'Content-Type': 'application/json',\n}\n\nexport function createHttpHeadersWithToken(token) {\n  return {\n    Accept: 'application/json',\n    'Content-Type': 'application/json',\n    Authorization: `Bearer ${token}`,\n  }\n}\n\nexport function checkResponseAndCreateErrorIfBadStatus(response) {\n  if (response.ok) {\n    return\n  } else {\n    const { status, statusText, message } = response\n\n    return {\n      status,\n      badStatusText: statusText,\n      message,\n    }\n  }\n}\n\nexport function validateEmail(email) {\n  const reg = /^([A-Za-z0-9_\\-\\.])+\\@([A-Za-z0-9_\\-\\.])+\\.([A-Za-z]{2,4})$/\n\n  return reg.test(email)\n}\n\nexport function readTextFile(file) {\n  return new Promise((resolve, reject) => {\n    var reader = new FileReader()\n    reader.onload = () => {\n      resolve(reader.result)\n    }\n    reader.onerror = reject\n    reader.readAsText(file)\n  })\n}\n\nexport function isStringNullOrEmpty(str) {\n  if (!str) return true\n\n  if (str.trim() === '') return true\n\n  return false\n}\n\nexport function convertMessages(messages, convertor) {\n  if (convertor) {\n    messages = messages.map(item => {\n      const text = convertor(item.text)\n      return { ...item, text }\n    })\n  }\n\n  return messages\n}\n\nexport async function getUserToken() {\n  const { userJson } = localStorage\n\n  if (!userJson) return null\n\n  const user = await JSON.parse(userJson)\n\n  if (!user) return null\n\n  return user.token ? user.token : null\n}\n","import {\n  serverLocation,\n  submitNewChatPath,\n  chatsListGetPath,\n  submitUserEmailAndPasswordPath,\n  submitNewUserPath,\n  searchUsersPath,\n  addNewUserToChatPath,\n} from '../applicationSettings'\n\nimport { clearMessages } from './messageListActions'\n\nimport {\n  createHttpHeadersWithToken,\n  httpHeadersWithoutToken,\n  checkResponseAndCreateErrorIfBadStatus,\n  validateEmail,\n  readTextFile,\n  isStringNullOrEmpty,\n  getUserToken,\n} from './helper'\n\nexport const CHANGE_CURRENT_USER = 'CHANGE_CURRENT_USER'\nexport const CHANGE_CURRENT_CHAT = 'CHANGE_CURRENT_CHAT'\nexport const REFRESH_CHATS_LIST = 'REFRESH_CHATS_LIST'\nexport const SET_AUTHENTICATION_RESULT = 'SET_AUTHENTICATION_RESULT'\nexport const SET_LAST_ERROR = 'SET_LAST_ERROR'\nexport const FILL_FOUND_USERS_LIST = 'FILL_FOUND_USERS_LIST'\nexport const CLEAR_LAST_ERROR = 'CLEAR_LAST_ERROR'\nexport const ADD_NEW_SPECIAL_MESSAGES_PREPROCESSOR_FUNCTION =\n  'ADD_NEW_SPECIAL_MESSAGES_PREPROCESSOR_FUNCTION'\n\nexport function changeCurrentUser(user) {\n  return {\n    type: CHANGE_CURRENT_USER,\n    payload: user,\n  }\n}\n\nexport function changeCurrentChat(chat) {\n  return {\n    type: CHANGE_CURRENT_CHAT,\n    payload: chat,\n  }\n}\n\nexport function refreshChatsList(chats) {\n  return {\n    type: REFRESH_CHATS_LIST,\n    payload: chats,\n  }\n}\n\nexport function setAuthenticationResult(result) {\n  return {\n    type: SET_AUTHENTICATION_RESULT,\n    payload: result,\n  }\n}\n\nexport function handleServerError(serverErrorData) {\n  return dispatch => {\n    if (serverErrorData.status === 401) {\n      dispatch(resetAuthenticationResult())\n    }\n\n    dispatch(setLastError(serverErrorData))\n  }\n}\n\nexport function setLastError(errorData) {\n  return {\n    type: SET_LAST_ERROR,\n    payload: errorData,\n  }\n}\n\nexport function fillFoundUsersList(usersList) {\n  return {\n    type: FILL_FOUND_USERS_LIST,\n    payload: usersList,\n  }\n}\n\nexport function resetAuthenticationResult() {\n  return dispatch => {\n    localStorage.removeItem('userJson')\n    dispatch(setAuthenticationResult(false))\n  }\n}\n\nexport function clearLastError() {\n  return {\n    type: CLEAR_LAST_ERROR,\n  }\n}\n\nexport function addNewSpecialMessagesPreprocessorFunction(\n  forwardPreprocessorFunction,\n  backwardPreprocessorFunction\n) {\n  return {\n    type: ADD_NEW_SPECIAL_MESSAGES_PREPROCESSOR_FUNCTION,\n    payload: {\n      forwardPreprocessorFunction,\n      backwardPreprocessorFunction,\n    },\n  }\n}\n\nexport function checkIsUserAuthenticated() {\n  return async dispatch => {\n    const { userJson } = localStorage\n    let user\n    try {\n      if (!userJson) return\n      user = await JSON.parse(userJson)\n    } catch (error) {\n      localStorage.removeItem('userJson')\n      return\n    }\n\n    dispatch(changeCurrentUser(user))\n    dispatch(setAuthenticationResult(true))\n    dispatch(fetchChatsList(user._id))\n  }\n}\n\nexport function addNewSpecialMessagesPreprocessor(file) {\n  return async (dispatch, getState) => {\n    if (!file) return\n\n    let preprocessorString = await readTextFile(file)\n\n    if (isStringNullOrEmpty(preprocessorString)) {\n      dispatch(setLastError({ message: 'File is empty or has wrong format' }))\n      return\n    }\n\n    const preprocessor = JSON.parse(preprocessorString)\n\n    if (!preprocessor.forward || !preprocessor.backward) {\n      dispatch(setLastError({ message: 'File has wrong format' }))\n      return\n    }\n\n    const forwardPreprocessorFunction = new Function(\n      'text',\n      preprocessor.forward\n    )\n    const backwardPreprocessorFunction = new Function(\n      'text',\n      preprocessor.backward\n    )\n\n    const { currentChat } = getState()\n\n    localStorage.setItem(currentChat._id, preprocessorString)\n\n    dispatch(\n      addNewSpecialMessagesPreprocessorFunction(\n        forwardPreprocessorFunction,\n        backwardPreprocessorFunction\n      )\n    )\n  }\n}\n\nexport function tryGetPreprocessorAnd–°hangeCurrentChat(chat) {\n  return dispatch => {\n    const preprocessorString = localStorage.getItem(chat._id)\n\n    let forwardPreprocessorFunction, backwardPreprocessorFunction\n\n    if (preprocessorString) {\n      const preprocessor = JSON.parse(preprocessorString)\n\n      forwardPreprocessorFunction = new Function('text', preprocessor.forward)\n      backwardPreprocessorFunction = new Function('text', preprocessor.backward)\n    }\n\n    dispatch(changeCurrentChat(chat))\n    dispatch(clearMessages())\n\n    if (forwardPreprocessorFunction && backwardPreprocessorFunction) {\n      dispatch(\n        addNewSpecialMessagesPreprocessorFunction(\n          forwardPreprocessorFunction,\n          backwardPreprocessorFunction\n        )\n      )\n    }\n  }\n}\n\nexport function createNewChat(name, users) {\n  return async (dispatch, getState) => {\n    try {\n      const token = await getUserToken()\n\n      if (!token) return\n\n      const newChatData = {\n        chat: {\n          name,\n          users,\n        },\n      }\n\n      const response = await fetch(serverLocation + submitNewChatPath, {\n        method: 'POST',\n        headers: createHttpHeadersWithToken(token),\n        body: JSON.stringify(newChatData),\n      })\n\n      let data = checkResponseAndCreateErrorIfBadStatus(response)\n\n      if (!data) {\n        data = await response.json()\n      }\n\n      if (data.status) {\n        dispatch(handleServerError(data))\n      } else {\n        const { currentUser } = getState()\n\n        dispatch(tryGetPreprocessorAnd–°hangeCurrentChat(data.chat))\n        dispatch(fetchChatsList(currentUser._id))\n      }\n    } catch (error) {\n      console.log('error', error)\n    }\n  }\n}\n\nexport function fetchChatsList(userId) {\n  return async dispatch => {\n    try {\n      const token = await getUserToken()\n\n      if (!token) return\n\n      const response = await fetch(\n        `${serverLocation}${chatsListGetPath}?user_id=${userId}`,\n        {\n          method: 'GET',\n          headers: createHttpHeadersWithToken(token),\n        }\n      )\n\n      let data = checkResponseAndCreateErrorIfBadStatus(response)\n\n      if (!data) {\n        data = await response.json()\n      }\n\n      if (data.badStatusText) {\n        dispatch(handleServerError(data))\n        localStorage.removeItem('token')\n        localStorage.removeItem('userJson')\n      } else {\n        dispatch(refreshChatsList(data))\n      }\n    } catch (error) {\n      console.log('error', error)\n    }\n  }\n}\n\nexport function submitUserEmailAndPassword(email, password) {\n  return async dispatch => {\n    try {\n      if (!validateEmail(email)) {\n        dispatch(\n          setLastError({\n            message: `Bad email: ${email}`,\n          })\n        )\n        return\n      }\n\n      const userAuthenticationData = {\n        user: {\n          email,\n          name: '',\n          password,\n        },\n      }\n\n      const response = await fetch(\n        serverLocation + submitUserEmailAndPasswordPath,\n        {\n          method: 'POST',\n          headers: httpHeadersWithoutToken,\n          body: JSON.stringify(userAuthenticationData),\n        }\n      )\n\n      let data = checkResponseAndCreateErrorIfBadStatus(response)\n\n      if (!data) {\n        data = await response.json()\n      }\n\n      if (data.badStatusText) {\n        dispatch(handleServerError(data))\n        dispatch(setAuthenticationResult(false))\n      } else {\n        const { _id } = data.user\n\n        localStorage.setItem('userJson', JSON.stringify(data.user))\n\n        dispatch(changeCurrentUser(data.user))\n        dispatch(setAuthenticationResult(true))\n        dispatch(fetchChatsList(_id))\n      }\n    } catch (error) {\n      console.log('error', error)\n    }\n  }\n}\n\nexport function submitNewUser(user) {\n  return async dispatch => {\n    try {\n      if (!validateEmail(user.email)) {\n        dispatch(\n          setLastError({\n            message: `Bad email: ${user.email}`,\n          })\n        )\n\n        return\n      }\n\n      const response = await fetch(serverLocation + submitNewUserPath, {\n        method: 'POST',\n        headers: httpHeadersWithoutToken,\n        body: JSON.stringify({ user }),\n      })\n\n      let data = checkResponseAndCreateErrorIfBadStatus(response)\n\n      if (!data) {\n        data = await response.json()\n      }\n\n      if (data.badStatusText) {\n        dispatch(handleServerError(data))\n        dispatch(setAuthenticationResult(false))\n      } else {\n        const { _id } = data.user\n\n        localStorage.setItem('userJson', JSON.stringify(data.user))\n\n        dispatch(changeCurrentUser(data.user))\n        dispatch(changeCurrentChat({}))\n        dispatch(setAuthenticationResult(true))\n        dispatch(fetchChatsList(_id))\n      }\n    } catch (error) {\n      console.log('error', error)\n    }\n  }\n}\n\nexport function findUsers(userSeekData) {\n  return async dispatch => {\n    try {\n      const token = await getUserToken()\n\n      if (!token) return\n\n      const response = await fetch(\n        `${serverLocation}${searchUsersPath}?user_seek_data=${userSeekData}`,\n        {\n          method: 'GET',\n          headers: createHttpHeadersWithToken(token),\n        }\n      )\n\n      let data = checkResponseAndCreateErrorIfBadStatus(response)\n\n      if (!data) {\n        data = await response.json()\n      }\n\n      if (data.badStatusText) {\n        dispatch(handleServerError(data))\n\n        localStorage.removeItem('token')\n        localStorage.removeItem('userJson')\n      } else {\n        dispatch(fillFoundUsersList(data))\n      }\n    } catch (error) {\n      console.log('error', error)\n    }\n  }\n}\n\nexport function addNewUserToCurrentChat(user) {\n  return async (dispatch, getState) => {\n    try {\n      const token = await getUserToken()\n\n      if (!token) return\n\n      const { currentChat } = getState()\n\n      const response = await fetch(serverLocation + addNewUserToChatPath, {\n        method: 'POST',\n        headers: createHttpHeadersWithToken(token),\n        body: JSON.stringify({\n          chatId: currentChat._id,\n          newUserId: user._id,\n        }),\n      })\n\n      let data = checkResponseAndCreateErrorIfBadStatus(response)\n\n      if (!data) {\n        data = await response.json()\n      }\n\n      if (data.badStatusText) {\n        dispatch(handleServerError(data))\n      } else {\n        dispatch(tryGetPreprocessorAnd–°hangeCurrentChat(data.chat))\n      }\n    } catch (error) {\n      console.log('error', error)\n    }\n  }\n}\n","import {\n  serverLocation,\n  messageSendPath,\n  messageGetPath,\n  newMessageGetPath,\n  fetchMessagesCount,\n} from '../applicationSettings'\n\nimport { handleServerError } from './chatSettingsActions'\n\nimport {\n  createHttpHeadersWithToken,\n  checkResponseAndCreateErrorIfBadStatus,\n  convertMessages,\n  getUserToken,\n} from './helper'\n\nexport const ADD_NEW_MESSAGE = 'ADD_NEW_MESSAGE'\nexport const MESSAGE_WAS_RECEIVED = 'MESSAGE_WAS_RECEIVED'\nexport const REFRESH_MESSAGES_LIST = 'REFRESH_MESSAGES_LIST'\nexport const UNSHIFT_PREVIOUS_MESSAGES = 'UNSHIFT_PREVIOUS_MESSAGES'\nexport const PUSH_NEW_MESSAGES = 'PUSH_NEW_MESSAGES'\nexport const CLEAR_MESSAGES = 'CLEAR_MESSAGES'\n\nexport function clearMessages() {\n  return {\n    type: CLEAR_MESSAGES,\n  }\n}\n\nexport function addNewMessage(message) {\n  return {\n    type: ADD_NEW_MESSAGE,\n    payload: message,\n  }\n}\n\nexport function messageWasReceived(bool) {\n  return {\n    type: MESSAGE_WAS_RECEIVED,\n    payload: bool,\n  }\n}\n\nexport function refreshMessagesList(messages) {\n  return {\n    type: REFRESH_MESSAGES_LIST,\n    payload: messages,\n  }\n}\n\nexport function unshiftPreviousMessages(messages) {\n  return {\n    type: UNSHIFT_PREVIOUS_MESSAGES,\n    payload: messages,\n  }\n}\n\nexport function pushNewMessages(messages) {\n  return {\n    type: PUSH_NEW_MESSAGES,\n    payload: messages,\n  }\n}\n\nexport function encryptAndSendNewMessage(text) {\n  return (dispatch, getState) => {\n    const { forwardPreprocessorFunction } = getState().currentChat\n\n    if (forwardPreprocessorFunction) {\n      text = forwardPreprocessorFunction(text)\n    }\n\n    dispatch(sendNewMessage(text))\n  }\n}\n\nexport function sendNewMessage(text) {\n  return async (dispatch, getState) => {\n    try {\n      const token = await getUserToken()\n\n      if (!token) return\n\n      dispatch(messageWasReceived(false))\n\n      const time = new Date().getTime()\n      const authorEmail = getState().currentUser.email\n      const authorName = getState().currentUser.name\n      const chatId = getState().currentChat._id\n\n      const message = {\n        chatId,\n        time,\n        authorEmail,\n        authorName,\n        text,\n      }\n\n      const response = await fetch(serverLocation + messageSendPath, {\n        method: 'POST',\n        headers: createHttpHeadersWithToken(token),\n        body: JSON.stringify(message),\n      })\n\n      let data = checkResponseAndCreateErrorIfBadStatus(response)\n\n      if (!data) {\n        data = await response.json()\n      }\n\n      if (data.status) {\n        dispatch(handleServerError(data))\n        message.wasMessageReceived = false\n        dispatch(addNewMessage(message))\n        localStorage.removeItem('token')\n      } else {\n        message.wasMessageReceived = true\n        dispatch(addNewMessage(message))\n        dispatch(messageWasReceived(true))\n      }\n    } catch (error) {\n      console.log('error', error)\n    }\n  }\n}\n\nexport function fetchMessagesList(chatId, oldestMessageTime) {\n  return async (dispatch, getState) => {\n    try {\n      const token = await getUserToken()\n\n      if (!token) return\n\n      const response = await fetch(\n        `${serverLocation}${messageGetPath}?chat_id=${chatId}&oldest_message_time=${oldestMessageTime}&fetch_messages_count=${fetchMessagesCount}`,\n        {\n          method: 'GET',\n          headers: createHttpHeadersWithToken(token),\n        }\n      )\n\n      let data = checkResponseAndCreateErrorIfBadStatus(response)\n\n      if (!data) {\n        data = await response.json()\n      }\n\n      if (data.badStatusText) {\n        dispatch(handleServerError(data))\n        localStorage.removeItem('token')\n      } else {\n        const { backwardPreprocessorFunction } = getState().currentChat\n        data = convertMessages(data, backwardPreprocessorFunction)\n        dispatch(unshiftPreviousMessages(data))\n      }\n    } catch (error) {\n      console.log('error', error)\n    }\n  }\n}\n\nexport function fetchNewMessages(chatId, newestMessageTime) {\n  return async (dispatch, getState) => {\n    try {\n      const token = await getUserToken()\n\n      if (!token) return\n\n      const response = await fetch(\n        `${serverLocation}${newMessageGetPath}?chat_id=${chatId}&newest_message_time=${newestMessageTime}`,\n        {\n          method: 'GET',\n          headers: createHttpHeadersWithToken(token),\n        }\n      )\n\n      let data = checkResponseAndCreateErrorIfBadStatus(response)\n\n      if (!data) {\n        data = await response.json()\n      }\n\n      if (data.badStatusText) {\n        dispatch(handleServerError(data))\n        localStorage.removeItem('token')\n      } else {\n        dispatch(applyBackwardPreprocessorFunctionAndPushMessage(data))\n      }\n    } catch (error) {\n      console.log('error', error)\n    }\n  }\n}\n\nexport function applyBackwardPreprocessorFunctionAndPushMessage(messages) {\n  return (dispatch, getState) => {\n    const { backwardPreprocessorFunction } = getState().currentChat\n\n    if (backwardPreprocessorFunction) {\n      messages = convertMessages(messages, backwardPreprocessorFunction)\n    }\n\n    dispatch(pushNewMessages(messages))\n  }\n}\n","import { combineReducers } from 'redux'\nimport { messages, wasMessageReceived } from './messageListData'\nimport {\n  currentUser,\n  currentChat,\n  chatsList,\n  isUserAuthenticated,\n  lastError,\n  usersList,\n} from './chatSettings'\n\nexport default combineReducers({\n  messages,\n  wasMessageReceived,\n  currentUser,\n  currentChat,\n  chatsList,\n  isUserAuthenticated,\n  lastError,\n  usersList,\n})\n","import {\n  ADD_NEW_MESSAGE,\n  MESSAGE_WAS_RECEIVED,\n  REFRESH_MESSAGES_LIST,\n  UNSHIFT_PREVIOUS_MESSAGES,\n  PUSH_NEW_MESSAGES,\n  CLEAR_MESSAGES,\n} from '../actions/messageListActions'\n\nexport function messages(state = [], action) {\n  switch (action.type) {\n    case CLEAR_MESSAGES:\n      return []\n    case ADD_NEW_MESSAGE:\n      return [...state, action.payload]\n    case REFRESH_MESSAGES_LIST:\n      return action.payload\n    case UNSHIFT_PREVIOUS_MESSAGES:\n      const previousMessages = action.payload\n      return [...previousMessages, ...state]\n    case PUSH_NEW_MESSAGES:\n      const newMessages = action.payload\n      return [...state, ...newMessages]\n    default:\n      return state\n  }\n}\n\nexport function wasMessageReceived(state = true, action) {\n  switch (action.type) {\n    case MESSAGE_WAS_RECEIVED:\n      return action.payload\n    default:\n      return state\n  }\n}\n","import {\n  CHANGE_CURRENT_USER,\n  CHANGE_CURRENT_CHAT,\n  REFRESH_CHATS_LIST,\n  SET_AUTHENTICATION_RESULT,\n  SET_LAST_ERROR,\n  FILL_FOUND_USERS_LIST,\n  CLEAR_LAST_ERROR,\n  ADD_NEW_SPECIAL_MESSAGES_PREPROCESSOR_FUNCTION,\n} from '../actions/chatSettingsActions'\n\nexport function currentUser(state = {}, action) {\n  switch (action.type) {\n    case CHANGE_CURRENT_USER:\n      return action.payload\n    default:\n      return state\n  }\n}\n\nexport function currentChat(state = {}, action) {\n  switch (action.type) {\n    case CHANGE_CURRENT_CHAT:\n      return action.payload\n    case ADD_NEW_SPECIAL_MESSAGES_PREPROCESSOR_FUNCTION:\n      return { ...state, ...action.payload }\n    default:\n      return state\n  }\n}\n\nexport function chatsList(state = [], action) {\n  switch (action.type) {\n    case REFRESH_CHATS_LIST:\n      return action.payload\n    default:\n      return state\n  }\n}\n\nexport function isUserAuthenticated(state = false, action) {\n  switch (action.type) {\n    case SET_AUTHENTICATION_RESULT:\n      return action.payload\n    default:\n      return state\n  }\n}\n\nexport function lastError(state = null, action) {\n  switch (action.type) {\n    case SET_LAST_ERROR:\n      return action.payload\n    case CLEAR_LAST_ERROR:\n      return null\n    default:\n      return state\n  }\n}\n\nexport function usersList(state = [], action) {\n  switch (action.type) {\n    case FILL_FOUND_USERS_LIST:\n      return action.payload\n    default:\n      return state\n  }\n}\n","import * as webSocketActions from '../actions/webSocketActions'\nimport { applyBackwardPreprocessorFunctionAndPushMessage } from '../actions/messageListActions'\n\nconst webSocketMiddleware = () => {\n  let socket = null\n\n  const onOpen = store => event => {\n    store.dispatch(webSocketActions.wsConnected(event.target.url))\n  }\n\n  const onClose = store => () => {\n    store.dispatch(webSocketActions.wsDisconnected())\n  }\n\n  const onMessage = store => event => {\n    const data = JSON.parse(event.data)\n\n    switch (data.actionType) {\n      case 'updateOne':\n        const messages = [data.message]\n        store.dispatch(\n          applyBackwardPreprocessorFunctionAndPushMessage(messages)\n        )\n        break\n      default:\n        break\n    }\n  }\n\n  return store => next => action => {\n    switch (action.type) {\n      case webSocketActions.WS_CONNECT:\n        if (socket !== null) {\n          socket.close()\n        }\n\n        socket = new WebSocket(action.host)\n        socket.onmessage = onMessage(store)\n        socket.onclose = onClose(store)\n        socket.onopen = onOpen(store)\n        break\n      case webSocketActions.WS_DISCONNECT:\n        if (socket !== null) {\n          socket.close()\n        }\n\n        socket = null\n        break\n      default:\n        return next(action)\n    }\n  }\n}\n\nexport default webSocketMiddleware()\n","export const WS_CONNECT = 'WS_CONNECT'\nexport const WS_CONNECTING = 'WS_CONNECTING'\nexport const WS_CONNECTED = 'WS_CONNECTED'\nexport const WS_DISCONNECT = 'WS_DISCONNECT'\nexport const WS_DISCONNECTED = 'WS_DISCONNECTED'\n\nexport const wsConnect = host => ({ type: 'WS_CONNECT', host })\nexport const wsConnecting = host => ({ type: 'WS_CONNECTING', host })\nexport const wsConnected = host => ({ type: 'WS_CONNECTED', host })\nexport const wsDisconnect = host => ({ type: 'WS_DISCONNECT', host })\nexport const wsDisconnected = host => ({ type: 'WS_DISCONNECTED', host })\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nclass NewChatForm extends React.Component {\n  state = {\n    name: '',\n    users: [],\n  }\n\n  onSubmit = event => {\n    event.preventDefault()\n\n    this.props.onSubmitNewChat(this.state.name, [this.props.currentUserId])\n\n    this.setState({\n      name: '',\n      users: [],\n    })\n  }\n\n  updateChatNameValue = eventArg => {\n    this.setState({\n      name: eventArg.target.value,\n    })\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.onSubmit}>\n        <h4>+Chat</h4>\n        <input\n          name=\"chatName\"\n          placeholder=\"chat name\"\n          type=\"text\"\n          value={this.state.name}\n          onChange={this.updateChatNameValue}\n        />\n        <button type=\"submit\">Create new chat</button>\n      </form>\n    )\n  }\n}\n\nNewChatForm.propTypes = {\n  currentUserId: PropTypes.string.isRequired,\n  onSubmitNewChat: PropTypes.func.isRequired,\n}\n\nexport { NewChatForm }\n","export function addLeadZero(number) {\n  if (number < 10) return '0' + number\n  return number\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { addLeadZero } from './helper'\n\nfunction MessageTimestamp(props) {\n  const date = new Date(props.time)\n  let hours = addLeadZero(date.getHours())\n  let minutes = addLeadZero(date.getMinutes())\n  let day = addLeadZero(date.getDate())\n  let month = addLeadZero(date.getMonth() + 1)\n  let year = date.getFullYear()\n\n  return (\n    <div>\n      <p>\n        {hours}:{minutes} {day}.{month}.{year}\n      </p>\n    </div>\n  )\n}\n\nMessageTimestamp.propTypes = {\n  time: PropTypes.oneOfType([\n    PropTypes.number,\n    PropTypes.string,\n    PropTypes.instanceOf(Date),\n  ]).isRequired,\n}\n\nexport { MessageTimestamp }\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { MessageTimestamp } from './MessageTimestamp'\n\nfunction MessageFrame(props) {\n  const { message, currentUserEmail } = props\n  let messageFrameClass\n\n  if (currentUserEmail === message.authorEmail) {\n    messageFrameClass = 'current_user_message'\n  } else {\n    messageFrameClass = 'another_user_message'\n  }\n\n  return (\n    <div className={messageFrameClass}>\n      <div>\n        <p>{message.authorName}</p>\n      </div>\n      <div>\n        <p>{message.authorEmail}</p>\n      </div>\n      <div>\n        <p>{message.text}</p>\n      </div>\n      <MessageTimestamp time={message.time} />\n    </div>\n  )\n}\n\nMessageFrame.propTypes = {\n  message: PropTypes.exact({\n    _id: PropTypes.string,\n    chatId: PropTypes.string.isRequired,\n    authorName: PropTypes.string.isRequired,\n    authorEmail: PropTypes.string.isRequired,\n    time: PropTypes.oneOfType([\n      PropTypes.number,\n      PropTypes.string,\n      PropTypes.instanceOf(Date),\n    ]).isRequired,\n    text: PropTypes.string.isRequired,\n    wasMessageReceived: PropTypes.bool,\n  }),\n}\n\nexport { MessageFrame }\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nclass NewMessageInput extends React.Component {\n  state = {\n    newMessage: '',\n  }\n\n  onSubmit = event => {\n    event.preventDefault()\n\n    this.props.onSubmitNewMessage(this.state.newMessage)\n\n    this.setState({\n      newMessage: '',\n    })\n  }\n\n  updateInputValue = eventArg => {\n    this.setState({\n      newMessage: eventArg.target.value,\n    })\n  }\n\n  render() {\n    return (\n      <form className=\"new-message-input\" onSubmit={this.onSubmit}>\n        <h4>+Message</h4>\n        <input\n          name=\"userMessage\"\n          placeholder=\"message text\"\n          type=\"text\"\n          value={this.state.newMessage}\n          onChange={this.updateInputValue}\n        />\n        <button type=\"submit\">Send message</button>\n      </form>\n    )\n  }\n}\n\nNewMessageInput.propTypes = {\n  onSubmitNewMessage: PropTypes.func.isRequired,\n}\n\nexport { NewMessageInput }\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport PropTypes from 'prop-types'\nimport { fetchMessagesList } from '../actions/messageListActions'\nimport { fetchNewMessages } from '../actions/messageListActions'\nimport { MessageFrame } from '../components/MessageFrame'\nimport { NewMessageInput } from '../components/NewMessageInput'\nimport { updateInterval } from '../applicationSettings'\nimport './MessageList.sass'\n\nclass MessageList extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.messageListRef = React.createRef()\n\n    this.state = {\n      enableScrollDown: true,\n      previousMessagesLength: 0,\n      suspendMessagesFetching: false,\n      currentChat: null,\n    }\n  }\n\n  componentDidMount = () => {\n    const { currentChat } = this.props\n    if (this.state.currentChat !== currentChat) {\n      this.setState({ currentChat })\n    }\n    this.fetchMessages()\n    this.initializeMessagesListUpdateTimer()\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerID)\n  }\n\n  componentDidUpdate = () => {\n    const { messages, currentChat } = this.props\n    const scrollDownShift = 30\n    const { current } = this.messageListRef\n\n    if (this.state.currentChat !== currentChat) {\n      this.reloadMessagesList()\n      return\n    }\n\n    if (!messages) return\n\n    const messagesLength = messages.length\n    const previousMessagesLength = this.state.previousMessagesLength\n\n    if (messagesLength === previousMessagesLength) return\n\n    this.setState({\n      previousMessagesLength: messagesLength,\n    })\n\n    this.setState({\n      suspendMessagesFetching: false,\n    })\n\n    current.scrollTop += scrollDownShift\n\n    this.scrollDownIfEnabled()\n  }\n\n  reloadMessagesList = () => {\n    this.setState({\n      currentChat: this.props.currentChat,\n    })\n\n    this.fetchMessagesForced()\n    this.setState({\n      suspendMessagesFetching: true,\n    })\n  }\n\n  initializeMessagesListUpdateTimer = () => {\n    this.timerID = setInterval(() => {\n      this.fetchNewMessages()\n      this.tryLoadMessagesUntilScrollAppears()\n    }, updateInterval)\n  }\n\n  fetchMessages = () => {\n    if (this.state.suspendMessagesFetching) return\n\n    this.fetchMessagesForced()\n  }\n\n  fetchMessagesForced = () => {\n    const currentChat = this.props.currentChat\n    const messages = this.props.messages\n\n    if (!currentChat || !currentChat._id) return\n    if (!messages) return\n\n    const time = new Date().getTime()\n\n    const oldestMessageTime = messages.length ? messages[0].time : time\n\n    this.props.fetchMessagesList(currentChat._id, oldestMessageTime)\n  }\n\n  fetchNewMessages = () => {\n    const currentChat = this.props.currentChat\n    const messages = this.props.messages\n\n    if (!currentChat || !currentChat._id) return\n    if (!messages) return\n\n    const lastMessageIndex = messages.length - 1\n\n    if (lastMessageIndex < 0) {\n      this.fetchMessages()\n      return\n    }\n\n    this.props.fetchNewMessages(\n      currentChat._id,\n      messages[lastMessageIndex].time\n    )\n  }\n\n  scrollDownIfEnabled = () => {\n    if (this.state.enableScrollDown) {\n      this.setState({\n        enableScrollDown: false,\n      })\n\n      this.scrollDown()\n    }\n  }\n\n  tryLoadMessagesUntilScrollAppears() {\n    const { current } = this.messageListRef\n\n    if (current.offsetWidth <= current.clientWidth) {\n      this.fetchMessages()\n    }\n  }\n\n  scrollDown = () => {\n    const { current } = this.messageListRef\n\n    current.scrollTop = current.scrollHeight\n  }\n\n  renderMessageList = () => {\n    const { messages, currentUser } = this.props\n    const messagesLength = messages.length\n\n    if (messages && messagesLength) {\n      return messages.map(function(item, index) {\n        return (\n          <div key={index}>\n            <MessageFrame message={item} currentUserEmail={currentUser.email} />\n          </div>\n        )\n      })\n    }\n  }\n\n  onScrollDownClick = () => {\n    this.scrollDown()\n  }\n\n  onScroll = () => {\n    const minScrollTop = 20\n    const { current } = this.messageListRef\n\n    if (current.scrollTop < minScrollTop) {\n      this.setState({\n        suspendMessagesFetching: true,\n      })\n\n      this.fetchMessages()\n    }\n  }\n\n  sendNewMessage = newMessage => {\n    this.props.sendNewMessage(newMessage)\n\n    this.setState({\n      enableScrollDown: true,\n    })\n  }\n\n  render() {\n    const strToDecode = '&#11015'\n    const parser = new DOMParser()\n    const decodedString = parser.parseFromString(\n      `<!doctype html><body>${strToDecode}`,\n      'text/html'\n    ).body.textContent\n\n    return (\n      <div>\n        <div className=\"scroll-down-button\" onClick={this.onScrollDownClick}>\n          {decodedString}\n        </div>\n        <div\n          ref={this.messageListRef}\n          className=\"message-list\"\n          onScroll={this.onScroll}\n        >\n          {this.renderMessageList()}\n        </div>\n        <NewMessageInput onSubmitNewMessage={this.sendNewMessage} />\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    messages: state.messages,\n    currentChat: state.currentChat,\n    currentUser: state.currentUser,\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    fetchMessagesList: (chatId, oldestMessageTime) =>\n      dispatch(fetchMessagesList(chatId, oldestMessageTime)),\n    fetchNewMessages: (chatId, newestMessageTime) =>\n      dispatch(fetchNewMessages(chatId, newestMessageTime)),\n  }\n}\n\nMessageList.propTypes = {\n  messages: PropTypes.arrayOf(\n    PropTypes.shape({\n      message: PropTypes.exact({\n        chatId: PropTypes.number.isRequired,\n        authorName: PropTypes.string.isRequired,\n        authorEmail: PropTypes.string.isRequired,\n        time: PropTypes.oneOfType([\n          PropTypes.number,\n          PropTypes.string,\n          PropTypes.instanceOf(Date),\n        ]).isRequired,\n        text: PropTypes.string.isRequired,\n        wasMessageReceived: PropTypes.bool,\n      }),\n    })\n  ),\n}\n\nexport { MessageList }\nexport default connect(mapStateToProps, mapDispatchToProps)(MessageList)\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nclass ChatFrame extends React.Component {\n  onSelectChat = () => {\n    const { chat } = this.props\n\n    this.props.onSelectChat(chat)\n  }\n\n  renderUsersList = users => {\n    if (users && users.length) {\n      return users.map((item, index) => {\n        return (\n          <div key={index}>\n            <p>{item.name}</p>\n          </div>\n        )\n      })\n    }\n  }\n\n  render() {\n    const { chat } = this.props\n\n    return (\n      <div className=\"selected-item\" onClick={this.onSelectChat}>\n        <div>\n          <h4>{chat.name}</h4>\n        </div>\n        <div>\n          <p>Chat members:</p>\n          <div>{this.renderUsersList(chat.users)}</div>\n        </div>\n      </div>\n    )\n  }\n}\n\nChatFrame.propTypes = {\n  chat: PropTypes.exact({\n    _id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    users: PropTypes.arrayOf(\n      PropTypes.exact({\n        _id: PropTypes.string.isRequired,\n        name: PropTypes.string.isRequired,\n        email: PropTypes.string.isRequired,\n      })\n    ).isRequired,\n  }),\n  onSelectChat: PropTypes.func.isRequired,\n}\n\nexport { ChatFrame }\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport PropTypes from 'prop-types'\nimport {\n  fetchChatsList,\n  tryGetPreprocessorAnd–°hangeCurrentChat,\n} from '../actions/chatSettingsActions'\nimport { ChatFrame } from '../components/ChatFrame'\nimport './ChatList.sass'\n\nclass ChatList extends React.Component {\n  componentDidMount() {\n    let userId = this.props.currentUser._id\n\n    if (!userId) return\n\n    this.props.fetchChatsList(userId)\n  }\n\n  renderChatList = () => {\n    const { chatsList, changeCurrentChat } = this.props\n\n    if (chatsList && chatsList.length) {\n      return chatsList.map(function(item) {\n        return (\n          <ChatFrame\n            onSelectChat={changeCurrentChat}\n            key={item._id}\n            chat={item}\n          />\n        )\n      })\n    }\n  }\n\n  render() {\n    return <div className=\"—Åhat-list\">{this.renderChatList()}</div>\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    chatsList: state.chatsList,\n    currentUser: state.currentUser,\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    fetchChatsList: userId => dispatch(fetchChatsList(userId)),\n    changeCurrentChat: chat =>\n      dispatch(tryGetPreprocessorAnd–°hangeCurrentChat(chat)),\n  }\n}\n\nChatList.propTypes = {\n  chatsList: PropTypes.arrayOf(\n    PropTypes.shape({\n      chat: PropTypes.exact({\n        _id: PropTypes.string.isRequired,\n        name: PropTypes.string.isRequired,\n        users: PropTypes.arrayOf(\n          PropTypes.shape({\n            _id: PropTypes.string.isRequired,\n            name: PropTypes.string.isRequired,\n            email: PropTypes.string.isRequired,\n          })\n        ).isRequired,\n      }),\n    })\n  ),\n  changeCurrentChat: PropTypes.func.isRequired,\n}\n\nexport { ChatList }\nexport default connect(mapStateToProps, mapDispatchToProps)(ChatList)\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nclass UserFrame extends React.Component {\n  onUserClick = () => {\n    const { user } = this.props\n\n    this.props.onUserClick(user)\n  }\n\n  render() {\n    const { user } = this.props\n\n    return (\n      <div className=\"selected-item\" onClick={this.onUserClick}>\n        <p>{user.name}</p>\n        <p>{user.email}</p>\n      </div>\n    )\n  }\n}\n\nUserFrame.propTypes = {\n  chat: PropTypes.exact({\n    _id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    email: PropTypes.string.isRequired,\n  }),\n  onSelectUser: PropTypes.func,\n}\n\nexport { UserFrame }\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nclass UserSeekForm extends React.Component {\n  state = {\n    userSeekData: '',\n  }\n\n  onSubmit = eventArg => {\n    eventArg.preventDefault()\n\n    this.props.onSubmitUserSeekData(this.state.userSeekData)\n\n    this.setState({\n      searchQueryString: '',\n    })\n  }\n\n  updateSearchQueryString = eventArg => {\n    this.setState({\n      userSeekData: eventArg.target.value,\n    })\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.onSubmit}>\n        <h1>Search for a new member</h1>\n        <label>Enter email</label>\n        <input\n          name=\"userEmail\"\n          placeholder=\"User email\"\n          type=\"text\"\n          value={this.state.userSeekData}\n          onChange={this.updateSearchQueryString}\n        />\n        <button type=\"submit\">Find users</button>\n      </form>\n    )\n  }\n}\n\nUserSeekForm.propTypes = {\n  onSubmitUserSeekData: PropTypes.func.isRequired,\n}\n\nexport { UserSeekForm }\n","import React from 'react'\nimport { UserFrame } from './UserFrame'\nimport { UserSeekForm } from './UserSeekForm'\nimport PropTypes from 'prop-types'\n\nclass AddToChatNewUserWindow extends React.Component {\n  onSubmitUserSeekData = userSeekData => {\n    this.props.findUsers(userSeekData)\n  }\n\n  renderUsersList = () => {\n    const { usersList, onUserClick } = this.props\n\n    if (usersList && usersList.length) {\n      return usersList.map(function(item) {\n        return (\n          <UserFrame onUserClick={onUserClick} key={item._id} user={item} />\n        )\n      })\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"cover-div\">\n        <div className=\"modal-window\">\n          <UserSeekForm onSubmitUserSeekData={this.onSubmitUserSeekData} />\n          {this.renderUsersList()}\n          <button onClick={this.props.onCancelClick}>Cancel</button>\n        </div>\n      </div>\n    )\n  }\n}\n\nAddToChatNewUserWindow.propTypes = {\n  usersList: PropTypes.arrayOf(\n    PropTypes.shape({\n      user: PropTypes.exact({\n        _id: PropTypes.number.isRequired,\n        name: PropTypes.string.isRequired,\n        email: PropTypes.string.isRequired,\n      }),\n    })\n  ),\n  findUsers: PropTypes.func.isRequired,\n  onUserClick: PropTypes.func.isRequired,\n  cancelUserAdding: PropTypes.func.isRequired,\n}\n\nexport { AddToChatNewUserWindow }\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nclass SpecialMessagesPreprocessorMenu extends React.Component {\n  state = {\n    file: null,\n    filePath: '',\n  }\n\n  onSubmit = event => {\n    const { file } = this.state\n    const { onSubmit } = this.props\n\n    event.preventDefault()\n\n    if (file) {\n      onSubmit(file)\n    }\n  }\n\n  updateMessagesPreprocessorFile = eventArg => {\n    this.setState({\n      file: eventArg.target.files[0],\n      filePath: eventArg.target.value,\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"cover-div\">\n        <div className=\"modal-window\">\n          <form onSubmit={this.onSubmit}>\n            <h4>+Chat</h4>\n            <input\n              name=\"messagesPreprocessorFile\"\n              type=\"file\"\n              value={this.state.filePath}\n              onChange={this.updateMessagesPreprocessorFile}\n            />\n            <button type=\"submit\">Add special messages preprocessor</button>\n            <button onClick={this.props.onCancelClick}>Cancel</button>\n          </form>\n        </div>\n      </div>\n    )\n  }\n}\n\nSpecialMessagesPreprocessorMenu.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n  onCancelClick: PropTypes.string,\n}\n\nexport { SpecialMessagesPreprocessorMenu }\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport { AddToChatNewUserWindow } from '../components/AddToChatNewUserWindow'\nimport { SpecialMessagesPreprocessorMenu } from '../components/SpecialMessagesPreprocessorMenu'\nimport {\n  findUsers,\n  addNewUserToCurrentChat,\n  addNewSpecialMessagesPreprocessor,\n} from '../actions/chatSettingsActions'\nimport PropTypes from 'prop-types'\n\nclass CurrentChatSettings extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      showAddedUserMenu: false,\n      showSpecialMessagesPreprocessorMenu: false,\n    }\n  }\n\n  onAddUserButtonClick = () => {\n    this.setState({\n      showAddedUserMenu: true,\n    })\n  }\n\n  onAddSpecialMessagesPreprocessorButtonClick = () => {\n    this.setState({\n      showSpecialMessagesPreprocessorMenu: true,\n    })\n  }\n\n  addNewUserToCurrentChat = user => {\n    this.cancelUserAdding()\n    this.props.addNewUserToCurrentChat(user)\n  }\n\n  cancelUserAdding = () => {\n    this.setState({\n      showAddedUserMenu: false,\n    })\n  }\n\n  addNewSpecialMessagesPreprocessor = preprocessorFunctionString => {\n    this.cancelSpecialMessagesPreprocessorAdding()\n    this.props.addNewSpecialMessagesPreprocessor(preprocessorFunctionString)\n  }\n\n  cancelSpecialMessagesPreprocessorAdding = () => {\n    this.setState({\n      showSpecialMessagesPreprocessorMenu: false,\n    })\n  }\n\n  renderAddedUserWindow = () => {\n    const {\n      showAddedUserMenu,\n      showSpecialMessagesPreprocessorMenu,\n    } = this.state\n    const { currentChat, findUsers, usersList } = this.props\n\n    if (showAddedUserMenu) {\n      return (\n        <AddToChatNewUserWindow\n          findUsers={findUsers}\n          usersList={usersList}\n          onUserClick={this.addNewUserToCurrentChat}\n          onCancelClick={this.cancelUserAdding}\n        />\n      )\n    }\n\n    if (showSpecialMessagesPreprocessorMenu) {\n      return (\n        <SpecialMessagesPreprocessorMenu\n          currentChat={currentChat}\n          onSubmit={this.addNewSpecialMessagesPreprocessor}\n          onCancelClick={this.cancelSpecialMessagesPreprocessorAdding}\n        />\n      )\n    }\n\n    if (currentChat._id) {\n      return (\n        <React.Fragment>\n          <button onClick={this.onAddUserButtonClick}>\n            Add new user to chat\n          </button>\n          <button onClick={this.onAddSpecialMessagesPreprocessorButtonClick}>\n            Add special messages preprocessor\n          </button>\n        </React.Fragment>\n      )\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <span>Chat: {this.props.currentChat.name}</span>\n        {this.renderAddedUserWindow()}\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    currentChat: state.currentChat,\n    usersList: state.usersList,\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    findUsers: userSeekData => dispatch(findUsers(userSeekData)),\n    addNewUserToCurrentChat: user => dispatch(addNewUserToCurrentChat(user)),\n    addNewSpecialMessagesPreprocessor: file =>\n      dispatch(addNewSpecialMessagesPreprocessor(file)),\n  }\n}\n\nCurrentChatSettings.propTypes = {\n  usersList: PropTypes.arrayOf(\n    PropTypes.shape({\n      user: PropTypes.exact({\n        _id: PropTypes.number.isRequired,\n        name: PropTypes.string.isRequired,\n        email: PropTypes.string.isRequired,\n      }),\n    })\n  ),\n  currentChat: PropTypes.exact({\n    _id: PropTypes.string,\n    name: PropTypes.string,\n    users: PropTypes.arrayOf(\n      PropTypes.shape({\n        _id: PropTypes.string.isRequired,\n        name: PropTypes.string.isRequired,\n        email: PropTypes.string.isRequired,\n      })\n    ),\n    forwardPreprocessorFunction: PropTypes.func,\n    backwardPreprocessorFunction: PropTypes.func,\n  }),\n  findUsers: PropTypes.func.isRequired,\n  addNewUserToCurrentChat: PropTypes.func.isRequired,\n}\n\nexport { CurrentChatSettings }\nexport default connect(mapStateToProps, mapDispatchToProps)(CurrentChatSettings)\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nclass AuthenticationForm extends React.Component {\n  state = {\n    email: '',\n    password: '',\n  }\n\n  onSubmit = event => {\n    event.preventDefault()\n\n    this.props.onSubmit(this.state.email, this.state.password)\n\n    this.setState({\n      email: '',\n      password: '',\n    })\n  }\n\n  updateUserEmailValue = eventArg => {\n    this.setState({\n      email: eventArg.target.value,\n    })\n  }\n\n  updateUserPasswordValue = eventArg => {\n    this.setState({\n      password: eventArg.target.value,\n    })\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.onSubmit} className=\"reg-auth-form\">\n        <h3>Login</h3>\n        <label>User email</label>\n        <input\n          name=\"userEmail\"\n          placeholder=\"User email\"\n          type=\"text\"\n          value={this.state.email}\n          onChange={this.updateUserEmailValue}\n        />\n        <br />\n        <label>User password</label>\n        <input\n          name=\"userPassword\"\n          placeholder=\"User password\"\n          type=\"text\"\n          value={this.state.password}\n          onChange={this.updateUserPasswordValue}\n        />\n        <br />\n        <button type=\"submit\">Submit</button>\n      </form>\n    )\n  }\n}\n\nAuthenticationForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n}\n\nexport { AuthenticationForm }\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nclass RegistrationForm extends React.Component {\n  state = {\n    email: '',\n    name: '',\n    password: '',\n  }\n\n  onSubmit = eventArg => {\n    eventArg.preventDefault()\n\n    const { email, name, password } = this.state\n\n    const user = {\n      email,\n      name,\n      password,\n    }\n\n    this.props.onSubmit(user)\n\n    this.setState({\n      email: '',\n      name: '',\n      password: '',\n    })\n  }\n\n  updateUserEmailValue = eventArg => {\n    this.setState({\n      email: eventArg.target.value,\n    })\n  }\n\n  updateUserNameValue = eventArg => {\n    this.setState({\n      name: eventArg.target.value,\n    })\n  }\n\n  updateUserPasswordValue = eventArg => {\n    this.setState({\n      password: eventArg.target.value,\n    })\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.onSubmit} className=\"reg-auth-form\">\n        <h3>New user registration</h3>\n        <label>User email</label>\n        <input\n          name=\"userEmail\"\n          placeholder=\"User email\"\n          type=\"text\"\n          value={this.state.email}\n          onChange={this.updateUserEmailValue}\n        />\n        <br />\n        <label>User name</label>\n        <input\n          name=\"userName\"\n          placeholder=\"User name\"\n          type=\"text\"\n          value={this.state.name}\n          onChange={this.updateUserNameValue}\n        />\n        <br />\n        <label>User password</label>\n        <input\n          name=\"userPassword\"\n          placeholder=\"User password\"\n          type=\"text\"\n          value={this.state.password}\n          onChange={this.updateUserPasswordValue}\n        />\n        <br />\n        <button type=\"submit\">Send new user registration data</button>\n      </form>\n    )\n  }\n}\n\nRegistrationForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n}\n\nexport { RegistrationForm }\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nfunction SettingsPanel(props) {\n  return (\n    <div>\n      <button onClick={props.onSignOut}>Sign out</button>\n      <span>{props.currentUserName}</span>\n    </div>\n  )\n}\n\nSettingsPanel.propTypes = {\n  onSignOut: PropTypes.func.isRequired,\n  currentUserName: PropTypes.string,\n}\n\nexport { SettingsPanel }\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nfunction ErrorWindow(props) {\n  const { status, badStatusText, message } = props.lastError\n\n  let statusParagraph, badStatusTextParagraph, messageParagraph\n\n  if (status) {\n    statusParagraph = <p>Status: {status}</p>\n  }\n\n  if (status) {\n    badStatusTextParagraph = <p>Status text: {badStatusText}</p>\n  }\n\n  if (status) {\n    messageParagraph = <p>Message: {message}</p>\n  }\n\n  return (\n    <div className=\"moda-window\">\n      <div>\n        <h4>Error</h4>\n      </div>\n      <div>\n        {statusParagraph}\n        {badStatusTextParagraph}\n        {messageParagraph}\n      </div>\n      <button onClick={props.onOk}>Ok</button>\n    </div>\n  )\n}\n\nErrorWindow.propTypes = {\n  lastError: PropTypes.exact({\n    status: PropTypes.number,\n    badStatusText: PropTypes.string,\n    message: PropTypes.string,\n  }),\n}\n\nexport { ErrorWindow }\n","import React from 'react'\nimport { NewChatForm } from '../components/NewChatForm'\nimport MessageList from './MessageList'\nimport ChatList from './ChatList'\nimport CurrentChatSettings from './CurrentChatSettings'\nimport { AuthenticationForm } from '../components/AuthenticationForm'\nimport { RegistrationForm } from '../components/RegistrationForm'\nimport { SettingsPanel } from '../components/SettingsPanel'\nimport { ErrorWindow } from '../components/ErrorWindow'\nimport { connect } from 'react-redux'\nimport { encryptAndSendNewMessage } from '../actions/messageListActions'\nimport {\n  checkIsUserAuthenticated,\n  submitUserEmailAndPassword,\n  submitNewUser,\n  createNewChat,\n  resetAuthenticationResult,\n  clearLastError,\n} from '../actions/chatSettingsActions'\nimport './App.sass'\n\nclass App extends React.Component {\n  componentDidMount() {\n    this.props.checkIsUserAuthenticated()\n  }\n\n  renderChatListNewChatForm() {\n    if (this.props.currentUser._id) {\n      return (\n        <div>\n          <ChatList />\n          <NewChatForm\n            onSubmitNewChat={this.props.createNewChat}\n            currentUserId={this.props.currentUser._id}\n          />\n        </div>\n      )\n    }\n  }\n\n  renderMessageList() {\n    if (!this.props.currentUser._id) return\n    if (!this.props.currentChat._id) return\n\n    return <MessageList sendNewMessage={this.props.sendNewMessage} />\n  }\n\n  renderErrorWindow() {\n    if (!this.props.lastError) return\n\n    return (\n      <div className=\"cover-div\">\n        <ErrorWindow\n          className=\"modal-window\"\n          onOk={this.props.clearLastError}\n          lastError={this.props.lastError}\n        />\n      </div>\n    )\n  }\n\n  onSignOut = () => {\n    this.props.resetAuthenticationResult()\n  }\n\n  renderMainContent() {\n    if (this.props.isUserAuthenticated) {\n      return (\n        <React.Fragment>\n          <div className=\"main-panel\">\n            <div className=\"user-chats-panel\">\n              {this.renderChatListNewChatForm()}\n            </div>\n            <div className=\"current-chat-panel\">{this.renderMessageList()}</div>\n          </div>\n          <div className=\"top-panel\">\n            <SettingsPanel\n              className=\"settings-panel\"\n              onSignOut={this.onSignOut}\n              currentUserName={this.props.currentUser.name}\n            />\n            <CurrentChatSettings className=\"current-chat-settings\" />\n          </div>\n        </React.Fragment>\n      )\n    }\n\n    return (\n      <React.Fragment>\n        {this.renderErrorWindow()}\n        <div className=\"reg-auth-forms-panel\">\n          <RegistrationForm onSubmit={this.props.submitNewUser} />\n          <AuthenticationForm\n            onSubmit={this.props.submitUserEmailAndPassword}\n          />\n        </div>\n      </React.Fragment>\n    )\n  }\n\n  render() {\n    return <div className=\"app-panel\">{this.renderMainContent()}</div>\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    currentUser: state.currentUser,\n    currentChat: state.currentChat,\n    wasMessageReceived: state.wasMessageReceived,\n    isUserAuthenticated: state.isUserAuthenticated,\n    lastError: state.lastError,\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    checkIsUserAuthenticated: () => dispatch(checkIsUserAuthenticated()),\n    createNewChat: (chatName, usersIds) =>\n      dispatch(createNewChat(chatName, usersIds)),\n    sendNewMessage: message => dispatch(encryptAndSendNewMessage(message)),\n    submitUserEmailAndPassword: (userEmail, userPassword) =>\n      dispatch(submitUserEmailAndPassword(userEmail, userPassword)),\n    submitNewUser: user => dispatch(submitNewUser(user)),\n    resetAuthenticationResult: () => dispatch(resetAuthenticationResult()),\n    clearLastError: () => dispatch(clearLastError()),\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport configureStore from './store/configureStore'\nimport './index.css'\nimport App from './containers/App'\nimport * as serviceWorker from './serviceWorker'\n\nconst store = configureStore()\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","import { createStore, applyMiddleware } from 'redux'\nimport thunk from 'redux-thunk'\nimport rootReducer from '../reducers'\nimport wsMiddleware from '../middleware/webSocketMiddleware'\n\nexport default function configureStore(initialState) {\n  return createStore(rootReducer, applyMiddleware(thunk, wsMiddleware))\n}\n"],"sourceRoot":""}