{"version":3,"sources":["actions/chatSettingsActions.js","actions/helper.js","applicationSettings.js","actions/messageListActions.js","actions/webSocketActions.js","resources/BlueWaitingIcon.png","resources/Whisper.png","reducers/index.js","reducers/messageListData.js","reducers/chatSettings.js","middleware/webSocketMiddleware.js","components/ModalWindow/asModalWindow.js","components/InputField/InputField.js","components/AuthenticationAndRegistrationForm/AuthenticationAndRegistrationForm.js","containers/AuthenticationAndRegistrationWindow/AuthenticationAndRegistrationWindow.js","containers/SettingsPanel/SettingsPanel.js","components/UserFrame/UserFrame.js","components/AddToChatNewUserWindow/__SeekForm/AddToChatNewUserWindow-SeekForm.js","components/AddToChatNewUserWindow/AddToChatNewUserWindow.js","components/FileInput/FileInput.js","components/SpecialMessagesPreprocessorMenu/__AddFileForm/SpecialMessagesPreprocessorMenu-AddFileForm.js","components/SpecialMessagesPreprocessorMenu/SpecialMessagesPreprocessorMenu.js","containers/CurrentChatSettings/CurrentChatSettings.js","containers/AppPanel/__TopPanel/AppPanel-TopPanel.js","components/helper.js","components/MessageFrame/__MessageTimestamp/MessageFrame-MessageTimestamp.js","components/MessageFrame/__AuthorNameLabel/MessageFrame-AuthorNameLabel.js","components/MessageFrame/__MessageTextField/MessageFrame-MessageTextField.js","components/MessageFrame/MessageFrame.js","containers/MessageList/__ScrollDownButton/MessageList-ScrollDownButton.js","containers/MessageList/MessageList.js","components/SimpleDataForm/SimpleDataForm.js","containers/CurrentChatPanel/CurrentChatPanel.js","containers/ChatList/__ChatFrame/ChatList-ChatFrame.js","containers/ChatList/ChatList.js","containers/UserChatsPanel/UserChatsPanel.js","containers/AppPanel/__MainPanel/AppPanel-MainPanel.js","containers/AppPanel/AppPanel.js","containers/App.js","components/ErrorWindow/ErrorWindow.js","serviceWorker.js","index.js","store/configureStore.js"],"names":["CHANGE_CURRENT_USER","CHANGE_CURRENT_CHAT","REFRESH_CHATS_LIST","SET_AUTHENTICATION_RESULT","SET_LAST_ERROR","FILL_FOUND_USERS_LIST","CLEAR_LAST_ERROR","ADD_NEW_SPECIAL_MESSAGES_PREPROCESSOR_FUNCTION","changeCurrentUser","user","type","payload","changeCurrentChat","chat","refreshChatsList","chats","setAuthenticationResult","result","handleServerError","serverErrorData","dispatch","status","resetAuthenticationResult","setLastError","errorData","fillFoundUsersList","usersList","localStorage","removeItem","clearLastError","addNewSpecialMessagesPreprocessorFunction","forwardPreprocessorFunction","backwardPreprocessorFunction","checkIsUserAuthenticated","a","userJson","JSON","parse","fetchChatsList","_id","addNewSpecialMessagesPreprocessor","file","getState","readTextFile","preprocessorString","isStringNullOrEmpty","message","eval","createTextMutators","mutators","forward","backward","currentChat","setItem","tryGetPreprocessorAnd–°hangeCurrentChat","getItem","clearMessages","err","createNewChat","name","users","getUserToken","token","newChatData","fetch","serverLocation","submitNewChatPath","method","headers","createHttpHeadersWithToken","body","stringify","response","data","checkResponseAndCreateErrorIfBadStatus","json","currentUser","console","log","userId","chatsListGetPath","badStatusText","submitUserEmailAndPassword","email","password","validateEmail","userAuthenticationData","submitUserEmailAndPasswordPath","httpHeadersWithoutToken","submitNewUser","submitNewUserPath","findUsers","userSeekData","searchUsersPath","addNewUserToCurrentChat","addNewUserToChatPath","chatId","newUserId","Accept","Authorization","ok","statusText","test","Promise","resolve","reject","reader","FileReader","onload","onerror","readAsText","str","trim","convertMessages","messages","convertor","map","item","text","createGuid","replace","c","r","Math","random","toString","toUpperCase","wsServerLocation","messageSendPath","messageGetPath","newMessageGetPath","fetchMessagesCount","statusRenderingDelay","ADD_NEW_MESSAGE","MESSAGE_WAS_RECEIVED","REFRESH_MESSAGES_LIST","UNSHIFT_PREVIOUS_MESSAGES","PUSH_NEW_MESSAGES","CLEAR_MESSAGES","ADD_MSSAGE_TO_WAITING_LIST","REMOVE_MESSAGES_FROM_WAITING_LIST","messageWasReceived","bool","encryptAndSendNewMessage","processedText","sourceText","clientSideId","time","Date","getTime","authorEmail","authorName","addMessageToWaitingList","wasMessageReceived","sendNewMessage","fetchMessagesList","oldestMessageTime","fetchNewMessages","newestMessageTime","applyBackwardPreprocessorFunctionAndPushMessage","pushNewMessages","removeMessagesFromWaitingList","subscribeForNewMessages","wsConnect","unsubscribeForNewMessages","wsDisconnect","WS_CONNECT","WS_DISCONNECT","host","wsConnected","wsDisconnected","module","exports","combineReducers","state","action","previousMessages","newMessages","messagesWaitingList","filter","includes","chatsList","isUserAuthenticated","lastError","webSocketMiddleware","socket","store","next","close","WebSocket","onmessage","event","actionType","onMessage","onclose","onClose","onopen","target","url","onOpen","asModalWindow","Component","props","className","InputField","caption","placeholder","value","onChange","AuthenticationAndRegistrationForm","isRegistrationMode","onSubmit","eventArg","preventDefault","onAuthenticationSubmit","onRegistrationSubmit","setState","updateUserEmailValue","updateUserNameValue","updateUserPasswordValue","changeMode","checked","renderHeader","headerText","renderLabel","align","src","require","renderUserNameInputField","renderSubmitButton","buttonText","onClick","this","React","AuthenticationAndRegistrationWindow","componentDidUpdate","history","push","AuthenticationAndRegistrationWindowWithRouter","withRouter","connect","userEmail","userPassword","onSignOut","SettingsPanel","UserFrame","onUserClick","SeekForm","onSubmitUserSeekData","searchQueryString","updateSearchQueryString","AddToChatNewUserWindow","renderUsersList","length","key","onCancelClick","FileInput","filePath","updateFile","files","renderFileName","fileName","AddFileForm","onSubmitFile","updateMessagesPreprocessorFile","SpecialMessagesPreprocessorMenu","AddToChatNewUserModalWindow","SpecialMessagesPreprocessorModalWindow","CurrentChatSettings","onAddUserButtonClick","showAddedUserMenu","onAddSpecialMessagesPreprocessorButtonClick","showSpecialMessagesPreprocessorMenu","cancelUserAdding","preprocessorFunctionString","cancelSpecialMessagesPreprocessorAdding","renderAddedUserWindow","Fragment","TopPanel","addLeadZero","number","MessageTimestamp","date","hours","getHours","minutes","getMinutes","day","getDate","month","getMonth","year","getFullYear","AuthorNameLabel","MessageTextField","MessageFrame","componentDidMount","hasServerReceivedMessage","statusRenderingDelayId","setTimeout","enableStatusRendering","isStatusRenderingEnabled","renderAuthorName","currentUserEmail","clearInterval","waitingIcon","messageFrameClass","renderMessageStatus","ScrollDownButton","decodedString","DOMParser","parseFromString","textContent","onScrollDownClick","MessageList","fetchMessages","current","messageListRef","reloadMessagesList","messagesLength","previousMessagesLength","suspendMessagesFetching","scrollTop","scrollDownIfNeed","needScrollDown","fetchMessagesForced","lastMessageIndex","scrollDown","scrollHeight","onScroll","clientHeight","showScrollDownButton","renderMessageList","index","renderScrollDownButton","renderChatNameCaption","chatName","createRef","enableScrollDown","offsetWidth","clientWidth","waitingMessages","ref","SimpleDataForm","newData","onSubmitNewData","updateInputValue","buttonCaption","CurrentChatPanel","ChatFrame","onSelectChat","ChatList","renderChatList","UserChatsPanel","onSubmitNewChat","usersIds","MainPanel","AppPanel","AppPanelWithRouter","ErrorModalWindow","statusParagraph","badStatusTextParagraph","messageParagraph","onOk","App","exact","path","render","component","renderErrorWindow","renderMainContent","AppWithRouter","Boolean","window","location","hostname","match","createStore","rootReducer","applyMiddleware","thunk","wsMiddleware","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.53527991.chunk.js","sourcesContent":["import {\n  serverLocation,\n  submitNewChatPath,\n  chatsListGetPath,\n  submitUserEmailAndPasswordPath,\n  submitNewUserPath,\n  searchUsersPath,\n  addNewUserToChatPath,\n} from '../applicationSettings'\n\nimport { clearMessages } from './messageListActions'\n\nimport {\n  createHttpHeadersWithToken,\n  httpHeadersWithoutToken,\n  checkResponseAndCreateErrorIfBadStatus,\n  validateEmail,\n  readTextFile,\n  isStringNullOrEmpty,\n  getUserToken,\n} from './helper'\n\nexport const CHANGE_CURRENT_USER = 'CHANGE_CURRENT_USER'\nexport const CHANGE_CURRENT_CHAT = 'CHANGE_CURRENT_CHAT'\nexport const REFRESH_CHATS_LIST = 'REFRESH_CHATS_LIST'\nexport const SET_AUTHENTICATION_RESULT = 'SET_AUTHENTICATION_RESULT'\nexport const SET_LAST_ERROR = 'SET_LAST_ERROR'\nexport const FILL_FOUND_USERS_LIST = 'FILL_FOUND_USERS_LIST'\nexport const CLEAR_LAST_ERROR = 'CLEAR_LAST_ERROR'\nexport const ADD_NEW_SPECIAL_MESSAGES_PREPROCESSOR_FUNCTION =\n  'ADD_NEW_SPECIAL_MESSAGES_PREPROCESSOR_FUNCTION'\n\nexport function changeCurrentUser(user) {\n  return {\n    type: CHANGE_CURRENT_USER,\n    payload: user,\n  }\n}\n\nexport function changeCurrentChat(chat) {\n  return {\n    type: CHANGE_CURRENT_CHAT,\n    payload: chat,\n  }\n}\n\nexport function refreshChatsList(chats) {\n  return {\n    type: REFRESH_CHATS_LIST,\n    payload: chats,\n  }\n}\n\nexport function setAuthenticationResult(result) {\n  return {\n    type: SET_AUTHENTICATION_RESULT,\n    payload: result,\n  }\n}\n\nexport function handleServerError(serverErrorData) {\n  return dispatch => {\n    if (serverErrorData.status === 401) {\n      dispatch(resetAuthenticationResult())\n    }\n\n    dispatch(setLastError(serverErrorData))\n  }\n}\n\nexport function setLastError(errorData) {\n  return {\n    type: SET_LAST_ERROR,\n    payload: errorData,\n  }\n}\n\nexport function fillFoundUsersList(usersList) {\n  return {\n    type: FILL_FOUND_USERS_LIST,\n    payload: usersList,\n  }\n}\n\nexport function resetAuthenticationResult() {\n  return dispatch => {\n    localStorage.removeItem('userJson')\n    dispatch(setAuthenticationResult(false))\n  }\n}\n\nexport function clearLastError() {\n  return {\n    type: CLEAR_LAST_ERROR,\n  }\n}\n\nexport function addNewSpecialMessagesPreprocessorFunction(\n  forwardPreprocessorFunction,\n  backwardPreprocessorFunction\n) {\n  return {\n    type: ADD_NEW_SPECIAL_MESSAGES_PREPROCESSOR_FUNCTION,\n    payload: {\n      forwardPreprocessorFunction,\n      backwardPreprocessorFunction,\n    },\n  }\n}\n\nexport function checkIsUserAuthenticated() {\n  return async dispatch => {\n    const { userJson } = localStorage\n    let user\n    try {\n      if (!userJson) return\n      user = await JSON.parse(userJson)\n    } catch (error) {\n      localStorage.removeItem('userJson')\n      return\n    }\n\n    dispatch(changeCurrentUser(user))\n    dispatch(setAuthenticationResult(true))\n    dispatch(fetchChatsList(user._id))\n  }\n}\n\nexport function addNewSpecialMessagesPreprocessor(file) {\n  return async (dispatch, getState) => {\n    if (!file) return\n\n    let preprocessorString = await readTextFile(file)\n\n    if (isStringNullOrEmpty(preprocessorString)) {\n      dispatch(setLastError({ message: 'File is empty or has wrong format' }))\n      return\n    }\n\n    let createTextMutators\n\n    try {\n      eval(preprocessorString)\n    } catch (err) {\n      dispatch(setLastError({ message: 'File has wrong format' }))\n      return\n    }\n\n    if (typeof createTextMutators !== 'function') {\n      dispatch(setLastError({ message: 'File has wrong format' }))\n      return\n    }\n\n    const mutators = createTextMutators()\n\n    if (!mutators) {\n      dispatch(setLastError({ message: 'File has wrong format' }))\n      return\n    }\n\n    const { forward, backward } = mutators\n    if (typeof forward !== 'function' || typeof backward !== 'function') {\n      dispatch(setLastError({ message: 'File has wrong format' }))\n      return\n    }\n\n    const { currentChat } = getState()\n\n    localStorage.setItem(currentChat._id, preprocessorString)\n\n    dispatch(addNewSpecialMessagesPreprocessorFunction(forward, backward))\n  }\n}\n\nexport function tryGetPreprocessorAnd–°hangeCurrentChat(chat) {\n  return dispatch => {\n    const preprocessorString = localStorage.getItem(chat._id)\n\n    dispatch(changeCurrentChat(chat))\n    dispatch(clearMessages())\n\n    let createTextMutators\n\n    if (preprocessorString) {\n      try {\n        eval(preprocessorString)\n      } catch (err) {\n        return\n      }\n    }\n\n    if (typeof createTextMutators !== 'function') {\n      return\n    }\n\n    const mutators = createTextMutators()\n\n    if (!mutators) {\n      return\n    }\n\n    const { forward, backward } = mutators\n\n    if (typeof forward !== 'function' || typeof backward !== 'function') {\n      return\n    }\n\n    dispatch(addNewSpecialMessagesPreprocessorFunction(forward, backward))\n  }\n}\n\nexport function createNewChat(name, users) {\n  return async (dispatch, getState) => {\n    try {\n      const token = await getUserToken()\n\n      if (!token) return\n\n      const newChatData = {\n        chat: {\n          name,\n          users,\n        },\n      }\n\n      const response = await fetch(serverLocation + submitNewChatPath, {\n        method: 'POST',\n        headers: createHttpHeadersWithToken(token),\n        body: JSON.stringify(newChatData),\n      })\n\n      let data = checkResponseAndCreateErrorIfBadStatus(response)\n\n      if (!data) {\n        data = await response.json()\n      }\n\n      if (data.status) {\n        dispatch(handleServerError(data))\n      } else {\n        const { currentUser } = getState()\n\n        dispatch(tryGetPreprocessorAnd–°hangeCurrentChat(data.chat))\n        dispatch(fetchChatsList(currentUser._id))\n      }\n    } catch (error) {\n      console.log('error', error)\n    }\n  }\n}\n\nexport function fetchChatsList(userId) {\n  return async dispatch => {\n    try {\n      const token = await getUserToken()\n\n      if (!token) return\n\n      const response = await fetch(\n        `${serverLocation}${chatsListGetPath}?user_id=${userId}`,\n        {\n          method: 'GET',\n          headers: createHttpHeadersWithToken(token),\n        }\n      )\n\n      let data = checkResponseAndCreateErrorIfBadStatus(response)\n\n      if (!data) {\n        data = await response.json()\n      }\n\n      if (data.badStatusText) {\n        dispatch(handleServerError(data))\n        localStorage.removeItem('token')\n        localStorage.removeItem('userJson')\n      } else {\n        dispatch(refreshChatsList(data))\n      }\n    } catch (error) {\n      console.log('error', error)\n    }\n  }\n}\n\nexport function submitUserEmailAndPassword(email, password) {\n  return async dispatch => {\n    try {\n      if (!validateEmail(email)) {\n        dispatch(\n          setLastError({\n            message: `Bad email: ${email}`,\n          })\n        )\n        return\n      }\n\n      const userAuthenticationData = {\n        user: {\n          email,\n          name: '',\n          password,\n        },\n      }\n\n      const response = await fetch(\n        serverLocation + submitUserEmailAndPasswordPath,\n        {\n          method: 'POST',\n          headers: httpHeadersWithoutToken,\n          body: JSON.stringify(userAuthenticationData),\n        }\n      )\n\n      let data = checkResponseAndCreateErrorIfBadStatus(response)\n\n      if (!data) {\n        data = await response.json()\n      }\n\n      if (data.badStatusText) {\n        dispatch(handleServerError(data))\n        dispatch(setAuthenticationResult(false))\n      } else {\n        const { _id } = data.user\n\n        localStorage.setItem('userJson', JSON.stringify(data.user))\n\n        dispatch(changeCurrentUser(data.user))\n        dispatch(setAuthenticationResult(true))\n        dispatch(fetchChatsList(_id))\n      }\n    } catch (error) {\n      console.log('error', error)\n    }\n  }\n}\n\nexport function submitNewUser(user) {\n  return async dispatch => {\n    try {\n      if (!validateEmail(user.email)) {\n        dispatch(\n          setLastError({\n            message: `Bad email: ${user.email}`,\n          })\n        )\n\n        return\n      }\n\n      const response = await fetch(serverLocation + submitNewUserPath, {\n        method: 'POST',\n        headers: httpHeadersWithoutToken,\n        body: JSON.stringify({ user }),\n      })\n\n      let data = checkResponseAndCreateErrorIfBadStatus(response)\n\n      if (!data) {\n        data = await response.json()\n      }\n\n      if (data.badStatusText) {\n        dispatch(handleServerError(data))\n        dispatch(setAuthenticationResult(false))\n      } else {\n        const { _id } = data.user\n\n        localStorage.setItem('userJson', JSON.stringify(data.user))\n\n        dispatch(changeCurrentUser(data.user))\n        dispatch(changeCurrentChat({}))\n        dispatch(setAuthenticationResult(true))\n        dispatch(fetchChatsList(_id))\n      }\n    } catch (error) {\n      console.log('error', error)\n    }\n  }\n}\n\nexport function findUsers(userSeekData) {\n  return async dispatch => {\n    try {\n      const token = await getUserToken()\n\n      if (!token) return\n\n      const response = await fetch(\n        `${serverLocation}${searchUsersPath}?user_seek_data=${userSeekData}`,\n        {\n          method: 'GET',\n          headers: createHttpHeadersWithToken(token),\n        }\n      )\n\n      let data = checkResponseAndCreateErrorIfBadStatus(response)\n\n      if (!data) {\n        data = await response.json()\n      }\n\n      if (data.badStatusText) {\n        dispatch(handleServerError(data))\n\n        localStorage.removeItem('token')\n        localStorage.removeItem('userJson')\n      } else {\n        dispatch(fillFoundUsersList(data))\n      }\n    } catch (error) {\n      console.log('error', error)\n    }\n  }\n}\n\nexport function addNewUserToCurrentChat(user) {\n  return async (dispatch, getState) => {\n    try {\n      const token = await getUserToken()\n\n      if (!token) return\n\n      const { currentChat } = getState()\n\n      const response = await fetch(serverLocation + addNewUserToChatPath, {\n        method: 'POST',\n        headers: createHttpHeadersWithToken(token),\n        body: JSON.stringify({\n          chatId: currentChat._id,\n          newUserId: user._id,\n        }),\n      })\n\n      let data = checkResponseAndCreateErrorIfBadStatus(response)\n\n      if (!data) {\n        data = await response.json()\n      }\n\n      if (data.badStatusText) {\n        dispatch(handleServerError(data))\n      } else {\n        dispatch(tryGetPreprocessorAnd–°hangeCurrentChat(data.chat))\n      }\n    } catch (error) {\n      console.log('error', error)\n    }\n  }\n}\n","export const httpHeadersWithoutToken = {\n  Accept: 'application/json',\n  'Content-Type': 'application/json',\n}\n\nexport function createHttpHeadersWithToken(token) {\n  return {\n    Accept: 'application/json',\n    'Content-Type': 'application/json',\n    Authorization: `Bearer ${token}`,\n  }\n}\n\nexport function checkResponseAndCreateErrorIfBadStatus(response) {\n  if (response.ok) {\n    return\n  } else {\n    const { status, statusText, message } = response\n\n    return {\n      status,\n      badStatusText: statusText,\n      message,\n    }\n  }\n}\n\nexport function validateEmail(email) {\n  const reg = /^([A-Za-z0-9_\\-\\.])+\\@([A-Za-z0-9_\\-\\.])+\\.([A-Za-z]{2,4})$/\n\n  return reg.test(email)\n}\n\nexport function readTextFile(file) {\n  return new Promise((resolve, reject) => {\n    var reader = new FileReader()\n    reader.onload = () => {\n      resolve(reader.result)\n    }\n    reader.onerror = reject\n    reader.readAsText(file)\n  })\n}\n\nexport function isStringNullOrEmpty(str) {\n  if (!str) return true\n\n  if (str.trim() === '') return true\n\n  return false\n}\n\nexport function convertMessages(messages, convertor) {\n  if (convertor) {\n    messages = messages.map(item => {\n      const text = convertor(item.text)\n      return { ...item, text }\n    })\n  }\n\n  return messages\n}\n\nexport async function getUserToken() {\n  const { userJson } = localStorage\n\n  if (!userJson) return null\n\n  const user = await JSON.parse(userJson)\n\n  if (!user) return null\n\n  return user.token ? user.token : null\n}\n\nexport function createGuid() {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n    var r = Math.random()*16|0, v = c == 'x' ? r : (r&0x3|0x8);\n    return v.toString(16);\n  }).toUpperCase();\n}\n","export const serverLocation = 'http://localhost:4000/'\nexport const wsServerLocation = 'ws://localhost:4000/'\n\nexport const messageSendPath = 'messages/new/'\nexport const messageGetPath = 'messages/listRequest/'\nexport const newMessageGetPath = 'messages/lastMessages/'\nexport const submitNewChatPath = 'chats/new/'\nexport const chatsListGetPath = 'chats/listRequest/'\nexport const submitUserEmailAndPasswordPath = 'users/login/'\nexport const submitNewUserPath = 'users/new/'\nexport const searchUsersPath = 'users/search/'\nexport const addNewUserToChatPath = 'chats/addNewUser/'\n\nexport const fetchMessagesCount = 15\nexport const updateInterval = 10000\nexport const statusRenderingDelay = 1000\n","import {\n  serverLocation,\n  wsServerLocation,\n  messageSendPath,\n  messageGetPath,\n  newMessageGetPath,\n  fetchMessagesCount,\n} from '../applicationSettings'\n\nimport { handleServerError } from './chatSettingsActions'\nimport { wsConnect, wsDisconnect } from './webSocketActions'\n\nimport {\n  createHttpHeadersWithToken,\n  checkResponseAndCreateErrorIfBadStatus,\n  convertMessages,\n  getUserToken,\n  createGuid,\n} from './helper'\n\nexport const ADD_NEW_MESSAGE = 'ADD_NEW_MESSAGE'\nexport const MESSAGE_WAS_RECEIVED = 'MESSAGE_WAS_RECEIVED'\nexport const REFRESH_MESSAGES_LIST = 'REFRESH_MESSAGES_LIST'\nexport const UNSHIFT_PREVIOUS_MESSAGES = 'UNSHIFT_PREVIOUS_MESSAGES'\nexport const PUSH_NEW_MESSAGES = 'PUSH_NEW_MESSAGES'\nexport const CLEAR_MESSAGES = 'CLEAR_MESSAGES'\nexport const ADD_MSSAGE_TO_WAITING_LIST = 'ADD_MSSAGE_TO_WAITING_LIST'\nexport const REMOVE_MESSAGES_FROM_WAITING_LIST = 'REMOVE_MESSAGES_FROM_WAITING_LIST'\n\nexport function clearMessages() {\n  return {\n    type: CLEAR_MESSAGES,\n  }\n}\n\nexport function addNewMessage(message) {\n  return {\n    type: ADD_NEW_MESSAGE,\n    payload: message,\n  }\n}\n\nexport function messageWasReceived(bool) {\n  return {\n    type: MESSAGE_WAS_RECEIVED,\n    payload: bool,\n  }\n}\n\nexport function refreshMessagesList(messages) {\n  return {\n    type: REFRESH_MESSAGES_LIST,\n    payload: messages,\n  }\n}\n\nexport function unshiftPreviousMessages(messages) {\n  return {\n    type: UNSHIFT_PREVIOUS_MESSAGES,\n    payload: messages,\n  }\n}\n\nexport function pushNewMessages(messages) {\n  return {\n    type: PUSH_NEW_MESSAGES,\n    payload: messages,\n  }\n}\n\nexport function encryptAndSendNewMessage(text) {\n  return (dispatch, getState) => {    \n    const { forwardPreprocessorFunction } = getState().currentChat\n\n    let processedText = text\n\n    if (forwardPreprocessorFunction) {\n      processedText = forwardPreprocessorFunction(text)\n    }\n\n    dispatch(sendNewMessage(processedText, text))\n  }\n}\n\nexport function addMessageToWaitingList(message) {\n  return {\n    type: ADD_MSSAGE_TO_WAITING_LIST,\n    payload: message,\n  }\n}\n\nexport function removeMessagesFromWaitingList(messages) {\n  return {\n    type: REMOVE_MESSAGES_FROM_WAITING_LIST,\n    payload: messages.map(message => {return message.clientSideId}),\n  }\n}\n\nexport function sendNewMessage(processedText, sourceText) {\n  return async (dispatch, getState) => {\n    try {\n      const token = await getUserToken()\n\n      if (!token) return\n\n      dispatch(messageWasReceived(false))\n\n      const clientSideId = createGuid()\n      const time = new Date().getTime()\n      const authorEmail = getState().currentUser.email\n      const authorName = getState().currentUser.name\n      const chatId = getState().currentChat._id\n\n      const message = {\n        _id: null,\n        clientSideId,\n        chatId,\n        time,\n        authorEmail,\n        authorName,\n        text: processedText,\n      }\n\n      dispatch(addMessageToWaitingList({\n        ...message,\n        text: sourceText,\n      }))\n\n      const response = await fetch(serverLocation + messageSendPath, {\n        method: 'POST',\n        headers: createHttpHeadersWithToken(token),\n        body: JSON.stringify(message),\n      })\n\n      let data = checkResponseAndCreateErrorIfBadStatus(response)\n\n      if (!data) {\n        data = await response.json()\n      }\n\n      if (data.status) {\n        dispatch(handleServerError(data))\n        message.wasMessageReceived = false\n        localStorage.removeItem('token')\n      } else {\n        message.wasMessageReceived = true\n        dispatch(messageWasReceived(true))\n      }\n    } catch (error) {\n      console.log('error', error)\n    }\n  }\n}\n\nexport function fetchMessagesList(chatId, oldestMessageTime) {\n  return async (dispatch, getState) => {\n    try {\n      const token = await getUserToken()\n\n      if (!token) return\n\n      const response = await fetch(\n        `${serverLocation}${messageGetPath}?chat_id=${chatId}&oldest_message_time=${oldestMessageTime}&fetch_messages_count=${fetchMessagesCount}`,\n        {\n          method: 'GET',\n          headers: createHttpHeadersWithToken(token),\n        }\n      )\n\n      let data = checkResponseAndCreateErrorIfBadStatus(response)\n\n      if (!data) {\n        data = await response.json()\n      }\n\n      if (data.badStatusText) {\n        dispatch(handleServerError(data))\n        localStorage.removeItem('token')\n      } else {\n        const { backwardPreprocessorFunction } = getState().currentChat\n        data = convertMessages(data, backwardPreprocessorFunction)\n        dispatch(unshiftPreviousMessages(data))\n      }\n    } catch (error) {\n      console.log('error', error)\n    }\n  }\n}\n\nexport function fetchNewMessages(chatId, newestMessageTime) {\n  return async (dispatch) => {\n    try {\n      const token = await getUserToken()\n\n      if (!token) return\n\n      const response = await fetch(\n        `${serverLocation}${newMessageGetPath}?chat_id=${chatId}&newest_message_time=${newestMessageTime}`,\n        {\n          method: 'GET',\n          headers: createHttpHeadersWithToken(token),\n        }\n      )\n\n      let data = checkResponseAndCreateErrorIfBadStatus(response)\n\n      if (!data) {\n        data = await response.json()\n      }\n\n      if (data.badStatusText) {\n        dispatch(handleServerError(data))\n        localStorage.removeItem('token')\n      } else {\n        dispatch(applyBackwardPreprocessorFunctionAndPushMessage(data))\n      }\n    } catch (error) {\n      console.log('error', error)\n    }\n  }\n}\n\nexport function applyBackwardPreprocessorFunctionAndPushMessage(messages) {\n  return (dispatch, getState) => {\n    const { backwardPreprocessorFunction } = getState().currentChat\n\n    if (backwardPreprocessorFunction) {\n      messages = convertMessages(messages, backwardPreprocessorFunction)\n    }\n\n    dispatch(pushNewMessages(messages))\n    dispatch(removeMessagesFromWaitingList(messages))\n  }\n}\n\nexport function subscribeForNewMessages(chatId) {\n  return dispatch => {\n    dispatch(wsConnect(`${wsServerLocation}${chatId}`))\n  }\n}\n\nexport function unsubscribeForNewMessages() {\n  return dispatch => {\n    dispatch(wsDisconnect())\n  }\n}\n","export const WS_CONNECT = 'WS_CONNECT'\nexport const WS_CONNECTING = 'WS_CONNECTING'\nexport const WS_CONNECTED = 'WS_CONNECTED'\nexport const WS_DISCONNECT = 'WS_DISCONNECT'\nexport const WS_DISCONNECTED = 'WS_DISCONNECTED'\n\nexport function wsConnect(host) {\n  return {\n    type: WS_CONNECT,\n    payload: host,\n  }\n}\n\nexport function wsConnecting() {\n  return {\n    type: WS_CONNECTING,\n  }\n}\n\nexport function wsConnected() {\n  return {\n    type: WS_CONNECTED,\n  }\n}\n\nexport function wsDisconnect() {\n  return {\n    type: WS_DISCONNECT,\n  }\n}\n\nexport function wsDisconnected() {\n  return {\n    type: WS_DISCONNECTED,\n  }\n}\n","module.exports = __webpack_public_path__ + \"static/media/BlueWaitingIcon.599230fc.png\";","module.exports = __webpack_public_path__ + \"static/media/Whisper.83cc1573.png\";","import { combineReducers } from 'redux'\n\nimport {\n  messages,\n  messagesWaitingList,\n  wasMessageReceived\n} from './messageListData'\n\nimport {\n  currentUser,\n  currentChat,\n  chatsList,\n  isUserAuthenticated,\n  lastError,\n  usersList,\n} from './chatSettings'\n\nexport default combineReducers({\n  messages,\n  wasMessageReceived,\n  messagesWaitingList,\n  currentUser,\n  currentChat,\n  chatsList,\n  isUserAuthenticated,\n  lastError,\n  usersList,\n})\n","import {\n  ADD_NEW_MESSAGE,\n  MESSAGE_WAS_RECEIVED,\n  REFRESH_MESSAGES_LIST,\n  UNSHIFT_PREVIOUS_MESSAGES,\n  PUSH_NEW_MESSAGES,\n  CLEAR_MESSAGES,\n  ADD_MSSAGE_TO_WAITING_LIST,\n  REMOVE_MESSAGES_FROM_WAITING_LIST,\n} from '../actions/messageListActions'\n\nexport function messages(state = [], action) {\n  switch (action.type) {\n    case CLEAR_MESSAGES:\n      return []\n    case ADD_NEW_MESSAGE:\n      return [...state, action.payload]\n    case REFRESH_MESSAGES_LIST:\n      return action.payload\n    case UNSHIFT_PREVIOUS_MESSAGES:\n      const previousMessages = action.payload\n      return [...previousMessages, ...state]\n    case PUSH_NEW_MESSAGES:\n      const newMessages = action.payload\n      return [...state, ...newMessages]\n    default:\n      return state\n  }\n}\n\nexport function messagesWaitingList(state = [], action) {\n  switch (action.type) {\n    case ADD_MSSAGE_TO_WAITING_LIST:\n      return [...state, action.payload]\n    case REMOVE_MESSAGES_FROM_WAITING_LIST:\n      return state.filter(message => !action.payload.includes(message.clientSideId))\n    default:\n      return state\n  }\n}\n\nexport function wasMessageReceived(state = true, action) {\n  switch (action.type) {\n    case MESSAGE_WAS_RECEIVED:\n      return action.payload\n    default:\n      return state\n  }\n}\n","import {\n  CHANGE_CURRENT_USER,\n  CHANGE_CURRENT_CHAT,\n  REFRESH_CHATS_LIST,\n  SET_AUTHENTICATION_RESULT,\n  SET_LAST_ERROR,\n  FILL_FOUND_USERS_LIST,\n  CLEAR_LAST_ERROR,\n  ADD_NEW_SPECIAL_MESSAGES_PREPROCESSOR_FUNCTION,\n} from '../actions/chatSettingsActions'\n\nexport function currentUser(state = {}, action) {\n  switch (action.type) {\n    case CHANGE_CURRENT_USER:\n      return action.payload\n    default:\n      return state\n  }\n}\n\nexport function currentChat(state = {}, action) {\n  switch (action.type) {\n    case CHANGE_CURRENT_CHAT:\n      return action.payload\n    case ADD_NEW_SPECIAL_MESSAGES_PREPROCESSOR_FUNCTION:\n      return { ...state, ...action.payload }\n    default:\n      return state\n  }\n}\n\nexport function chatsList(state = [], action) {\n  switch (action.type) {\n    case REFRESH_CHATS_LIST:\n      return action.payload\n    default:\n      return state\n  }\n}\n\nexport function isUserAuthenticated(state = false, action) {\n  switch (action.type) {\n    case SET_AUTHENTICATION_RESULT:\n      return action.payload\n    default:\n      return state\n  }\n}\n\nexport function lastError(state = null, action) {\n  switch (action.type) {\n    case SET_LAST_ERROR:\n      return action.payload\n    case CLEAR_LAST_ERROR:\n      return null\n    default:\n      return state\n  }\n}\n\nexport function usersList(state = [], action) {\n  switch (action.type) {\n    case FILL_FOUND_USERS_LIST:\n      return action.payload\n    default:\n      return state\n  }\n}\n","import { applyBackwardPreprocessorFunctionAndPushMessage } from '../actions/messageListActions'\n\nimport {\n  wsConnected,\n  wsDisconnected,\n  WS_CONNECT,\n  WS_DISCONNECT,\n} from '../actions/webSocketActions'\n\nconst webSocketMiddleware = () => {\n  let socket = null\n\n  const onOpen = store => event => {\n    store.dispatch(wsConnected(event.target.url))\n  }\n\n  const onClose = store => () => {\n    store.dispatch(wsDisconnected())\n  }\n\n  const onMessage = store => event => {\n    const data = JSON.parse(event.data)\n\n    switch (data.actionType) {\n      case 'save':\n        const messages = [data.message]\n        store.dispatch(\n          applyBackwardPreprocessorFunctionAndPushMessage(messages)\n        )\n        break\n      default:\n        break\n    }\n  }\n\n  return store => next => action => {\n    switch (action.type) {\n      case WS_CONNECT:\n        if (socket !== null) {\n          socket.close()\n        }\n\n        socket = new WebSocket(action.payload)\n        socket.onmessage = onMessage(store)\n        socket.onclose = onClose(store)\n        socket.onopen = onOpen(store)\n        break\n      case WS_DISCONNECT:\n        if (socket !== null) {\n          socket.close()\n        }\n\n        socket = null\n        break\n      default:\n        return next(action)\n    }\n  }\n}\n\nexport default webSocketMiddleware()\n","import React from 'react'\n\nimport './ModalWindow.sass'\n\nfunction asModalWindow(Component) {\n  return function(props) {\n    return (\n      <div className=\"modalWindow\">\n        <div>\n          <Component {...props} />\n        </div>\n      </div>\n    )\n  }\n}\n\nexport { asModalWindow }\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport './InputField.sass'\n\nfunction InputField(props) {\n  const { caption, name, placeholder, type, value, onChange } = props\n\n  return (\n    <div className=\"inputField\">\n      <label>{caption}</label>\n      <input\n        name={name}\n        placeholder={placeholder}\n        type={type}\n        value={value}\n        onChange={onChange}\n      />\n    </div>\n  )\n}\n\nInputField.propTypes = {\n  caption: PropTypes.string,\n  name: PropTypes.string,\n  placeholder: PropTypes.string,\n  type: PropTypes.string,\n  value: PropTypes.string,\n  onChange: PropTypes.func,\n}\n\nexport { InputField }\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport { InputField } from '../InputField/InputField'\n\nimport './AuthenticationAndRegistrationForm.sass'\nimport '../SubmitButton/SubmitButton.sass'\nimport './__Label/AuthenticationAndRegistrationForm-Label.sass'\n\nclass AuthenticationAndRegistrationForm extends React.Component {\n  state = {\n    email: '',\n    name: '',\n    password: '',\n    isRegistrationMode: false,\n  }\n\n  onSubmit = eventArg => {\n    eventArg.preventDefault()\n\n    const { email, name, password, isRegistrationMode } = this.state\n    const { onAuthenticationSubmit, onRegistrationSubmit } = this.props\n\n    const user = {\n      email,\n      name,\n      password,\n    }\n\n    if (isRegistrationMode) {\n      onRegistrationSubmit(user)\n    } else {\n      onAuthenticationSubmit(email, password)\n    }\n\n    this.setState({\n      email: '',\n      name: '',\n      password: '',\n    })\n  }\n\n  updateUserEmailValue = eventArg => {\n    this.setState({\n      email: eventArg.target.value,\n    })\n  }\n\n  updateUserNameValue = eventArg => {\n    this.setState({\n      name: eventArg.target.value,\n    })\n  }\n\n  updateUserPasswordValue = eventArg => {\n    this.setState({\n      password: eventArg.target.value,\n    })\n  }\n\n  changeMode = ({ target: { checked } }) => {\n    this.setState({\n      isRegistrationMode: checked,\n    })\n  }\n\n  renderHeader = () => {\n    let headerText\n\n    if (this.state.isRegistrationMode) {\n      headerText = 'New user registration'\n    } else {\n      headerText = 'Login'\n    }\n\n    return (\n      <h3 className=\"authenticationAndRegistrationForm__Header\">\n        {headerText}\n      </h3>\n    )\n  }\n\n  renderLabel = () => {\n    return (\n      <div className=\"authenticationAndRegistrationForm-Label\" align=\"center\">\n        <img src={require(\"../../resources/Whisper.png\")}></img>\n      </div>\n    )\n  }\n\n  renderUserNameInputField = () => {\n    if (this.state.isRegistrationMode) {\n      return (\n        <InputField\n          caption=\"User name\"\n          name=\"userName\"\n          placeholder=\"User name\"\n          type=\"text\"\n          value={this.state.name}\n          onChange={this.updateUserNameValue}\n        />\n      )\n    }\n  }\n\n  renderSubmitButton = () => {\n    let buttonText\n\n    if (this.state.isRegistrationMode) {\n      buttonText = 'Sign up'\n    } else {\n      buttonText = 'Sign in'\n    }\n\n    return (\n      <button className=\"submitButton\" type=\"submit\">\n        {buttonText}\n      </button>\n    )\n  }\n\n  render() {\n    return (\n      <div className=\"authenticationAndRegistrationForm\">\n        <input type=\"checkbox\" name=\"changeMode\" onClick={this.changeMode} />\n        <span>Registration</span>\n        <form onSubmit={this.onSubmit}>\n          {this.renderLabel()}\n          <div align=\"center\">{this.renderHeader()}</div>\n          {this.renderUserNameInputField()}\n          <InputField\n            caption=\"User email\"\n            name=\"userEmail\"\n            placeholder=\"User email\"\n            type=\"text\"\n            value={this.state.email}\n            onChange={this.updateUserEmailValue}\n          />\n          <InputField\n            caption=\"User password\"\n            name=\"userPassword\"\n            placeholder=\"User password\"\n            type=\"text\"\n            value={this.state.password}\n            onChange={this.updateUserPasswordValue}\n          />\n          <div align=\"center\">{this.renderSubmitButton()}</div>\n        </form>\n      </div>\n    )\n  }\n}\n\nAuthenticationAndRegistrationForm.propTypes = {\n  onAuthenticationSubmit: PropTypes.func.isRequired,\n  onRegistrationSubmit: PropTypes.func.isRequired,\n}\n\nexport { AuthenticationAndRegistrationForm }\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { withRouter } from 'react-router-dom'\n\nimport { AuthenticationAndRegistrationForm } from '../../components/AuthenticationAndRegistrationForm/AuthenticationAndRegistrationForm'\n\nimport { connect } from 'react-redux'\n\nimport {\n  submitUserEmailAndPassword,\n  submitNewUser,\n  resetAuthenticationResult,\n} from '../../actions/chatSettingsActions'\n\nimport './AuthenticationAndRegistrationWindow.sass'\n\nclass AuthenticationAndRegistrationWindow extends React.Component {\n  componentDidUpdate = () => {\n    const { isUserAuthenticated, history } = this.props\n\n    if (isUserAuthenticated) {\n      history.push('/chat')\n    }\n  }\n\n  render() {\n    const { submitUserEmailAndPassword, submitNewUser } = this.props\n\n    return (\n      <div className=\"authenticationAndRegistrationWindow\">\n        <AuthenticationAndRegistrationForm\n          onAuthenticationSubmit={submitUserEmailAndPassword}\n          onRegistrationSubmit={submitNewUser}\n        />\n      </div>\n    )\n  }\n}\n\nAuthenticationAndRegistrationWindow.propTypes = {\n  onSignOut: PropTypes.func.isRequired,\n  submitUserEmailAndPassword: PropTypes.func,\n  submitNewUser: PropTypes.func,\n}\n\nconst mapStateToProps = state => {\n  return {\n    isUserAuthenticated: state.isUserAuthenticated,\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    submitUserEmailAndPassword: (userEmail, userPassword) =>\n      dispatch(submitUserEmailAndPassword(userEmail, userPassword)),\n    submitNewUser: user => dispatch(submitNewUser(user)),\n    onSignOut: () => dispatch(resetAuthenticationResult()),\n  }\n}\n\nconst AuthenticationAndRegistrationWindowWithRouter = withRouter(\n  AuthenticationAndRegistrationWindow\n)\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(AuthenticationAndRegistrationWindowWithRouter)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\n\nimport { resetAuthenticationResult } from '../../actions/chatSettingsActions'\n\nimport './SettingsPanel.sass'\n\nclass SettingsPanel extends React.Component {\n  render() {\n    return (\n      <div className=\"settingsPanel\">\n        <span>{this.props.currentUser.name}</span>\n        <button onClick={this.props.onSignOut}>Sign out</button>\n      </div>\n    )\n  }\n}\n\nSettingsPanel.propTypes = {\n  onSignOut: PropTypes.func.isRequired,\n  currentUserName: PropTypes.exact({\n    _id: PropTypes.number.isRequired,\n    name: PropTypes.string.isRequired,\n    email: PropTypes.string.isRequired,\n  }),\n}\n\nconst mapStateToProps = state => {\n  return {\n    currentUser: state.currentUser,\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onSignOut: () => dispatch(resetAuthenticationResult()),\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SettingsPanel)\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport './UserFrame.sass'\n\nclass UserFrame extends React.Component {\n  onUserClick = () => {\n    const { user } = this.props\n\n    this.props.onUserClick(user)\n  }\n\n  render() {\n    const { user } = this.props\n\n    return (\n      <div className=\"userFrame\" onClick={this.onUserClick}>\n        <span>{user.name}</span>\n      </div>\n    )\n  }\n}\n\nUserFrame.propTypes = {\n  chat: PropTypes.exact({\n    _id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    email: PropTypes.string.isRequired,\n  }),\n  onSelectUser: PropTypes.func,\n}\n\nexport { UserFrame }\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport { InputField } from '../../InputField/InputField'\n\nimport '../../SubmitButton/SubmitButton.sass'\n\nclass SeekForm extends React.Component {\n  state = {\n    userSeekData: '',\n  }\n\n  onSubmit = eventArg => {\n    eventArg.preventDefault()\n\n    this.props.onSubmitUserSeekData(this.state.userSeekData)\n\n    this.setState({\n      searchQueryString: '',\n    })\n  }\n\n  updateSearchQueryString = eventArg => {\n    this.setState({\n      userSeekData: eventArg.target.value,\n    })\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.onSubmit}>\n        <InputField\n          caption=\"User email\"\n          name=\"userEmail\"\n          placeholder=\"User email\"\n          type=\"text\"\n          value={this.state.userSeekData}\n          onChange={this.updateSearchQueryString}\n        />\n        <div align=\"center\">\n          <button className=\"submitButton\" type=\"submit\">\n            Find users\n          </button>\n        </div>\n      </form>\n    )\n  }\n}\n\nSeekForm.propTypes = {\n  onSubmitUserSeekData: PropTypes.func.isRequired,\n}\n\nexport { SeekForm }\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport { UserFrame } from '../UserFrame/UserFrame'\nimport { SeekForm } from './__SeekForm/AddToChatNewUserWindow-SeekForm'\n\nimport './AddToChatNewUserWindow.sass'\nimport '../CloseButton/CloseButton.sass'\nimport './__UsersList/AddToChatNewUserWindow-UsersList.sass'\n\nclass AddToChatNewUserWindow extends React.Component {\n  onSubmitUserSeekData = userSeekData => {\n    this.props.findUsers(userSeekData)\n  }\n\n  renderUsersList = () => {\n    const { usersList, onUserClick } = this.props\n\n    if (usersList && usersList.length) {\n      return usersList.map(function(item) {\n        return (\n          <UserFrame onUserClick={onUserClick} key={item._id} user={item} />\n        )\n      })\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"addToChatNewUserWindow\">\n        <h4>Search for a new member</h4>\n        <button className=\"closeButton\" onClick={this.props.onCancelClick}>\n          X\n        </button>\n        <SeekForm onSubmitUserSeekData={this.onSubmitUserSeekData} />\n        <div className=\"addToChatNewUserWindow-UsersList\">\n          {this.renderUsersList()}\n        </div>\n      </div>\n    )\n  }\n}\n\nAddToChatNewUserWindow.propTypes = {\n  usersList: PropTypes.arrayOf(\n    PropTypes.shape({\n      user: PropTypes.exact({\n        _id: PropTypes.number.isRequired,\n        name: PropTypes.string.isRequired,\n        email: PropTypes.string.isRequired,\n      }),\n    })\n  ),\n  findUsers: PropTypes.func.isRequired,\n  onUserClick: PropTypes.func.isRequired,\n}\n\nexport { AddToChatNewUserWindow }\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport './FileInput.sass'\n\nclass FileInput extends React.Component {\n  state = {\n    file: null,\n    filePath: '',\n  }\n\n  updateFile = eventArg => {\n    this.setState({\n      file: eventArg.target.files[0],\n      filePath: eventArg.target.value,\n    })\n\n    this.props.updateFile(eventArg)\n  }\n\n  renderFileName = () => {\n    const { file } = this.state\n    let fileName = ''\n\n    if (file) fileName = file.name\n\n    return <span>{fileName}</span>\n  }\n\n  render() {\n    const { name } = this.props\n\n    return (\n      <div className=\"fileInput\">\n        <div>\n          <span>{this.renderFileName()}</span>\n        </div>\n        <div>\n          <label>\n            <input\n              name={name}\n              type=\"file\"\n              value={this.state.filePath}\n              onChange={this.updateFile}\n            />\n            <span>Open file</span>\n          </label>\n        </div>\n      </div>\n    )\n  }\n}\n\nFileInput.propTypes = {\n  name: PropTypes.string,\n  updateFile: PropTypes.func.isRequired,\n}\n\nexport { FileInput }\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport { FileInput } from '../../FileInput/FileInput'\n\nimport './SpecialMessagesPreprocessorMenu-AddFileForm.sass'\nimport '../../SubmitButton/SubmitButton.sass'\n\nclass AddFileForm extends React.Component {\n  state = {\n    file: null,\n  }\n\n  onSubmit = event => {\n    const { file } = this.state\n    const { onSubmitFile } = this.props\n\n    event.preventDefault()\n\n    if (file) {\n      onSubmitFile(file)\n    }\n  }\n\n  updateMessagesPreprocessorFile = eventArg => {\n    this.setState({\n      file: eventArg.target.files[0],\n    })\n  }\n\n  render() {\n    return (\n      <form className=\"addFileForm\" onSubmit={this.onSubmit}>\n        <FileInput\n          name=\"messagesPreprocessorFile\"\n          updateFile={this.updateMessagesPreprocessorFile}\n        />\n        <div>\n          <button className=\"submitButton\" type=\"submit\">\n            Add\n          </button>\n        </div>\n      </form>\n    )\n  }\n}\n\nAddFileForm.propTypes = {\n  onSubmitFile: PropTypes.func.isRequired,\n}\n\nexport { AddFileForm }\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport { AddFileForm } from './__AddFileForm/SpecialMessagesPreprocessorMenu-AddFileForm'\n\nimport './SpecialMessagesPreprocessorMenu.sass'\n\nclass SpecialMessagesPreprocessorMenu extends React.Component {\n  render() {\n    return (\n      <div className=\"specialMessagesPreprocessorMenu\">\n        <h4>Add special messages preprocessor</h4>\n        <button className=\"closeButton\" onClick={this.props.onCancelClick}>\n          X\n        </button>\n        <AddFileForm onSubmitFile={this.props.onSubmit} />\n      </div>\n    )\n  }\n}\n\nSpecialMessagesPreprocessorMenu.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n  onCancelClick: PropTypes.func.isRequired,\n}\n\nexport { SpecialMessagesPreprocessorMenu }\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport PropTypes from 'prop-types'\n\nimport { asModalWindow } from '../../components/ModalWindow/asModalWindow'\nimport { AddToChatNewUserWindow } from '../../components/AddToChatNewUserWindow/AddToChatNewUserWindow'\nimport { SpecialMessagesPreprocessorMenu } from '../../components/SpecialMessagesPreprocessorMenu/SpecialMessagesPreprocessorMenu'\nimport {\n  findUsers,\n  addNewUserToCurrentChat,\n  addNewSpecialMessagesPreprocessor,\n} from '../../actions/chatSettingsActions'\n\nimport './CurrentChatSettings.sass'\n\nconst AddToChatNewUserModalWindow = asModalWindow(AddToChatNewUserWindow)\nconst SpecialMessagesPreprocessorModalWindow = asModalWindow(\n  SpecialMessagesPreprocessorMenu\n)\n\nclass CurrentChatSettings extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      showAddedUserMenu: false,\n      showSpecialMessagesPreprocessorMenu: false,\n    }\n  }\n\n  onAddUserButtonClick = () => {\n    this.setState({\n      showAddedUserMenu: true,\n    })\n  }\n\n  onAddSpecialMessagesPreprocessorButtonClick = () => {\n    this.setState({\n      showSpecialMessagesPreprocessorMenu: true,\n    })\n  }\n\n  addNewUserToCurrentChat = user => {\n    this.cancelUserAdding()\n    this.props.addNewUserToCurrentChat(user)\n  }\n\n  cancelUserAdding = () => {\n    this.setState({\n      showAddedUserMenu: false,\n    })\n  }\n\n  addNewSpecialMessagesPreprocessor = preprocessorFunctionString => {\n    this.cancelSpecialMessagesPreprocessorAdding()\n    this.props.addNewSpecialMessagesPreprocessor(preprocessorFunctionString)\n  }\n\n  cancelSpecialMessagesPreprocessorAdding = () => {\n    this.setState({\n      showSpecialMessagesPreprocessorMenu: false,\n    })\n  }\n\n  renderAddedUserWindow = () => {\n    const {\n      showAddedUserMenu,\n      showSpecialMessagesPreprocessorMenu,\n    } = this.state\n    const { currentChat, findUsers, usersList } = this.props\n\n    if (showAddedUserMenu) {\n      return (\n        <AddToChatNewUserModalWindow\n          findUsers={findUsers}\n          usersList={usersList}\n          onUserClick={this.addNewUserToCurrentChat}\n          onCancelClick={this.cancelUserAdding}\n        />\n      )\n    }\n\n    if (showSpecialMessagesPreprocessorMenu) {\n      return (\n        <SpecialMessagesPreprocessorModalWindow\n          currentChat={currentChat}\n          onSubmit={this.addNewSpecialMessagesPreprocessor}\n          onCancelClick={this.cancelSpecialMessagesPreprocessorAdding}\n        />\n      )\n    }\n\n    if (currentChat._id) {\n      return (\n        <React.Fragment>\n          <button onClick={this.onAddUserButtonClick}>\n            Add new user to chat\n          </button>\n          <button onClick={this.onAddSpecialMessagesPreprocessorButtonClick}>\n            Add special messages preprocessor\n          </button>\n        </React.Fragment>\n      )\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"currentChatSettings\">{this.renderAddedUserWindow()}</div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    currentChat: state.currentChat,\n    usersList: state.usersList,\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    findUsers: userSeekData => dispatch(findUsers(userSeekData)),\n    addNewUserToCurrentChat: user => dispatch(addNewUserToCurrentChat(user)),\n    addNewSpecialMessagesPreprocessor: file =>\n      dispatch(addNewSpecialMessagesPreprocessor(file)),\n  }\n}\n\nCurrentChatSettings.propTypes = {\n  usersList: PropTypes.arrayOf(\n    PropTypes.shape({\n      user: PropTypes.exact({\n        _id: PropTypes.number.isRequired,\n        name: PropTypes.string.isRequired,\n        email: PropTypes.string.isRequired,\n      }),\n    })\n  ),\n  currentChat: PropTypes.exact({\n    _id: PropTypes.string,\n    name: PropTypes.string,\n    users: PropTypes.arrayOf(\n      PropTypes.shape({\n        _id: PropTypes.string.isRequired,\n        name: PropTypes.string.isRequired,\n        email: PropTypes.string.isRequired,\n      })\n    ),\n    forwardPreprocessorFunction: PropTypes.func,\n    backwardPreprocessorFunction: PropTypes.func,\n  }),\n  findUsers: PropTypes.func.isRequired,\n  addNewUserToCurrentChat: PropTypes.func.isRequired,\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CurrentChatSettings)\n","import React from 'react'\n\nimport SettingsPanel from '../../SettingsPanel/SettingsPanel'\nimport CurrentChatSettings from '../../CurrentChatSettings/CurrentChatSettings'\n\nimport './AppPanel-TopPanel.sass'\n\nfunction TopPanel() {\n  return (\n    <div className=\"topPanel\">\n      <CurrentChatSettings />\n      <SettingsPanel />\n    </div>\n  )\n}\n\nexport { TopPanel }\n","export function addLeadZero(number) {\n  if (number < 10) return '0' + number\n  return number\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { addLeadZero } from '../../helper'\n\nimport './MessageFrame-MessageTimestamp.sass'\n\nfunction MessageTimestamp(props) {\n  const date = new Date(props.time)\n  let hours = addLeadZero(date.getHours())\n  let minutes = addLeadZero(date.getMinutes())\n  let day = addLeadZero(date.getDate())\n  let month = addLeadZero(date.getMonth() + 1)\n  let year = date.getFullYear()\n\n  return (\n    <div className=\"messageFrame-MessageTimestamp\">\n      <span>\n        {hours}:{minutes} {day}.{month}.{year}\n      </span>\n    </div>\n  )\n}\n\nMessageTimestamp.propTypes = {\n  time: PropTypes.oneOfType([\n    PropTypes.number,\n    PropTypes.string,\n    PropTypes.instanceOf(Date),\n  ]).isRequired,\n}\n\nexport { MessageTimestamp }\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport './MessageFrame-AuthorNameLabel.sass'\n\nfunction AuthorNameLabel(props) {\n  return (\n    <span className=\"messageFrame-AuthorNameLabel\">{props.authorName}</span>\n  )\n}\n\nAuthorNameLabel.propTypes = {\n  authorName: PropTypes.string,\n}\n\nexport { AuthorNameLabel }\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nfunction MessageTextField(props) {\n  return <span>{props.text}</span>\n}\n\nMessageTextField.propTypes = {\n  text: PropTypes.string,\n}\n\nexport { MessageTextField }\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { MessageTimestamp } from './__MessageTimestamp/MessageFrame-MessageTimestamp'\nimport { AuthorNameLabel } from './__AuthorNameLabel/MessageFrame-AuthorNameLabel'\nimport { MessageTextField } from './__MessageTextField/MessageFrame-MessageTextField'\nimport { statusRenderingDelay } from '../../applicationSettings'\n\nimport './MessageFrame.sass'\nimport './_user/MessageFrame_user_another.sass'\nimport './_user/MessageFrame_user_current.sass'\nimport '../RotatingImage/_RotatingImage.sass'\n\nimport waitingIcon from '../../resources/BlueWaitingIcon.png'\n\nclass MessageFrame extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.state = { isStatusRenderingEnabled: false }\n  }\n\n  componentDidMount = () => {\n    const { hasServerReceivedMessage } = this.props\n\n    if (hasServerReceivedMessage){\n      return\n    }\n\n    this.statusRenderingDelayId = setTimeout(() => this.enableStatusRendering(), statusRenderingDelay)\n  }\n\n  enableStatusRendering = () => {\n    this.setState({ isStatusRenderingEnabled: true })\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.statusRenderingDelayId)\n  }\n\n  renderAuthorName = () => {\n    const { message, currentUserEmail } = this.props\n\n    if (currentUserEmail === message.authorEmail) {\n      return\n    } else {\n      return <AuthorNameLabel authorName={message.authorName} />\n    }\n  }\n\n  renderMessageStatus() {\n    const { hasServerReceivedMessage } = this.props\n\n    if (!hasServerReceivedMessage && this.state.isStatusRenderingEnabled) {\n      return (\n        <div className=\"messageStatus\">\n          <img className=\"RotatingImage\" src={waitingIcon}></img>\n        </div>\n      )\n    }\n  }\n\n  render() {\n    const { message, currentUserEmail } = this.props\n    let messageFrameClass = 'messageFrame'\n\n    if (currentUserEmail === message.authorEmail) {\n      messageFrameClass += ' messageFrame_user_current'\n    } else {\n      messageFrameClass += ' messageFrame_user_another'\n    }\n\n    return (\n      <div className={messageFrameClass}>\n        <div>\n          {this.renderMessageStatus()}\n        </div>\n        <div>\n          <div>{this.renderAuthorName()}</div>\n          <div>\n            <MessageTextField text={message.text} />\n          </div>\n          <div>\n            <MessageTimestamp time={message.time} />\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nMessageFrame.propTypes = {\n  message: PropTypes.exact({\n    _id: PropTypes.string,\n    clientSideId: PropTypes.string,\n    chatId: PropTypes.string.isRequired,\n    authorName: PropTypes.string.isRequired,\n    authorEmail: PropTypes.string.isRequired,\n    time: PropTypes.oneOfType([\n      PropTypes.number,\n      PropTypes.string,\n      PropTypes.instanceOf(Date),\n    ]).isRequired,\n    text: PropTypes.string.isRequired,\n    wasMessageReceived: PropTypes.bool,\n  }),\n  currentUserEmail: PropTypes.string,\n  hasServerReceivedMessage: PropTypes.bool,\n}\n\nexport { MessageFrame }\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport './MessageList-ScrollDownButton.sass'\n\nfunction ScrollDownButton(props) {\n  const strToDecode = '&#11015'\n  const parser = new DOMParser()\n  const decodedString = parser.parseFromString(\n    `<!doctype html><body>${strToDecode}`,\n    'text/html'\n  ).body.textContent\n\n  return (\n    <div className=\"scrollDownButton\" onClick={props.onScrollDownClick}>\n      {decodedString}\n    </div>\n  )\n}\n\nScrollDownButton.propTypes = {\n  text: PropTypes.string,\n}\n\nexport { ScrollDownButton }\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport PropTypes from 'prop-types'\nimport {\n  fetchMessagesList,\n  fetchNewMessages,\n  subscribeForNewMessages,\n  unsubscribeForNewMessages,\n} from '../../actions/messageListActions'\n\nimport { MessageFrame } from '../../components/MessageFrame/MessageFrame'\nimport { ScrollDownButton } from './__ScrollDownButton/MessageList-ScrollDownButton'\n\nimport './MessageList.sass'\nimport './__Item/MessageList-Item.sass'\nimport './__ChatNameCaption/MessageList-ChatNameCaption.sass'\n\nclass MessageList extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.messageListRef = React.createRef()\n\n    this.state = {\n      enableScrollDown: true,\n      previousMessagesLength: 0,\n      suspendMessagesFetching: false,\n      currentChat: null,\n      needScrollDown: true,\n      showScrollDownButton: false,\n    }\n  }\n\n  componentDidMount = () => {\n    const { currentChat, subscribeForNewMessages } = this.props\n    if (this.state.currentChat !== currentChat) {\n      this.setState({ currentChat })\n      subscribeForNewMessages(this.props.currentChat._id)\n    }\n    this.fetchMessages()\n  }\n\n  componentWillUnmount() {\n    this.props.unsubscribeForNewMessages()\n  }\n\n  componentDidUpdate = () => {\n    const { messages, currentChat, subscribeForNewMessages } = this.props\n    const scrollDownShift = 30\n    const { current } = this.messageListRef\n\n    if (this.state.currentChat !== currentChat) {\n      this.reloadMessagesList()\n      subscribeForNewMessages(this.props.currentChat._id)\n      return\n    }\n\n    if (!messages) return\n\n    const messagesLength = messages.length\n    const previousMessagesLength = this.state.previousMessagesLength\n\n    if (messagesLength <= previousMessagesLength) {\n      return\n    }\n\n    this.setState({\n      previousMessagesLength: messagesLength,\n      suspendMessagesFetching: false,\n    })\n\n    if (current) {\n      current.scrollTop += scrollDownShift\n    }\n\n    this.scrollDownIfNeed()\n  }\n\n  reloadMessagesList = () => {\n    this.setState({\n      currentChat: this.props.currentChat,\n      previousMessagesLength: 0,\n      suspendMessagesFetching: true,\n      needScrollDown: true,\n    })\n\n    this.fetchMessagesForced()\n  }\n\n  fetchMessages = () => {\n    if (this.state.suspendMessagesFetching) return\n\n    this.fetchMessagesForced()\n  }\n\n  fetchMessagesForced = () => {\n    const currentChat = this.props.currentChat\n    const messages = this.props.messages\n\n    if (!currentChat || !currentChat._id) return\n    if (!messages) return\n\n    const time = new Date().getTime()\n\n    const oldestMessageTime = messages.length ? messages[0].time : time\n\n    this.props.fetchMessagesList(currentChat._id, oldestMessageTime)\n  }\n\n  fetchNewMessages = () => {\n    const currentChat = this.props.currentChat\n    const messages = this.props.messages\n\n    if (!currentChat || !currentChat._id) return\n    if (!messages) return\n\n    const lastMessageIndex = messages.length - 1\n\n    if (lastMessageIndex < 0) {\n      this.fetchMessages()\n      return\n    }\n\n    this.props.fetchNewMessages(\n      currentChat._id,\n      messages[lastMessageIndex].time\n    )\n  }\n\n  scrollDownIfNeed = () => {\n    if (this.state.needScrollDown) {\n      this.setState({\n        needScrollDown: false,\n      })\n\n      this.scrollDown()\n    }\n  }\n\n  tryLoadMessagesUntilScrollAppears() {\n    const { current } = this.messageListRef\n\n    if (current.offsetWidth <= current.clientWidth) {\n      this.fetchMessages()\n    }\n  }\n\n  scrollDown = () => {\n    const { current } = this.messageListRef\n\n    this.setState({\n      needScrollDown: false,\n    })\n\n    if (current) {\n      current.scrollTop = current.scrollHeight\n    }\n  }\n\n  onScrollDownClick = () => {\n    this.scrollDown()\n  }\n\n  onScroll = () => {\n    const minScrollTop = 200\n    const scrollDownButtonThreshold = 200\n    const {\n      scrollHeight,\n      scrollTop,\n      clientHeight,\n    } = this.messageListRef.current\n\n    this.setState({\n      showScrollDownButton:\n        scrollHeight - scrollTop >= clientHeight + scrollDownButtonThreshold,\n      needScrollDown: scrollHeight - scrollTop === clientHeight,\n    })\n\n    if (this.state.suspendMessagesFetching) return\n\n    if (scrollTop < minScrollTop) {\n      this.setState({\n        suspendMessagesFetching: true,\n      })\n\n      this.fetchMessages()\n    }\n  }\n\n  renderMessageList = (messages, hasServerReceivedMessage) => {\n    const { currentUser } = this.props\n    const messagesLength = messages.length\n\n    if (messages && messagesLength) {\n      return messages.map(function(item, index) {\n        return (\n          <div className=\"item\" key={index}>\n            <MessageFrame hasServerReceivedMessage={hasServerReceivedMessage} message={item} currentUserEmail={currentUser.email} />\n          </div>\n        )\n      })\n    }\n  }\n\n  renderScrollDownButton = () => {\n    if (this.state.showScrollDownButton) {\n      return <ScrollDownButton onScrollDownClick={this.onScrollDownClick} />\n    }\n  }\n\n  renderChatNameCaption = () => {\n    const chatName = this.props.currentChat.name\n    if (chatName) {\n      return (\n        <div className=\"chatNameCaption\">\n          <div>\n            <span>{chatName}</span>\n          </div>\n        </div>\n      )\n    }\n  }\n\n  render() {\n    const strToDecode = '&#11015'\n    const parser = new DOMParser()\n    const decodedString = parser.parseFromString(\n      `<!doctype html><body>${strToDecode}`,\n      'text/html'\n    ).body.textContent\n\n    const { messages, waitingMessages } = this.props\n\n    return (\n      <React.Fragment>\n        <div\n          ref={this.messageListRef}\n          className=\"messageList\"\n          onScroll={this.onScroll}\n        >\n          {this.renderMessageList(messages, true)}\n          {this.renderMessageList(waitingMessages, false)}\n        </div>\n        {this.renderScrollDownButton()}\n        {this.renderChatNameCaption()}\n      </React.Fragment>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    messages: state.messages,\n    waitingMessages: state.messagesWaitingList,\n    currentChat: state.currentChat,\n    currentUser: state.currentUser,\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    fetchMessagesList: (chatId, oldestMessageTime) =>\n      dispatch(fetchMessagesList(chatId, oldestMessageTime)),\n    fetchNewMessages: (chatId, newestMessageTime) =>\n      dispatch(fetchNewMessages(chatId, newestMessageTime)),\n    subscribeForNewMessages: chatId =>\n      dispatch(subscribeForNewMessages(chatId)),\n    unsubscribeForNewMessages: () => dispatch(unsubscribeForNewMessages()),\n  }\n}\n\nMessageList.propTypes = {\n  messages: PropTypes.arrayOf(\n    PropTypes.shape({\n      message: PropTypes.exact({\n        chatId: PropTypes.number.isRequired,\n        authorName: PropTypes.string.isRequired,\n        authorEmail: PropTypes.string.isRequired,\n        time: PropTypes.oneOfType([\n          PropTypes.number,\n          PropTypes.string,\n          PropTypes.instanceOf(Date),\n        ]).isRequired,\n        text: PropTypes.string.isRequired,\n        wasMessageReceived: PropTypes.bool,\n      }),\n    })\n  ),\n}\n\nexport { MessageList }\nexport default connect(mapStateToProps, mapDispatchToProps)(MessageList)\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport './SimpleDataForm.sass'\n\nclass SimpleDataForm extends React.Component {\n  state = {\n    newData: '',\n  }\n\n  onSubmit = event => {\n    event.preventDefault()\n    \n    if(this.state.newData.trim() == ''){\n      return\n    }\n\n    this.props.onSubmitNewData(this.state.newData)\n\n    this.setState({\n      newData: '',\n    })\n  }\n\n  updateInputValue = eventArg => {\n    this.setState({\n      newData: eventArg.target.value,\n    })\n  }\n\n  render() {\n    const { caption, name, placeholder, type, buttonCaption } = this.props\n\n    return (\n      <form className=\"simpleDataForm\" onSubmit={this.onSubmit}>\n        <h4>{caption}</h4>\n        <div>\n          <input\n            name={name}\n            placeholder={placeholder}\n            type={type}\n            value={this.state.newData}\n            onChange={this.updateInputValue}\n          />\n          <button type=\"submit\">{buttonCaption}</button>\n        </div>\n      </form>\n    )\n  }\n}\n\nSimpleDataForm.propTypes = {\n  onSubmitNewData: PropTypes.func.isRequired,\n  caption: PropTypes.string,\n  name: PropTypes.string.isRequired,\n  placeholder: PropTypes.string,\n  type: PropTypes.string.isRequired,\n  buttonCaption: PropTypes.string,\n}\n\nexport { SimpleDataForm }\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport { encryptAndSendNewMessage } from '../../actions/messageListActions'\n\nimport MessageList from '../MessageList/MessageList'\nimport { SimpleDataForm } from '../../components/SimpleDataForm/SimpleDataForm'\n\nimport './CurrentChatPanel.sass'\n\nclass CurrentChatPanel extends React.Component {\n  renderMessageList() {\n    if (!this.props.currentUser._id) return\n    if (!this.props.currentChat._id) return\n\n    return (\n      <React.Fragment>\n        <MessageList />\n        <SimpleDataForm\n          onSubmitNewData={this.props.sendNewMessage}\n          caption=\"+Message\"\n          name=\"userMessage\"\n          placeholder=\"message text\"\n          type=\"text\"\n          buttonCaption=\"Send\"\n        />\n      </React.Fragment>\n    )\n  }\n\n  render() {\n    return <div className=\"currentChatPanel\">{this.renderMessageList()}</div>\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    currentUser: state.currentUser,\n    currentChat: state.currentChat,\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    sendNewMessage: message => dispatch(encryptAndSendNewMessage(message)),\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CurrentChatPanel)\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport './ChatList-ChatFrame.sass'\n\nclass ChatFrame extends React.Component {\n  onSelectChat = () => {\n    const { chat } = this.props\n\n    this.props.onSelectChat(chat)\n  }\n\n  renderUsersList = users => {\n    if (users && users.length) {\n      return users.map((item, index) => {\n        return (\n          <div key={index}>\n            <p>{item.name}</p>\n          </div>\n        )\n      })\n    }\n  }\n\n  render() {\n    const { chat } = this.props\n\n    return (\n      <div className=\"chatList-ChatFrame\" onClick={this.onSelectChat}>\n        <div>\n          <h4>{chat.name}</h4>\n        </div>\n        <div>\n          <p>Chat members:</p>\n          <div>{this.renderUsersList(chat.users)}</div>\n        </div>\n      </div>\n    )\n  }\n}\n\nChatFrame.propTypes = {\n  chat: PropTypes.exact({\n    _id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    users: PropTypes.arrayOf(\n      PropTypes.exact({\n        _id: PropTypes.string.isRequired,\n        name: PropTypes.string.isRequired,\n        email: PropTypes.string.isRequired,\n      })\n    ).isRequired,\n  }),\n  onSelectChat: PropTypes.func.isRequired,\n}\n\nexport { ChatFrame }\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport PropTypes from 'prop-types'\n\nimport {\n  fetchChatsList,\n  tryGetPreprocessorAnd–°hangeCurrentChat,\n} from '../../actions/chatSettingsActions'\n\nimport { ChatFrame } from './__ChatFrame/ChatList-ChatFrame'\n\nimport './ChatList.sass'\n\nclass ChatList extends React.Component {\n  componentDidMount() {\n    let userId = this.props.currentUser._id\n\n    if (!userId) return\n\n    this.props.fetchChatsList(userId)\n  }\n\n  renderChatList = () => {\n    const { chatsList, changeCurrentChat } = this.props\n\n    if (chatsList && chatsList.length) {\n      return chatsList.map(function(item) {\n        return (\n          <ChatFrame\n            onSelectChat={changeCurrentChat}\n            key={item._id}\n            chat={item}\n          />\n        )\n      })\n    }\n  }\n\n  render() {\n    return <div className=\"—ÅhatList\">{this.renderChatList()}</div>\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    chatsList: state.chatsList,\n    currentUser: state.currentUser,\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    fetchChatsList: userId => dispatch(fetchChatsList(userId)),\n    changeCurrentChat: chat =>\n      dispatch(tryGetPreprocessorAnd–°hangeCurrentChat(chat)),\n  }\n}\n\nChatList.propTypes = {\n  chatsList: PropTypes.arrayOf(\n    PropTypes.shape({\n      chat: PropTypes.exact({\n        _id: PropTypes.string.isRequired,\n        name: PropTypes.string.isRequired,\n        users: PropTypes.arrayOf(\n          PropTypes.shape({\n            _id: PropTypes.string.isRequired,\n            name: PropTypes.string.isRequired,\n            email: PropTypes.string.isRequired,\n          })\n        ).isRequired,\n      }),\n    })\n  ),\n  changeCurrentChat: PropTypes.func.isRequired,\n}\n\nexport { ChatList }\nexport default connect(mapStateToProps, mapDispatchToProps)(ChatList)\n","import React from 'react'\nimport { connect } from 'react-redux'\n\nimport ChatList from '../ChatList/ChatList'\nimport { SimpleDataForm } from '../../components/SimpleDataForm/SimpleDataForm'\n\nimport { createNewChat } from '../../actions/chatSettingsActions'\n\nimport './UserChatsPanel.sass'\n\nclass UserChatsPanel extends React.Component {\n  onSubmitNewChat = chatName => {\n    this.props.createNewChat(chatName, [this.props.currentUser._id])\n  }\n\n  render() {\n    return (\n      <div className=\"userChatsPanel\">\n        <ChatList />\n        <SimpleDataForm\n          onSubmitNewData={this.onSubmitNewChat}\n          caption=\"+Chat\"\n          name=\"chatName\"\n          placeholder=\"chat name\"\n          type=\"text\"\n          buttonCaption=\"Create\"\n        />\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    currentUser: state.currentUser,\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    createNewChat: (chatName, usersIds) =>\n      dispatch(createNewChat(chatName, usersIds)),\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserChatsPanel)\n","import React from 'react'\n\nimport CurrentChatPanel from '../../CurrentChatPanel/CurrentChatPanel'\nimport UserChatsPanel from '../../UserChatsPanel/UserChatsPanel'\n\nimport './AppPanel-MainPanel.sass'\n\nfunction MainPanel() {\n  return (\n    <div className=\"mainPanel\">\n      <UserChatsPanel />\n      <CurrentChatPanel />\n    </div>\n  )\n}\n\nexport { MainPanel }\n","import React from 'react'\nimport { withRouter } from 'react-router-dom'\n\nimport { TopPanel } from './__TopPanel/AppPanel-TopPanel'\nimport { MainPanel } from './__MainPanel/AppPanel-MainPanel'\n\nimport { connect } from 'react-redux'\n\nimport './AppPanel.sass'\n\nclass AppPanel extends React.Component {\n  componentDidUpdate = () => {\n    const { isUserAuthenticated, history } = this.props\n\n    if (!isUserAuthenticated) {\n      history.push('/login')\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"appPanel\">\n        <div className=\"mainPanelPlace\">\n          <MainPanel />\n        </div>\n        <div className=\"topPanelPlace\">\n          <TopPanel />\n        </div>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    isUserAuthenticated: state.isUserAuthenticated,\n  }\n}\n\nconst AppPanelWithRouter = withRouter(AppPanel)\nexport default connect(mapStateToProps)(AppPanelWithRouter)\n","import React from 'react'\nimport { Route, Switch, withRouter } from 'react-router-dom'\n\nimport { asModalWindow } from '../components/ModalWindow/asModalWindow'\nimport AuthenticationAndRegistrationWindow from './AuthenticationAndRegistrationWindow/AuthenticationAndRegistrationWindow'\nimport { ErrorWindow } from '../components/ErrorWindow/ErrorWindow'\nimport AppPanel from './AppPanel/AppPanel'\n\nimport { connect } from 'react-redux'\n\nimport {\n  checkIsUserAuthenticated,\n  submitUserEmailAndPassword,\n  submitNewUser,\n  clearLastError,\n  resetAuthenticationResult,\n} from '../actions/chatSettingsActions'\n\nconst ErrorModalWindow = asModalWindow(ErrorWindow)\n\nclass App extends React.Component {\n  componentDidMount() {\n    const { isUserAuthenticated, checkIsUserAuthenticated } = this.props\n\n    checkIsUserAuthenticated()\n\n    if (isUserAuthenticated) {\n      this.props.history.push('/chat')\n    } else {\n      this.props.history.push('/login')\n    }\n  }\n\n  renderErrorWindow() {\n    if (!this.props.lastError) return\n\n    return (\n      <ErrorModalWindow\n        onOk={this.props.clearLastError}\n        lastError={this.props.lastError}\n      />\n    )\n  }\n\n  renderMainContent() {\n    return (\n      <Switch>\n        <Route\n          exact\n          path=\"/login\"\n          render={() => <AuthenticationAndRegistrationWindow />}\n        />\n        <Route path=\"/chat\" component={AppPanel} />\n      </Switch>\n    )\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        {this.renderErrorWindow()}\n        {this.renderMainContent()}\n      </React.Fragment>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    isUserAuthenticated: state.isUserAuthenticated,\n    lastError: state.lastError,\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    checkIsUserAuthenticated: () => dispatch(checkIsUserAuthenticated()),\n    submitUserEmailAndPassword: (userEmail, userPassword) =>\n      dispatch(submitUserEmailAndPassword(userEmail, userPassword)),\n    submitNewUser: user => dispatch(submitNewUser(user)),\n    clearLastError: () => dispatch(clearLastError()),\n    onSignOut: () => dispatch(resetAuthenticationResult()),\n  }\n}\n\nconst AppWithRouter = withRouter(App)\nexport default connect(mapStateToProps, mapDispatchToProps)(AppWithRouter)\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport './ErrorWindow.sass'\n\nfunction ErrorWindow(props) {\n  const { status, badStatusText, message } = props.lastError\n\n  let statusParagraph, badStatusTextParagraph, messageParagraph\n\n  if (status) {\n    statusParagraph = <p>Status: {status}</p>\n    badStatusTextParagraph = <p>Status text: {badStatusText}</p>\n    messageParagraph = <p>Message: {message}</p>\n  }\n\n  return (\n    <div className=\"errorWindow\">\n      <div>\n        <h4>Error</h4>\n      </div>\n      <div>\n        {statusParagraph}\n        {badStatusTextParagraph}\n        {messageParagraph}\n      </div>\n      <button onClick={props.onOk}>Ok</button>\n    </div>\n  )\n}\n\nErrorWindow.propTypes = {\n  lastError: PropTypes.exact({\n    status: PropTypes.number,\n    badStatusText: PropTypes.string,\n    message: PropTypes.string,\n  }),\n}\n\nexport { ErrorWindow }\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { BrowserRouter } from 'react-router-dom'\nimport configureStore from './store/configureStore'\nimport './index.css'\nimport App from './containers/App'\nimport * as serviceWorker from './serviceWorker'\n\nconst store = configureStore()\n\nReactDOM.render(\n  <BrowserRouter>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </BrowserRouter>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","import { createStore, applyMiddleware } from 'redux'\nimport thunk from 'redux-thunk'\nimport rootReducer from '../reducers'\nimport wsMiddleware from '../middleware/webSocketMiddleware'\n\nexport default function configureStore(initialState) {\n  return createStore(rootReducer, applyMiddleware(thunk, wsMiddleware))\n}\n"],"sourceRoot":""}