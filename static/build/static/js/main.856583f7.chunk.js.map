{"version":3,"sources":["applicationSettings.js","actions/helper.js","actions/chatSettingsActions.js","actions/messageListActions.js","reducers/index.js","reducers/messageListData.js","reducers/chatSettings.js","components/NewChatForm.js","components/MessageTimestamp.js","components/MessageFrame.js","components/NewMessageInput.js","containers/MessageList.js","components/ChatFrame.js","containers/ChatList.js","components/UserFrame.js","components/UserSeekForm.js","components/AddToChatNewUserWindow.js","containers/CurrentChatSettings.js","components/AuthenticationForm.js","components/RegistrationForm.js","components/SettingsPanel.js","components/ErrorWindow.js","containers/App.js","serviceWorker.js","index.js","store/configureStore.js"],"names":["serverLocation","messageSendPath","messageGetPath","newMessageGetPath","submitNewChatPath","chatsListGetPath","submitUserEmailAndPasswordPath","submitNewUserPath","searchUsersPath","addNewUserToChatPath","fetchMessagesCount","updateInterval","httpHeadersWithoutToken","createHttpHeadersWithToken","token","checkResponseAndCreateErrorIfBadStatus","response","ok","status","badStatusText","statusText","message","validateEmail","email","test","CHANGE_CURRENT_USER","CHANGE_CURRENT_CHAT","REFRESH_CHATS_LIST","SET_AUTHENTICATION_RESULT","SET_LAST_ERROR","FILL_FOUND_USERS_LIST","CLEAR_LAST_ERROR","changeCurrentUser","user","type","payload","changeCurrentChat","chat","setAuthenticationResult","result","handleServerError","serverErrorData","dispatch","resetAuthenticationResult","setLastError","errorData","localStorage","removeItem","fetchChatsList","userId","fetch","method","headers","then","serverError","json","data","catch","error","console","log","findUsers","userSeekData","ADD_NEW_MESSAGE","MESSAGE_WAS_RECEIVED","REFRESH_MESSAGES_LIST","UNSHIFT_PREVIOUS_MESSAGES","PUSH_NEW_MESSAGES","addNewMessage","messageWasReceived","bool","fetchMessagesList","chatId","oldestMessageTime","fetchNewMessages","newestMessageTime","combineReducers","messages","state","action","concat","previousMessages","newMessages","wasMessageReceived","currentUser","currentChat","chatsList","isUserAuthenticated","lastError","usersList","NewChatForm","name","users","onSubmit","event","preventDefault","props","onSubmitNewChat","currentUserId","setState","updateChatNameValue","eventArg","target","value","this","placeholder","onChange","React","Component","MessageTimestamp","date","Date","time","hours","getHours","minutes","getMinutes","day","getDate","month","getMonth","year","getFullYear","MessageFrame","authorName","authorEmail","text","NewMessageInput","newMessage","onSubmitNewMessage","updateInputValue","className","MessageList","componentDidMount","fetchMessages","initializeMessagesListUpdateTimer","componentDidUpdate","messagesLength","length","previousMessagesLength","messageListRef","current","scrollTop","scrollDownIfEnabled","timerID","setInterval","_id","getTime","lastMessageIndex","enableScrollDown","scrollDown","scrollHeight","renderMessageList","map","item","index","key","onScrollDownClick","onScroll","sendNewMessage","createRef","clearInterval","decodedString","DOMParser","parseFromString","body","textContent","onClick","ref","connect","ChatFrame","onSelectChat","renderUsersList","ChatList","renderChatList","UserFrame","onUserClick","UserSeekForm","onSubmitUserSeekData","searchQueryString","updateSearchQueryString","AddToChatNewUserWindow","cancelUserAdding","CurrentChatSettings","onAddUserButtonClick","showAddedUserMenu","addNewUserToCurrentChat","renderAddedUserWindow","getState","JSON","stringify","newUserId","AuthenticationForm","password","updateUserEmailValue","updateUserPasswordValue","RegistrationForm","updateUserNameValue","SettingsPanel","onSignOut","currentUserName","ErrorWindow","statusParagraph","badStatusTextParagraph","messageParagraph","onOk","App","createNewChat","clearLastError","Fragment","renderChatListNewChatForm","renderErrorWindow","submitNewUser","submitUserEmailAndPassword","renderMainContent","chatName","usersIds","newChatData","userEmail","userPassword","userAuthenticationData","setItem","Boolean","window","location","hostname","match","store","createStore","rootReducer","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.856583f7.chunk.js","sourcesContent":["export const serverLocation = 'http://localhost:4000/'\n\nexport const messageSendPath = 'messages/new/'\nexport const messageGetPath = 'messages/listRequest/'\nexport const newMessageGetPath = 'messages/lastMessages/'\nexport const submitNewChatPath = 'chats/new/'\nexport const chatsListGetPath = 'chats/listRequest/'\nexport const submitUserEmailAndPasswordPath = 'users/login/'\nexport const submitNewUserPath = 'users/new/'\nexport const searchUsersPath = 'users/search/'\nexport const addNewUserToChatPath = 'chats/addNewUser/'\n\nexport const fetchMessagesCount = 3\nexport const updateInterval = 10000","export const httpHeadersWithoutToken = {\n    'Accept': 'application/json',\n    'Content-Type': 'application/json',\n}\n\nexport function createHttpHeadersWithToken(token) {\n    return {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`,\n    }\n}\n\nexport function checkResponseAndCreateErrorIfBadStatus(response) {\n\n    if (response.ok) {\n        return\n    } else {\n\n        const { status, statusText, message } = response\n\n        return {\n            status,\n            badStatusText: statusText,\n            message,\n        }\n    }\n}\n\nexport function validateEmail(email) {\n    const reg = /^([A-Za-z0-9_\\-\\.])+\\@([A-Za-z0-9_\\-\\.])+\\.([A-Za-z]{2,4})$/\n\n    return reg.test(email)\n}\n","import { serverLocation,\n         submitNewChatPath,\n         chatsListGetPath,\n         submitUserEmailAndPasswordPath,\n         submitNewUserPath,\n         searchUsersPath,\n         addNewUserToChatPath, } from '../applicationSettings'\n\nimport { createHttpHeadersWithToken, httpHeadersWithoutToken, checkResponseAndCreateErrorIfBadStatus, validateEmail } from './helper'\n\nexport const CHANGE_CURRENT_USER = 'CHANGE_CURRENT_USER'\nexport const CHANGE_CURRENT_CHAT = 'CHANGE_CURRENT_CHAT'\nexport const REFRESH_CHATS_LIST = 'REFRESH_CHATS_LIST'\nexport const SET_AUTHENTICATION_RESULT = 'SET_AUTHENTICATION_RESULT'\nexport const SET_LAST_ERROR = 'SET_LAST_ERROR'\nexport const FILL_FOUND_USERS_LIST = 'FILL_FOUND_USERS_LIST'\nexport const CLEAR_LAST_ERROR = 'CLEAR_LAST_ERROR'\n\nexport function changeCurrentUser(user) {\n    return {\n        type: CHANGE_CURRENT_USER,\n        payload: user\n    }\n}\n\nexport function changeCurrentChat(chat) {\n    return {\n        type: CHANGE_CURRENT_CHAT,\n        payload: chat\n    }\n}\n\nexport function refreshChatsList(chats) {\n    return {\n        type: REFRESH_CHATS_LIST,\n        payload: chats,\n    }\n}\n\nexport function setAuthenticationResult(result) {\n    return {\n        type: SET_AUTHENTICATION_RESULT,\n        payload: result,\n    }\n}\n\nexport function handleServerError(serverErrorData) {\n    return (dispatch) => {\n        if (serverErrorData.status === 401) {\n            dispatch(resetAuthenticationResult())\n        }\n\n        dispatch(setLastError(serverErrorData))\n    }\n}\n\nexport function setLastError(errorData) {\n    return {\n        type: SET_LAST_ERROR,\n        payload: errorData,\n    }\n}\n\nexport function fillFoundUsersList(usersList) {\n    return {\n        type: FILL_FOUND_USERS_LIST,\n        payload: usersList,\n    }\n}\n\nexport function resetAuthenticationResult() {\n    return (dispatch) => {\n        localStorage.removeItem('token')\n        dispatch(setAuthenticationResult(false))\n    }\n}\n\nexport function clearLastError() {\n    return {\n        type: CLEAR_LAST_ERROR,\n    }\n}\n\nexport function createNewChat(name, users) {\n    return (dispatch, getState) => {\n\n        const { token } = localStorage\n\n        if(token) {\n            const newChatData = {\n                chat: {\n                    name,\n                    users,\n                }\n            }\n    \n            fetch(serverLocation + submitNewChatPath, {\n                method: 'POST',\n                headers: createHttpHeadersWithToken(token),\n                body: JSON.stringify(\n                    newChatData\n                )\n            })\n                .then((response) => {\n                    const serverError = checkResponseAndCreateErrorIfBadStatus(response)\n                    return serverError ? serverError : response.json()\n                })\n                .then((data) => {\n    \n                    if (data.status) {\n                        dispatch(handleServerError(data))\n                    } else {\n                        const { _id, name, users } = data.chat\n                        const { currentUser } = getState()\n    \n                        dispatch(changeCurrentChat(_id, name, users))\n                        dispatch(fetchChatsList(currentUser._id))\n                    }\n                })\n                .catch(function (error) {\n                    console.log('error', error)\n                })\n        }\n    }\n}\n\nexport function fetchChatsList(userId) {\n    return (dispatch) => {\n\n        const { token } = localStorage\n\n        if(token) {\n            fetch(`${serverLocation}${chatsListGetPath}?user_id=${userId}`, {\n                method: 'GET',\n                headers: createHttpHeadersWithToken(token),\n            })\n                .then(response => {\n                    const serverError = checkResponseAndCreateErrorIfBadStatus(response)\n                    return serverError ? serverError : response.json()\n                })\n                .then((data) => {                   \n                    if (data.badStatusText) {\n                        dispatch(handleServerError(data))\n                        localStorage.removeItem('token')\n                    } else {\n                        dispatch(refreshChatsList(data))\n                    }\n                })\n                .catch(function (error) {\n                    console.log('error', error)\n                })\n        }\n    }\n}\n\nexport function submitUserEmailAndPassword(email, password) {\n    return (dispatch) => {\n\n        if (!validateEmail(email)) {\n            dispatch(setLastError({\n                message: `Bad email: ${email}`,\n            }))\n            return\n        }\n\n        const userAuthenticationData = {\n            user: {\n                email,\n                name: '',\n                password,\n            }\n        }\n\n        fetch(serverLocation + submitUserEmailAndPasswordPath, {\n            method: 'POST',\n            headers: httpHeadersWithoutToken,\n            body: JSON.stringify(\n                userAuthenticationData\n            )\n        })\n            .then((response) => {\n                const serverError = checkResponseAndCreateErrorIfBadStatus(response)\n                return serverError ? serverError : response.json()\n            })\n            .then((data) => {\n\n                if (data.badStatusText) {\n                    dispatch(handleServerError(data))\n                    dispatch(setAuthenticationResult(false))\n                } else {\n                    const { _id, token } = data.user\n\n                    localStorage.setItem('token', token)\n\n                    dispatch(changeCurrentUser(data.user))\n                    dispatch(setAuthenticationResult(true))\n                    dispatch(fetchChatsList(_id))\n                }\n            })\n            .catch(function (error) {\n                console.log('error', error)\n            })\n    }\n}\n\nexport function submitNewUser(user) {\n    return (dispatch) => {\n\n        if (!validateEmail(user.email)) {\n            dispatch(setLastError({\n                message: `Bad email: ${user.email}`,\n            }))\n\n            return\n        }\n\n        fetch(serverLocation + submitNewUserPath, {\n            method: 'POST',\n            headers: httpHeadersWithoutToken,\n            body: JSON.stringify({ user })\n        })\n            .then((response) => {\n                const serverError = checkResponseAndCreateErrorIfBadStatus(response)\n                return serverError ? serverError : response.json()\n            })\n            .then((data) => {\n\n                if (data.badStatusText) {\n                    dispatch(handleServerError(data))\n                    dispatch(setAuthenticationResult(false))\n                } else {\n                    const { _id, token } = data.user\n\n                    localStorage.setItem('token', token)\n\n                    dispatch(changeCurrentUser(data.user))\n                    dispatch(changeCurrentChat({}))\n                    dispatch(setAuthenticationResult(true))\n                    dispatch(fetchChatsList(_id))\n                }\n            })\n            .catch(function (error) {\n                console.log('error', error)\n            })\n    }\n}\n\nexport function findUsers(userSeekData) {\n    return (dispatch) => {\n        const { token } = localStorage\n\n        if(token) {\n            fetch(`${serverLocation}${searchUsersPath}?user_seek_data=${userSeekData}`, {\n                method: 'GET',\n                headers: createHttpHeadersWithToken(token),\n            })\n                .then(response => {\n                    const serverError = checkResponseAndCreateErrorIfBadStatus(response)\n                    return serverError ? serverError : response.json()\n                })\n                .then((data) => {\n                    if (data.badStatusText) {\n                        dispatch(handleServerError(data))\n\n                        localStorage.removeItem('token')\n                    } else {\n                        dispatch(fillFoundUsersList(data))\n                    }\n                })\n                .catch(function (error) {\n                    console.log('error', error)\n                })\n        }\n    }\n}\n\nexport function addNewUserToCurrentChat(user) {\n    return (dispatch, getState) => {\n        const { token } = localStorage\n        if(token) {\n            const { currentChat } = getState()\n    \n            fetch(serverLocation + addNewUserToChatPath, {\n                method: 'POST',\n                headers: createHttpHeadersWithToken(token),\n                body: JSON.stringify({\n                        chatId: currentChat._id,\n                        newUserId: user._id,\n                    }\n                )\n            })\n                .then((response) => {\n                    const serverError = checkResponseAndCreateErrorIfBadStatus(response)\n                    return serverError ? serverError : response.json()\n                })\n                .then((data) => {\n    \n                    if (data.badStatusText) {\n                        dispatch(handleServerError(data))\n                    } else {\n                        const { _id, name, users } = data.chat\n    \n                        dispatch(changeCurrentChat(_id, name, users))\n                    }\n                })\n                .catch(function (error) {\n                    console.log('error', error)\n                })\n        }\n    }\n}\n","import { serverLocation, messageSendPath, messageGetPath, newMessageGetPath, fetchMessagesCount } from '../applicationSettings'\n\nimport { handleServerError } from './chatSettingsActions'\n\nimport { createHttpHeadersWithToken, checkResponseAndCreateErrorIfBadStatus } from './helper'\n\nexport const ADD_NEW_MESSAGE = 'ADD_NEW_MESSAGE'\nexport const MESSAGE_WAS_RECEIVED = 'MESSAGE_WAS_RECEIVED'\nexport const REFRESH_MESSAGES_LIST = 'REFRESH_MESSAGES_LIST'\nexport const UNSHIFT_PREVIOUS_MESSAGES = 'UNSHIFT_PREVIOUS_MESSAGES'\nexport const PUSH_NEW_MESSAGES = 'PUSH_NEW_MESSAGES'\n\nexport function addNewMessage(message) {\n    return {\n        type: ADD_NEW_MESSAGE,\n        payload: message,\n    }\n}\n\nexport function messageWasReceived(bool) {\n    return {\n        type: MESSAGE_WAS_RECEIVED,\n        payload: bool,\n    };\n}\n\nexport function refreshMessagesList(messages) {\n    return {\n        type: REFRESH_MESSAGES_LIST,\n        payload: messages,\n    }\n}\n\nexport function unshiftPreviousMessages(messages) {\n    return {\n        type: UNSHIFT_PREVIOUS_MESSAGES,\n        payload: messages,\n    }\n}\n\nexport function pushNewMessages(messages) {\n    return {\n        type: PUSH_NEW_MESSAGES,\n        payload: messages,\n    }\n}\n\nexport function sendNewMessage(text) {\n    return (dispatch, getState) => {\n\n        const token = localStorage.token\n\n        if(token){\n            dispatch(messageWasReceived(false))\n\n            const time = (new Date()).getTime();\n            const authorEmail = getState().currentUser.email\n            const authorName = getState().currentUser.name\n            const chatId = getState().currentChat._id\n    \n            const message = {\n                chatId,\n                time,\n                authorEmail,\n                authorName,\n                text,\n            }\n    \n            fetch(serverLocation + messageSendPath, {\n                method: 'POST',\n                headers: createHttpHeadersWithToken(token),\n                body: JSON.stringify(\n                    message\n                )\n            })\n                .then((response) => {\n                    const serverError = checkResponseAndCreateErrorIfBadStatus(response)\n                    return serverError ? serverError : response.json()\n                })\n                .then((data) => {                  \n                    if (data.status) {\n                        dispatch(handleServerError(data))\n                        message.wasMessageReceived = false\n                        dispatch(addNewMessage(message))\n                        localStorage.removeItem('token')\n                    } else {\n                        message.wasMessageReceived = true\n                        dispatch(addNewMessage(message))\n                        dispatch(messageWasReceived(true));\n                    }\n                })\n                .catch(function (error) {\n                    console.log('error', error)\n                })\n        }\n    };\n}\n\nexport function fetchMessagesList(chatId, oldestMessageTime) {\n    return (dispatch) => {\n\n        const token = localStorage.token\n\n        if(token){\n            fetch(`${serverLocation}${messageGetPath}?chat_id=${chatId}&oldest_message_time=${oldestMessageTime}&fetch_messages_count=${fetchMessagesCount}`, {\n                method: 'GET',\n                headers: createHttpHeadersWithToken(token),\n            })\n                .then(response => {\n                    const serverError = checkResponseAndCreateErrorIfBadStatus(response)\n                    return serverError ? serverError : response.json()\n                })\n                .then((data) => {\n                    if (data.badStatusText) {\n                        dispatch(handleServerError(data))\n                        localStorage.removeItem('token')\n                    } else {\n                        dispatch(unshiftPreviousMessages(data))\n                    }\n                })\n                .catch(function (error) {\n                    console.log('error', error)\n                })\n        }\n    }\n}\n\nexport function fetchNewMessages(chatId, newestMessageTime) {\n    return (dispatch) => {\n\n        const token = localStorage.token\n\n        if(token){\n            fetch(`${serverLocation}${newMessageGetPath}?chat_id=${chatId}&newest_message_time=${newestMessageTime}`, {\n                method: 'GET',\n                headers: createHttpHeadersWithToken(token),\n            })\n                .then(response => {\n                    const serverError = checkResponseAndCreateErrorIfBadStatus(response)\n                    return serverError ? serverError : response.json()\n                })\n                .then((data) => {\n                    if (data.badStatusText) {\n                        dispatch(handleServerError(data))\n                        localStorage.removeItem('token')\n                    } else {\n                        dispatch(pushNewMessages(data))\n                    }\n                })\n                .catch(function (error) {\n                    console.log('error', error)\n                })\n        }\n    }\n}","import { combineReducers } from 'redux'\nimport { messages, wasMessageReceived } from './messageListData'\nimport { currentUser, currentChat, chatsList, isUserAuthenticated, lastError, usersList } from './chatSettings'\n\nexport default combineReducers({\n    messages,\n    wasMessageReceived,\n    currentUser,\n    currentChat,\n    chatsList,\n    isUserAuthenticated,\n    lastError,\n    usersList,\n})","import { ADD_NEW_MESSAGE,\n         MESSAGE_WAS_RECEIVED,\n         REFRESH_MESSAGES_LIST,\n         UNSHIFT_PREVIOUS_MESSAGES,\n         PUSH_NEW_MESSAGES, } from '../actions/messageListActions'\n\nexport function messages(state = [], action) {\n    switch (action.type) {\n        case ADD_NEW_MESSAGE:\n            return state.concat(action.payload)\n        case REFRESH_MESSAGES_LIST:\n            return action.payload\n        case UNSHIFT_PREVIOUS_MESSAGES:\n            const previousMessages = action.payload\n            return [...previousMessages, ...state]\n        case PUSH_NEW_MESSAGES:\n            const newMessages = action.payload\n            return [...state, ...newMessages]\n        default:\n            return state\n    }\n}\n\nexport function wasMessageReceived(state = true, action) {\n    switch (action.type) {\n        case MESSAGE_WAS_RECEIVED:\n            return action.payload\n        default:\n            return state\n    }\n}","import { \n    CHANGE_CURRENT_USER, \n    CHANGE_CURRENT_CHAT, \n    REFRESH_CHATS_LIST, \n    SET_AUTHENTICATION_RESULT, \n    SET_LAST_ERROR,\n    FILL_FOUND_USERS_LIST,\n    CLEAR_LAST_ERROR,\n} from '../actions/chatSettingsActions'\n\nexport function currentUser(state = {}, action) {\n    switch (action.type) {\n        case CHANGE_CURRENT_USER:\n            return action.payload\n        default:\n            return state\n    }\n}\n\nexport function currentChat(state = {}, action) {\n    switch (action.type) {\n        case CHANGE_CURRENT_CHAT:\n            return action.payload\n        default:\n            return state\n    }\n}\n\nexport function chatsList(state = [], action) {\n    switch (action.type) {\n        case REFRESH_CHATS_LIST:\n            return action.payload\n        default:\n            return state\n    }\n}\n\nexport function isUserAuthenticated(state = false, action) {\n    switch (action.type) {\n        case SET_AUTHENTICATION_RESULT:\n            return action.payload\n        default:\n            return state\n    }\n}\n\nexport function lastError(state = null, action) {\n    switch (action.type) {\n        case SET_LAST_ERROR:\n            return action.payload\n        case CLEAR_LAST_ERROR:\n            return null\n        default:\n            return state\n    }\n}\n\nexport function usersList(state = [], action) {\n     switch (action.type) {\n        case FILL_FOUND_USERS_LIST:\n            return action.payload\n        default:\n            return state\n    }\n}","import React from 'react'\nimport PropTypes from 'prop-types'\n\nclass NewChatForm extends React.Component {\n\n    state = {\n        name: '',\n        users: [],\n    }\n\n    onSubmit = (event) => {\n        event.preventDefault()\n\n        this.props.onSubmitNewChat(this.state.name, [this.props.currentUserId])\n\n        this.setState({\n            name: '',\n            users: [],\n        })\n    }\n\n    updateChatNameValue = (eventArg) => {\n        this.setState({\n            name: eventArg.target.value\n        })\n    }\n\n    render() {\n        return (\n            <form onSubmit = { this.onSubmit }>\n                <h4>+Chat</h4>\n                <input\n                    name = 'chatName'\n                    placeholder = 'chat name'\n                    type = 'text'\n                    value = { this.state.name }\n                    onChange = { this.updateChatNameValue }\n                />\n                <button type = \"submit\">\n                    Create new chat\n                </button>\n            </form>\n        )\n    }\n}\n\nNewChatForm.propTypes = {\n    currentUserId: PropTypes.string.isRequired,\n    onSubmitNewChat: PropTypes.func.isRequired,\n}\n\nexport { NewChatForm }","import React from 'react'\nimport PropTypes from 'prop-types'\n\nfunction MessageTimestamp(props) {\n\n    const date = new Date(props.time)\n    const hours = date.getHours()\n    const minutes = date.getMinutes()\n    const day = date.getDate()\n    const month = date.getMonth() + 1\n    const year = date.getFullYear()\n\n    return (\n        <div>\n            <p>{ hours }:{ minutes } { day }.{ month }.{ year }</p>\n        </div>\n    )\n}\n\nMessageTimestamp.propTypes = {\n    time: PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.instanceOf(Date)]).isRequired\n}\n\nexport { MessageTimestamp }","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { MessageTimestamp } from './MessageTimestamp'\n\nfunction MessageFrame(props) {\n\n    const { message } = props\n\n    return (\n        <div>\n            <div>\n                <p>{ message.authorName }</p>\n            </div>\n            <div>\n                <p>{ message.authorEmail }</p>\n            </div>\n            <div>\n                <p>{ message.text }</p>\n            </div>\n            <MessageTimestamp time = { message.time } />\n        </div>\n    )\n}\n\nMessageFrame.propTypes = {\n    message: PropTypes.exact({\n        _id: PropTypes.string,\n        chatId: PropTypes.string.isRequired,\n        authorName: PropTypes.string.isRequired,\n        authorEmail: PropTypes.string.isRequired,\n        time: PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.instanceOf(Date)]).isRequired,\n        text: PropTypes.string.isRequired,\n        wasMessageReceived: PropTypes.bool,\n    })\n}\n\nexport { MessageFrame }","import React from 'react'\nimport PropTypes from 'prop-types'\n\nclass NewMessageInput extends React.Component {\n\n    state = {\n        newMessage: ''\n    }\n\n    onSubmit = (event) => {\n        event.preventDefault()\n        \n        this.props.onSubmitNewMessage(this.state.newMessage)\n\n        this.setState({\n            newMessage: ''\n        })\n    }\n\n    updateInputValue = (eventArg) => {\n        this.setState({\n            newMessage: eventArg.target.value\n        })\n    }\n\n    render() {\n        return (\n            <form className = \"new-message-input\" onSubmit = { this.onSubmit }>\n                <h4>+Message</h4>\n                <input\n                    name = 'userMessage'\n                    placeholder = 'message text'\n                    type = 'text'\n                    value = { this.state.newMessage }\n                    onChange = { this.updateInputValue }\n                />\n                <button type = 'submit'>\n                    Send message\n                </button>\n            </form>\n        )\n    }\n}\n\nNewMessageInput.propTypes = {\n    onSubmitNewMessage: PropTypes.func.isRequired\n}\n\nexport { NewMessageInput }","import React from 'react'\nimport { connect } from 'react-redux'\nimport PropTypes from 'prop-types'\nimport { fetchMessagesList } from '../actions/messageListActions'\nimport { fetchNewMessages } from '../actions/messageListActions'\nimport { MessageFrame } from '../components/MessageFrame'\nimport { NewMessageInput } from '../components/NewMessageInput'\nimport { updateInterval } from '../applicationSettings'\nimport './MessageList.sass'\n\nclass MessageList extends React.Component {\n\n    constructor(props) {\n        super(props)\n        \n        this.messageListRef = React.createRef()\n\n        this.state = {\n            enableScrollDown: true,\n            previousMessagesLength: 0,\n        }\n    }\n\n    componentDidMount = () => {\n        this.fetchMessages()\n        this.initializeMessagesListUpdateTimer()\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.timerID)\n      }\n\n    componentDidUpdate = () => {\n        const { messages } = this.props;\n        const scrollDownShift = 30\n        \n        if (!messages) return\n        \n        const messagesLength = messages.length\n        const previousMessagesLength = this.state.previousMessagesLength\n        \n        if (messagesLength === previousMessagesLength) return\n\n        this.setState({\n            previousMessagesLength: messagesLength,\n        })\n\n        const { current } = this.messageListRef\n\n        current.scrollTop += scrollDownShift\n\n        this.scrollDownIfEnabled()\n    }\n\n    initializeMessagesListUpdateTimer = () => {\n        this.timerID = setInterval(() => this.fetchNewMessages(), updateInterval)\n    }\n    \n    fetchMessages = () => {\n        const currentChat = this.props.currentChat\n        const messages = this.props.messages\n\n        if(!currentChat || !currentChat._id) return\n        if(!messages) return\n\n        const time = (new Date()).getTime();\n\n        const oldestMessageTime = messages.length ? messages[0].time : time\n\n        this.props.fetchMessagesList(currentChat._id, oldestMessageTime)\n    }\n\n    fetchNewMessages = () => {\n        const currentChat = this.props.currentChat\n        const messages = this.props.messages\n\n        if(!currentChat || !currentChat._id) return\n        if(!messages) return\n\n        const lastMessageIndex = messages.length - 1\n\n        if (lastMessageIndex < 0) {\n            this.fetchMessages()\n            return\n        }\n\n        this.props.fetchNewMessages(currentChat._id, messages[lastMessageIndex].time)\n    }\n\n    scrollDownIfEnabled = () => {\n        if (this.state.enableScrollDown) {\n\n            this.setState({\n                enableScrollDown: false,\n            })\n\n            this.scrollDown()\n        }\n    }\n\n    scrollDown = () => {\n        const { current } = this.messageListRef\n\n        current.scrollTop = current.scrollHeight\n    }\n\n    renderMessageList = () => {\n        const { messages } = this.props;\n        const messagesLength = messages.length\n\n        if (messages && messagesLength) {\n            return messages.map(function (item, index) {\n                return (\n                    <MessageFrame key = { index } message = { item } />\n                    )\n                })\n        }\n    }\n\n    onScrollDownClick = () => {\n        this.scrollDown()\n    }\n\n    onScroll = () => {\n        const minScrollTop = 30\n        const { current } = this.messageListRef\n\n        if (current.scrollTop < minScrollTop) {\n            this.fetchMessages()\n        }\n    }\n\n    sendNewMessage = (newMessage) => {\n        this.props.sendNewMessage(newMessage)\n        \n        this.setState({\n            enableScrollDown: true,\n        })\n    }\n\n    render() {\n\n        const strToDecode = \"&#11015\";\n        const parser = new DOMParser();\n        const decodedString = parser.parseFromString(`<!doctype html><body>${strToDecode}`, 'text/html').body.textContent;\n\n        return (\n            <div>\n                <div className = \"scroll-down-button\" onClick = { this.onScrollDownClick}>\n                    { decodedString }\n                </div>\n                <div ref = { this.messageListRef } className = \"message-list\" onScroll = { this.onScroll }>\n                    {this.renderMessageList()}\n                </div>\n                <NewMessageInput\n                    onSubmitNewMessage = { this.sendNewMessage }\n                />\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        messages: state.messages,\n        currentChat: state.currentChat,\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        fetchMessagesList: (chatId, oldestMessageTime) => dispatch(fetchMessagesList(chatId, oldestMessageTime)),\n        fetchNewMessages: (chatId, newestMessageTime) => dispatch(fetchNewMessages(chatId, newestMessageTime)),\n    }\n}\n\nMessageList.propTypes = {\n    messages: PropTypes.arrayOf(PropTypes.shape({\n        message: PropTypes.exact({\n            chatId: PropTypes.number.isRequired,\n            authorName: PropTypes.string.isRequired,\n            authorEmail: PropTypes.string.isRequired,\n            time: PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.instanceOf(Date)]).isRequired,\n            text: PropTypes.string.isRequired,\n            wasMessageReceived: PropTypes.bool,\n        })\n    }))\n}\n\nexport { MessageList }\nexport default connect(mapStateToProps, mapDispatchToProps)(MessageList);","import React from 'react'\nimport PropTypes from 'prop-types'\n\nclass ChatFrame extends React.Component {\n\n    onSelectChat = () => {\n        \n        const { chat } = this.props\n        \n        this.props.onSelectChat(chat)\n    }\n\n    renderUsersList = (users) => {\n        \n        if (users && users.length) {\n\n            return users.map((item, index) => {\n                return (\n                    <div key = { index }>\n                        <p>{ item.name }</p>\n                    </div>  \n                )\n            })\n        }\n    }\n\n    render() {\n        const { chat } = this.props\n\n        return (\n            <div className = \"selected-item\" onClick = { this.onSelectChat }>\n                <div>\n                    <h4>{ chat.name }</h4>\n                </div>\n                <div>\n                    <p>Chat members:</p>\n                        <div>\n                            { this.renderUsersList(chat.users) }\n                        </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nChatFrame.propTypes = {\n    chat: PropTypes.exact({\n        _id: PropTypes.string.isRequired,\n        name: PropTypes.string.isRequired,\n        users: PropTypes.arrayOf(PropTypes.exact({\n            _id: PropTypes.string.isRequired,\n            name: PropTypes.string.isRequired,\n            email: PropTypes.string.isRequired,\n        })).isRequired,\n    }),\n    onSelectChat: PropTypes.func.isRequired,\n}\n\nexport { ChatFrame }","import React from 'react'\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types'\nimport { fetchChatsList, changeCurrentChat } from '../actions/chatSettingsActions';\nimport { ChatFrame } from '../components/ChatFrame'\nimport './ChatList.sass'\n\nclass ChatList extends React.Component {\n\n    componentDidMount() {\n\n        let userId = this.props.currentUser._id\n\n        if (!userId) return\n\n        this.props.fetchChatsList(userId)\n    }\n\n    renderChatList = () => {\n        const { chatsList, changeCurrentChat } = this.props;\n\n        if (chatsList && chatsList.length) {\n            return chatsList.map(function (item) {\n                return (\n                    <ChatFrame onSelectChat = { changeCurrentChat } key = { item._id } chat = { item } />\n                )\n            })\n        }\n    }\n\n    render() {\n        return (\n            <div className = \"сhat-list\">\n                { this.renderChatList() }\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        chatsList: state.chatsList,\n        currentUser: state.currentUser,\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        fetchChatsList: (userId) => dispatch(fetchChatsList(userId)),\n        changeCurrentChat: (chat) => dispatch(changeCurrentChat(chat)),\n    }\n}\n\nChatList.propTypes = {\n    chatsList: PropTypes.arrayOf(PropTypes.shape({\n        chat: PropTypes.exact({\n            _id: PropTypes.string.isRequired,\n            name: PropTypes.string.isRequired,\n            users: PropTypes.arrayOf(PropTypes.shape({\n                _id: PropTypes.string.isRequired,\n                name: PropTypes.string.isRequired,\n                email: PropTypes.string.isRequired,\n            })).isRequired,\n        })\n    })),\n    changeCurrentChat: PropTypes.func.isRequired,\n}\n\nexport { ChatList }\nexport default connect(mapStateToProps, mapDispatchToProps)(ChatList);","import React from 'react'\nimport PropTypes from 'prop-types'\n\nclass UserFrame extends React.Component {\n\n    onUserClick = () => {\n        \n        const { user } = this.props\n        \n        this.props.onUserClick(user)\n    }\n\n    render() {\n        const { user } = this.props\n\n        return (\n            <div className = \"selected-item\" onClick = { this.onUserClick }>\n                <p>{ user.name }</p>\n                <p>{ user.email }</p>\n            </div>\n        )\n    }\n}\n\nUserFrame.propTypes = {\n    chat: PropTypes.exact({\n        _id: PropTypes.string.isRequired,\n        name: PropTypes.string.isRequired,\n        email: PropTypes.string.isRequired,\n    }),\n    onSelectUser: PropTypes.func,\n}\n\nexport { UserFrame }","import React from 'react'\nimport PropTypes from 'prop-types'\n\nclass UserSeekForm extends React.Component {\n\n    state = {\n        userSeekData: '',\n    }\n\n    onSubmit = (eventArg) => {\n        eventArg.preventDefault()\n\n        this.props.onSubmitUserSeekData(this.state.userSeekData)\n\n        this.setState({\n            searchQueryString: '',\n        })\n    }\n\n    updateSearchQueryString = (eventArg) => {\n        this.setState({\n            userSeekData: eventArg.target.value\n        })\n    }\n\n    render() {\n        return (\n            <form onSubmit = { this.onSubmit }>\n                <h1>Search for a new member</h1>\n                <label>Enter email</label>\n                <input\n                    name = \"userEmail\"\n                    placeholder = 'User email'\n                    type = 'text'\n                    value = { this.state.userSeekData }\n                    onChange = { this.updateSearchQueryString }\n                />\n                <button type = 'submit'>\n                    Find users\n                </button>\n            </form>\n        )\n    }\n}\n\nUserSeekForm.propTypes = {\n    onSubmitUserSeekData: PropTypes.func.isRequired\n}\n\nexport { UserSeekForm }","import React from 'react'\nimport { UserFrame } from './UserFrame'\nimport { UserSeekForm } from './UserSeekForm'\nimport PropTypes from 'prop-types'\n\nclass AddToChatNewUserWindow extends React.Component {\n    \n    onSubmitUserSeekData = (userSeekData) => {\n        this.props.findUsers(userSeekData)\n    }\n\n    renderUsersList = () => {\n        const { usersList, onUserClick } = this.props\n\n        if (usersList && usersList.length) {\n            return usersList.map(function (item) {\n                return (\n                    <UserFrame onUserClick = { onUserClick } key = { item._id } user = { item } />\n                )\n            })\n        }\n    }\n\n    render() {\n        return (\n            <div className = \"cover-div\">\n                <div className = \"modal-window\">\n                    <UserSeekForm\n                        onSubmitUserSeekData = { this.onSubmitUserSeekData }\n                    />\n                    { this.renderUsersList() }\n                    <button onClick = { this.props.cancelUserAdding }>\n                        Cancel\n                    </button>\n                </div>\n            </div>\n        )\n    }\n}\n\nAddToChatNewUserWindow.propTypes = {\n    usersList: PropTypes.arrayOf(PropTypes.shape({\n        user: PropTypes.exact({\n            _id: PropTypes.number.isRequired,\n            name: PropTypes.string.isRequired,\n            email: PropTypes.string.isRequired,\n        })\n    })),\n    findUsers: PropTypes.func.isRequired,\n    onUserClick: PropTypes.func.isRequired,\n    cancelUserAdding: PropTypes.func.isRequired,\n}\n\nexport { AddToChatNewUserWindow }","import React from 'react'\nimport { connect } from 'react-redux'\nimport { AddToChatNewUserWindow } from '../components/AddToChatNewUserWindow'\nimport { findUsers, addNewUserToCurrentChat } from '../actions/chatSettingsActions'\nimport PropTypes from 'prop-types'\n\nclass CurrentChatSettings extends React.Component {\n\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            showAddedUserMenu: false,\n        }\n    }\n\n    onAddUserButtonClick = () => {\n        this.setState({\n            showAddedUserMenu: true,\n        })\n    }\n\n    addNewUserToCurrentChat = (user) => {\n        this.setState({\n            showAddedUserMenu: false,\n        })\n\n        this.props.addNewUserToCurrentChat(user)\n    }\n\n    cancelUserAdding = () => {\n        this.setState({\n            showAddedUserMenu: false,\n        })\n    }\n\n    renderAddedUserWindow = () => {\n\n        const { showAddedUserMenu } = this.state\n        const { currentChat, findUsers, usersList } = this.props\n\n        if (showAddedUserMenu) {\n            return (\n                <AddToChatNewUserWindow\n                    findUsers = { findUsers }\n                    usersList = { usersList }\n                    onUserClick = { this.addNewUserToCurrentChat }\n                    cancelUserAdding = { this.cancelUserAdding }\n                />\n            )\n        }\n\n        if (currentChat._id) {\n            return (\n                <button onClick = { this.onAddUserButtonClick }>\n                    Add new user to chat\n                </button>\n            )\n        }\n    }\n\n    render() {\n        return (\n                <div>\n                    <span>Chat: { this.props.currentChat.name }</span>\n                    { this.renderAddedUserWindow() }\n                </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        currentChat: state.currentChat,\n        usersList: state.usersList,\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        findUsers: (userSeekData) => dispatch(findUsers(userSeekData)),\n        addNewUserToCurrentChat: (user) => dispatch(addNewUserToCurrentChat(user)),\n    }\n}\n\nCurrentChatSettings.propTypes = {\n    usersList: PropTypes.arrayOf(PropTypes.shape({\n        user: PropTypes.exact({\n            _id: PropTypes.number.isRequired,\n            name: PropTypes.string.isRequired,\n            email: PropTypes.string.isRequired,\n        })\n    })),\n    currentChat: PropTypes.exact({\n        _id: PropTypes.string,\n        name: PropTypes.string,\n        users: PropTypes.arrayOf(PropTypes.shape({\n            _id: PropTypes.string.isRequired,\n            name: PropTypes.string.isRequired,\n            email: PropTypes.string.isRequired,\n        })),\n    }),\n    findUsers: PropTypes.func.isRequired,\n    addNewUserToCurrentChat: PropTypes.func.isRequired,\n}\n\nexport { CurrentChatSettings }\nexport default connect(mapStateToProps, mapDispatchToProps)(CurrentChatSettings)","import React from 'react'\nimport PropTypes from 'prop-types'\n\nclass AuthenticationForm extends React.Component {\n\n    state = {\n        email: '',\n        password: '',\n    }\n\n    onSubmit = (event) => {\n        event.preventDefault()\n\n        this.props.onSubmit(this.state.email, this.state.password)\n\n        this.setState({\n            email: '',\n            password: '',\n        })\n    }\n\n    updateUserEmailValue = (eventArg) => {\n        this.setState({\n            email: eventArg.target.value\n        })\n    }\n\n    updateUserPasswordValue = (eventArg) => {\n        this.setState({\n            password: eventArg.target.value\n        })\n    }\n\n    render() {\n        return (\n            <form onSubmit = { this.onSubmit } className = \"reg-auth-form\">\n                <h3>Login</h3>\n                <label>User email</label>\n                <input\n                    name = 'userEmail'\n                    placeholder='User email'\n                    type = 'text'\n                    value = { this.state.email }\n                    onChange = { this.updateUserEmailValue }\n                /><br />\n                <label>User password</label>\n                <input\n                    name = 'userPassword'\n                    placeholder = 'User password'\n                    type = 'text'\n                    value = { this.state.password }\n                    onChange = { this.updateUserPasswordValue }\n                /><br />\n                <button type = \"submit\">\n                    Submit\n                </button>\n            </form>\n        )\n    }\n}\n\nAuthenticationForm.propTypes = {\n    onSubmit: PropTypes.func.isRequired\n}\n\nexport { AuthenticationForm }","import React from 'react'\nimport PropTypes from 'prop-types'\n\nclass RegistrationForm extends React.Component {\n\n    state = {\n        email: '',\n        name: '',\n        password: '',\n    }\n\n    onSubmit = (eventArg) => {\n        eventArg.preventDefault()\n\n        const { email, name, password } = this.state\n\n        const user = {\n            email,\n            name,\n            password,\n        }\n\n        this.props.onSubmit(user)\n\n        this.setState({\n            email: '',\n            name: '',\n            password: '',\n        })\n    }\n\n    updateUserEmailValue = (eventArg) => {\n        this.setState({\n            email: eventArg.target.value\n        })\n    }\n\n    updateUserNameValue = (eventArg) => {\n        this.setState({\n            name: eventArg.target.value\n        })\n    }\n\n    updateUserPasswordValue = (eventArg) => {\n        this.setState({\n            password: eventArg.target.value\n        })\n    }\n\n    render() {\n        return (\n            <form onSubmit = { this.onSubmit } className = \"reg-auth-form\">\n                <h3>New user registration</h3>\n                <label>User email</label>\n                <input\n                    name = \"userEmail\"\n                    placeholder = 'User email'\n                    type = 'text'\n                    value = { this.state.email }\n                    onChange = { this.updateUserEmailValue }\n                /><br />\n                <label>User name</label>\n                <input\n                    name = 'userName'\n                    placeholder = 'User name'\n                    type = 'text'\n                    value = { this.state.name }\n                    onChange = { this.updateUserNameValue }\n                /><br />\n                <label>User password</label>\n                <input\n                    name = 'userPassword'\n                    placeholder = 'User password'\n                    type = 'text'\n                    value = { this.state.password }\n                    onChange = { this.updateUserPasswordValue }\n                /><br />\n                <button type = 'submit'>\n                    Send new user registration data\n                </button>\n            </form>\n        )\n    }\n}\n\nRegistrationForm.propTypes = {\n    onSubmit: PropTypes.func.isRequired\n}\n\nexport { RegistrationForm }","import React from 'react'\nimport PropTypes from 'prop-types'\n\nfunction SettingsPanel(props) {\n\n    return (\n        <div>\n            <button onClick = { props.onSignOut }>\n                Sign out\n            </button>\n            <span>\n                { props.currentUserName }\n            </span>\n        </div>\n    )\n}\n\nSettingsPanel.propTypes = {\n    onSignOut: PropTypes.func.isRequired,\n    currentUserName: PropTypes.string,\n}\n\nexport { SettingsPanel }","import React from 'react'\nimport PropTypes from 'prop-types'\n\nfunction ErrorWindow(props) {\n\n    const { status, badStatusText, message } = props.lastError\n\n    let statusParagraph, badStatusTextParagraph, messageParagraph\n\n    if (status) {\n        statusParagraph = <p>\n            Status: { status }\n        </p>\n    }\n\n    if (status) {\n        badStatusTextParagraph = <p>\n            Status text: { badStatusText }\n        </p>\n    }\n\n    if (status) {\n        messageParagraph = <p>\n            Message: { message }\n        </p>\n    }\n\n    return (\n        <div className = \"moda-window\">\n            <div>\n                <h4>Error</h4>\n            </div>\n            <div>\n                { statusParagraph }\n                { badStatusTextParagraph }\n                { messageParagraph }\n            </div>\n            <button onClick = { props.onOk }>\n                Ok\n            </button>\n        </div>\n    )\n}\n\nErrorWindow.propTypes = {\n    lastError: PropTypes.exact({\n        status: PropTypes.number,\n        badStatusText: PropTypes.string,\n        message: PropTypes.string,\n    })\n}\n\nexport { ErrorWindow }","import React from 'react'\nimport { NewChatForm } from '../components/NewChatForm'\nimport MessageList from './MessageList'\nimport ChatList from './ChatList'\nimport CurrentChatSettings from './CurrentChatSettings'\nimport { AuthenticationForm } from '../components/AuthenticationForm'\nimport { RegistrationForm } from '../components/RegistrationForm'\nimport { SettingsPanel } from '../components/SettingsPanel'\nimport { ErrorWindow } from '../components/ErrorWindow'\nimport { connect } from 'react-redux'\nimport { sendNewMessage } from '../actions/messageListActions'\nimport { submitUserEmailAndPassword, submitNewUser, createNewChat, resetAuthenticationResult, clearLastError } from '../actions/chatSettingsActions'\nimport './App.sass'\n\nclass App extends React.Component {\n\n  renderChatListNewChatForm() {\n    if (this.props.currentUser._id) {\n      return (\n        <div>\n          <ChatList />\n          <NewChatForm\n            onSubmitNewChat = { this.props.createNewChat }\n            currentUserId = { this.props.currentUser._id }\n          />\n        </div>\n      )\n    }\n  }\n\n  renderMessageList() {\n    if (!this.props.currentUser._id) return\n    if (!this.props.currentChat._id) return\n\n    return (\n      <MessageList sendNewMessage = { this.props.sendNewMessage } />\n    )\n  }\n\n  renderErrorWindow() {\n    if (!this.props.lastError) return\n\n    return (\n      <div className = \"cover-div\">\n        <ErrorWindow className = \"modal-window\" onOk = { this.props.clearLastError } lastError = { this.props.lastError } />\n      </div>\n    )\n  }\n\n  onSignOut = () => {\n    this.props.resetAuthenticationResult()\n  }\n\n  renderMainContent() {\n    if (this.props.isUserAuthenticated) {\n      return (\n        <React.Fragment>\n          <div className = \"top-panel\">\n            <SettingsPanel className = \"settings-panel\"\n              onSignOut = { this.onSignOut } currentUserName = { this.props.currentUser.name }\n            />\n            <CurrentChatSettings className = \"current-chat-settings\"/>\n          </div>\n          <div className = \"main-panel\">\n            <div className = \"user-chats-panel\">\n              { this.renderChatListNewChatForm() }\n            </div>\n            <div className = \"current-chat-panel\">\n              {this.renderMessageList()}\n            </div>\n          </div>\n        </React.Fragment>\n      )\n    }\n\n    return (\n      <React.Fragment>\n        { this.renderErrorWindow() }\n        <div className = \"reg-auth-forms-panel\">\n          <RegistrationForm\n            onSubmit = { this.props.submitNewUser }\n          />\n          <AuthenticationForm\n            onSubmit = { this.props.submitUserEmailAndPassword }\n          />\n        </div>\n      </React.Fragment>\n    )\n  }\n\n  render() {\n    return (\n      <div className = \"app-panel\">\n        { this.renderMainContent() }\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    currentUser: state.currentUser,\n    currentChat: state.currentChat,\n    wasMessageReceived: state.wasMessageReceived,\n    isUserAuthenticated: state.isUserAuthenticated,\n    lastError: state.lastError,\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    createNewChat: (chatName, usersIds) => dispatch(createNewChat(chatName, usersIds)),\n    sendNewMessage: (message) => dispatch(sendNewMessage(message)),\n    submitUserEmailAndPassword: (userEmail, userPassword) => dispatch(submitUserEmailAndPassword(userEmail, userPassword)),\n    submitNewUser: (user) => dispatch(submitNewUser(user)),\n    resetAuthenticationResult: () => dispatch(resetAuthenticationResult()),\n    clearLastError: () => dispatch(clearLastError()),\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport configureStore from './store/configureStore';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = configureStore()\n\nReactDOM.render(\n    <Provider store = {store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createStore, applyMiddleware } from 'redux'\nimport thunk from 'redux-thunk'\nimport rootReducer from '../reducers'\n\nexport default function configureStore(initialState) {\n\n    return createStore(\n        rootReducer,\n        applyMiddleware(thunk)\n    )\n}"],"sourceRoot":""}